<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 Typora + PicGo + 七牛云搭建图床</title>
    <url>/2022/01/27/Typora+%E4%B8%83%E7%89%9B%E4%BA%91+Picgo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>初学 Java 时，接触了 Typora 这个 MarkDown 文本编辑神器，使用起来非常方便。</p>
<p>但是对于图片的处理稍显不足，之前一直是保存在本地，使用本地连接引用图片。上传 md 文档时还得同时上传图片源文件，不是很方便。</p>
<p>网上发现 Typora 0.9.86 以上支持图床，研究了一下，可以更方便插入图片了。记录一下过程</p>
<p>需要：</p>
<ol>
<li>一个备案的域名；</li>
<li>一个七牛云账号；</li>
<li>PicGo;</li>
<li>Typora</li>
</ol>
<h2 id="1-创建七牛云的账号并创建新的空间"><a href="#1-创建七牛云的账号并创建新的空间" class="headerlink" title="1 创建七牛云的账号并创建新的空间"></a>1 创建七牛云的账号并创建新的空间</h2><p>官网：<a href="https://www.qiniu.com/">https://www.qiniu.com/</a></p>
<ol>
<li>创建七牛云账号，<strong>控制台</strong> – <strong>对象存储</strong>，立即添加，<strong>新建存储空间</strong>：</li>
</ol>
<p><img src="http://image.kongxiao.top/image-20210203104101614.png" alt="image-20210203104101614"></p>
<p><img src="http://image.kongxiao.top/image-20210719111531800.png" alt="image-20210719111531800"></p>
<p><img src="http://image.kongxiao.top/image-20210203104330378.png" alt="image-20210203104330378"></p>
<p><img src="http://image.kongxiao.top/image-20210203104605197.png" alt="image-20210203104605197"></p>
<ol start="2">
<li><p>绑定自己已经备案过的域名。可以使用二级域名</p>
<p><img src="http://image.kongxiao.top/image-20210719111445945.png" alt="image-20210719111445945"></p>
</li>
</ol>
<p><img src="http://image.kongxiao.top/image-20210203105148979.png" alt="image-20210203105148979"></p>
<ol start="3">
<li>复制这个CNAME码，去域名网站设置解析</li>
</ol>
<p><img src="http://image.kongxiao.top/image-20210203105346598.png" alt="image-20210203105346598"></p>
<h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2 域名解析"></a>2 域名解析</h2><p>我的域名是在阿里云买的，</p>
<p>因此登录阿里云控制台，<strong>域名，解析，添加记录</strong></p>
<p>主机记录就是上面自己设置的二级域名</p>
<p>记录值就是上面复制的 CNAME 码</p>
<p><img src="http://image.kongxiao.top/20210719113256.png" alt="image-20210719113255381"></p>
<h2 id="3-下载并安装-PicGo"><a href="#3-下载并安装-PicGo" class="headerlink" title="3 下载并安装 PicGo"></a>3 下载并安装 PicGo</h2><p>官网：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
<p><img src="http://image.kongxiao.top/image-20210203111740848.png" alt="image-20210203111740848"></p>
<p>进入图床设置，设置七牛图床相关参数。</p>
<p><img src="http://image.kongxiao.top/image-20210203111857239.png" alt="image-20210203111857239"></p>
<ul>
<li><strong>AccessKey 和 SercetKey</strong> ：可以在七牛云密钥管理中查到</li>
</ul>
<p><img src="http://image.kongxiao.top/image-20210203112110367.png" alt="image-20210203112110367"></p>
<p><img src="http://image.kongxiao.top/20210719113412.png" alt="image-20210719113411464"></p>
<ul>
<li><p><strong>存储空间名称</strong>：即自己创建的空间名称</p>
</li>
<li><p><strong>访问网址</strong>：自己设置的二级域名，记得加http</p>
</li>
<li><p><strong>存储区域</strong>：可以对照下表查看</p>
</li>
</ul>
<p><img src="http://image.kongxiao.top/image-20210203113321040.png" alt="image-20210203113321040"></p>
<p>将默认的图床设置成七牛就完事了。</p>
<p>我还设置了上传文件时以时间戳重命名，防止出现重名覆盖。</p>
<p><img src="http://image.kongxiao.top/20210719113101.png" alt="image-20210719113100935"></p>
<h2 id="4-Typora-的设置"><a href="#4-Typora-的设置" class="headerlink" title="4 Typora 的设置"></a>4 Typora 的设置</h2><p><strong>文件 – 偏好设置</strong>。</p>
<p>选择 PicGo 的路径，以及插入图片时的操作即可。可以点击验证是否配置正确。</p>
<p><img src="http://image.kongxiao.top/20210719112830.png"></p>
<p>可以根据个人喜好设置，我设置的是插入图片时无操作，插入图片后由我手动选择是否上传。</p>
<p>以后就可以愉快的插入图片啦！</p>
<p><img src="http://image.kongxiao.top/20210719112952.png" alt="image-20210719112951069"></p>
<h2 id="5-利用-Github-搭建免费图床（可选）"><a href="#5-利用-Github-搭建免费图床（可选）" class="headerlink" title="5 利用 Github 搭建免费图床（可选）"></a>5 利用 Github 搭建免费图床（可选）</h2><p>如果没有自己的域名，也可以用 Github 也是可以搭建免费图床的。步骤如下：</p>
<ol>
<li>在 Github  上新建一个仓库，用作图床仓库，比如 blog-img；</li>
<li>在 Github 创建一个 token，依次打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></li>
</ol>
<img src="C:/Users/kongx/AppData/Roaming/Typora/typora-user-images/image-20220428214625867.png" alt="image-20220428214625867" style="zoom: 80%;" />

<img src="C:/Users/kongx/AppData/Roaming/Typora/typora-user-images/image-20220428214649277.png" alt="image-20220428214649277" style="zoom:80%;" />

<blockquote>
<p>注意：<code>token</code> 生成后只会显示一次，所以最好把它复制下保存到备忘录，否则忘记后下次有需要新建</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/xiaokong0510/blog-img/20220428214714.png" alt="image-20220428214713133"></p>
<ol start="3">
<li><p>配置 PicGo，依次打开 <strong>图床设置 -&gt; Github 图</strong>床；填写相关信息即可，有需要的话可以设为默认图床；</p>
<p>注意现在的分支名默认都是 <code>main</code> 了。</p>
<img src="C:/Users/kongx/AppData/Roaming/Typora/typora-user-images/image-20220428214949331.png" alt="image-20220428214949331" style="zoom:80%;" />
</li>
<li><p><strong>加速访问</strong>。可以用 <a href="https://links.jianshu.com/go?to=https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，只需配置中添加如下自定义域名即可；</p>
<p>比如我的就是 <code>https://cdn.jsdelivr.net/gh/xiaokong0510/blog-img</code></p>
</li>
</ol>
<p>后面 typora 设置就和之前的一样啦！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>MarkDown</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Win10 中启动 WSL2 并安装 Linux</title>
    <url>/2022/05/27/%E5%9C%A8Win10%E4%B8%AD%E5%90%AF%E5%8A%A8WSL2%E5%B9%B6%E5%AE%89%E8%A3%85Linux/</url>
    <content><![CDATA[<p>本文内容：</p>
<ol>
<li>了解  WSL 和 WSL2</li>
<li>在 Windows 10 上开启 WSL2 并安装 Ubuntu</li>
<li>安装 docker</li>
</ol>
<p>参考官网文档： <a href="https://docs.microsoft.com/zh-cn/windows/wsl/">https://docs.microsoft.com/zh-cn/windows/wsl/</a></p>
<h2 id="什么是-WSL"><a href="#什么是-WSL" class="headerlink" title="什么是 WSL"></a>什么是 WSL</h2><p><code>WSL</code>，即 <code>Windows Subsystem for Linux</code>，适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU&#x2F;Linux 环境 (包括大多数命令行工具、实用工具和应用程序)， 且不会产生虚拟机开销。</p>
<p>您可以：</p>
<ul>
<li><a href="https://aka.ms/wslstore">在 Microsoft Store</a> 中选择你偏好的 GNU&#x2F;Linux 分发版。</li>
<li>运行常用的命令行软件工具（例如 <code>grep</code>、<code>sed</code>、<code>awk</code>）或其他 ELF-64 二进制文件。</li>
<li>运行 Bash shell 脚本和 GNU&#x2F;Linux 命令行应用程序，包括：<ul>
<li>工具：vim、emacs、tmux</li>
<li>语言：<a href="https://docs.microsoft.com/zh-CN/windows/nodejs/setup-on-wsl2">NodeJS</a>、Javascript、<a href="https://docs.microsoft.com/zh-CN/windows/python/web-frameworks">Python</a>、Ruby、C&#x2F;C++、C# 与 F#、Rust、Go 等</li>
<li>服务：SSHD、<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database">MySQL</a>、Apache、lighttpd、<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database">MongoDB</a>、<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database">PostgreSQL</a>。</li>
</ul>
</li>
<li>使用自己的 GNU&#x2F;Linux 分发包管理器安装其他软件。</li>
<li>使用类似于 Unix 的命令行 shell 调用 Windows 应用程序。</li>
<li>在 Windows 上调用 GNU&#x2F;Linux 应用程序。</li>
</ul>
<h2 id="什么是WSL2"><a href="#什么是WSL2" class="headerlink" title="什么是WSL2"></a>什么是WSL2</h2><p>WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是<strong>提高文件系统性能</strong>，以及添加<strong>完全的系统调用兼容性</strong>。</p>
<p>这一新的体系结构改变了这些 Linux 二进制文件与Windows 和计算机硬件进行交互的方式，但仍然提供与 WSL 1（当前广泛可用的版本）中相同的用户体验。</p>
<p>单个 Linux 分发版可以在 WSL 1 或 WSL 2 体系结构中运行。 每个分发版可随时升级或降级，并且你可以并行运行 WSL 1 和 WSL 2 分发版。 WSL 2 使用全新的体系结构，该体系结构受益于运行真正的 Linux 内核。</p>
<p>总结如下：</p>
<ol>
<li>WSL 2 是 WSL 中体系结构的新版本，它更改 Linux 发行版与 Windows 交互的方式。</li>
<li>WSL 2 的主要目标是提高文件系统性能并增加系统调用的完全兼容性。 </li>
<li>每个 Linux 发行版都可以作为 WSL 1 或 WSL 2 发行版运行，并可随时进行切换。 </li>
<li>WSL 2 是底层体系结构的主要功能，它使用虚拟化技术和 Linux 内核来实现其新功能。</li>
</ol>
<h2 id="WSL-1-和-WSL-2-功能比较"><a href="#WSL-1-和-WSL-2-功能比较" class="headerlink" title="WSL 1 和 WSL 2 功能比较"></a>WSL 1 和 WSL 2 功能比较</h2><p><img src="http://image.kongxiao.top/image-20220414221049850.png" alt="image-20220414221049850"></p>
<h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><p>详细安装过程可参考文档 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install">https://docs.microsoft.com/zh-cn/windows/wsl/install</a></p>
<blockquote>
<p><strong>一步安装指令</strong>： <code>wsl --install</code></p>
<p>在管理员 PowerShell 或 Windows 命令提示符中输入此命令，然后重启计算机</p>
</blockquote>
<p>此命令将：</p>
<ul>
<li>启用可选的 WSL 和虚拟机平台组件</li>
<li>下载并安装最新 Linux 内核</li>
<li>将 WSL 2 设置为默认值</li>
<li>下载并安装 Ubuntu Linux 发行版（可能需要重新启动）</li>
</ul>
<p><strong>旧版的 Windows 可能不支持这种方式，所以需要进行手动分步安装，如下所述。</strong></p>
<h3 id="步骤-1-启用适用于-Linux-的-Windows-子系统"><a href="#步骤-1-启用适用于-Linux-的-Windows-子系统" class="headerlink" title="步骤 1 - 启用适用于 Linux 的 Windows 子系统"></a>步骤 1 - 启用适用于 Linux 的 Windows 子系统</h3><p>以 <strong>管理员身份</strong> 打开 <code>PowerShell</code></p>
<p><img src="http://image.kongxiao.top/image-20220414230052575.png" alt="image-20220414230052575"></p>
<p>输入如下命令 (然后根据提示重启电脑)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>

<p><img src="http://image.kongxiao.top/image-20210330232921672.png" alt="image-20210330232921672"></p>
<p>或者也可以：</p>
<p>设置 → 应用和功能 → 右侧相关设置中的程序和功能 → 左侧启用或关闭<code>windows</code>功能：</p>
<p>勾选启动的<code>Linux</code>的<code>windows</code>子系统这个选项，确定后重启电脑。</p>
<p><img src="http://image.kongxiao.top/image-20220414230645657.png" alt="image-20220414230645657"></p>
<h3 id="步骤-2-检查运行-WSL-2-的要求"><a href="#步骤-2-检查运行-WSL-2-的要求" class="headerlink" title="步骤 2 - 检查运行 WSL 2 的要求"></a>步骤 2 - 检查运行 WSL 2 的要求</h3><p>更新到 WSL 2，需要运行 Windows 10。</p>
<ul>
<li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用 <strong>内部版本 18362</strong> 或更高版本。</li>
</ul>
<blockquote>
<p>要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”</p>
</blockquote>
<h3 id="步骤-3-启用虚拟机功能"><a href="#步骤-3-启用虚拟机功能" class="headerlink" title="步骤 3 - 启用虚拟机功能"></a>步骤 3 - 启用虚拟机功能</h3><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed">虚拟化功能</a>才能使用此功能。</p>
<p>以管理员身份打开 PowerShell 并运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p><strong>重新启动</strong> 计算机，以完成 WSL 安装并更新到 WSL 2。</p>
<p>这部也可以在启用或关闭<code>windows</code>功能菜单中设置。</p>
<h3 id="步骤-4-下载-Linux-内核更新包"><a href="#步骤-4-下载-Linux-内核更新包" class="headerlink" title="步骤 4 - 下载 Linux 内核更新包"></a>步骤 4 - 下载 Linux 内核更新包</h3><p>下载地址：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p>
<p>下载完成后运行上一步中下载的更新包</p>
<h3 id="步骤-5-将-WSL-2-设置为默认版本"><a href="#步骤-5-将-WSL-2-设置为默认版本" class="headerlink" title="步骤 5 - 将 WSL 2 设置为默认版本"></a>步骤 5 - 将 WSL 2 设置为默认版本</h3><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="步骤-6-安装所选的-Linux-分发"><a href="#步骤-6-安装所选的-Linux-分发" class="headerlink" title="步骤 6 - 安装所选的 Linux 分发"></a>步骤 6 - 安装所选的 Linux 分发</h3><p>打开 <a href="https://aka.ms/wslstore">Microsoft Store</a>，搜索 Ubuntu，选择”获取”</p>
<p><img src="http://image.kongxiao.top/image-20220427220957231.png" alt="image-20220427220957231"></p>
<p>安装完成后启动新安装的 Linux 分发版，创建用户帐户和密码即可使用。</p>
<p><img src="http://image.kongxiao.top/image-20220427231116456.png" alt="image-20220427231116456"></p>
<h3 id="步骤-7-安装-Windows-终端"><a href="#步骤-7-安装-Windows-终端" class="headerlink" title="步骤 7 - 安装 Windows 终端"></a>步骤 7 - 安装 Windows 终端</h3><p>参考文档：<a href="https://docs.microsoft.com/zh-CN/windows/terminal/install">https://docs.microsoft.com/zh-CN/windows/terminal/install</a></p>
<p>在微软应用商城获取 <strong>Windows Terminal</strong></p>
<p><img src="http://image.kongxiao.top/image-20220414232541281.png" alt="image-20220414232541281"></p>
<h2 id="WSL2-与-Windows-之间共享文件"><a href="#WSL2-与-Windows-之间共享文件" class="headerlink" title="WSL2 与 Windows 之间共享文件"></a>WSL2 与 Windows 之间共享文件</h2><p>由于 WSL2 为 Windows 原生支持的子系统所以无需设置即可直接共享目录等。</p>
<ol>
<li>Windows 中直接访问 WSL2 中的文件或文件夹<br>在 wsl 中输入如下命令，使用资源管理器 Explorer 打开当前的目录。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure>

<p><img src="http://image.kongxiao.top/image-20220414233148418.png" alt="image-20220414233148418"></p>
<p>或者访问路径 \wsl$\Ubuntu-20.04</p>
<p><img src="http://image.kongxiao.top/image-20220427231234276.png" alt="image-20220427231234276"></p>
<ol start="2">
<li>在 WSL2 中所有的磁盘已被挂载到了 Linux发行版中&#x2F;mnt 目录下，在此目录下默认会把 Windows 中所有已挂载的盘也映射到 &#x2F;mnt目录下：</li>
</ol>
<p><img src="http://image.kongxiao.top/image-20220414233401466.png" alt="image-20220414233401466"></p>
<p>默认的 wsl 没有设置 root 密码，需要通过如下指令设置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo  passwd root</span><br></pre></td></tr></table></figure>

<h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>更换 Ubuntu 官方源为国内源，加快下载速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将内容替换为下方：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br></pre></td></tr></table></figure>

<p>接下来添加 Docker 源，依次执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">   $</span><span class="language-bash">(lsb_release -cs) \</span></span><br><span class="line"><span class="language-bash">   stable<span class="string">&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>配置完成软件源之后安装 Docker 并启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y docker-ce</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>

<p>启动后如果不 sudo 执行 Docker 的命令会提示没有权限：</p>
<p><img src="http://image.kongxiao.top/20220522205644.png" alt="image-20220522205636231"></p>
<p>通过将用户添加到<a href="https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020">docker</a>用户组可以将 sudo 去掉命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker #添加docker用户组</span><br><span class="line"></span><br><span class="line">sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中</span><br><span class="line"></span><br><span class="line">newgrp docker #更新用户组</span><br></pre></td></tr></table></figure>



<p>好了，现在可以愉快的在 windows 机器上玩 docker 了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法(一) - 时间复杂度和简单排序算法</title>
    <url>/2022/05/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%80)-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>学习视频： <a href="https://www.bilibili.com/video/BV13g41157hK?p=3">B站左神算法与数据结构视频 P3认识复杂度和简单排序算法</a></p>
<p>内容包括：</p>
<ol>
<li>时间复杂度的定义；</li>
<li>简单排序算法，包括：选择排序、冒泡排序、插入排序；</li>
<li>二分法、局部最小值问题；</li>
<li>异或运算、对数器的使用；</li>
</ol>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><strong>常数操作</strong>：一个操作和样本的数据量没有关系，每次都是固定时间内完成的操作</p>
<p>总结出常数操作数量的表达式，用 big 0 来表示时间复杂，只要高阶项。</p>
<h2 id="简单排序算法"><a href="#简单排序算法" class="headerlink" title="简单排序算法"></a>简单排序算法</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>流程：</p>
<ol>
<li>索引 0 ~ n-1，找出最小的值，放在索引 0 处；</li>
<li>索引 1 ~ n-1，找出最小的值，放在索引 1 处；</li>
<li>索引 2 ~ n-1，找出最小的值，放在索引 2 处；</li>
<li>…</li>
<li>索引 n-2 ~ n-1，找出最小的值，放在索引 n-2 处；</li>
</ol>
<p><strong>时间复杂度 O(n^2)；空间复杂度 O (1)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    	retrun;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.lrgth -<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 每次最小值都默认为起始元素</span></span><br><span class="line">    	<span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        	minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;        </span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>流程：</p>
<ol>
<li>索引 0 ~ n-1，依次比较相邻两个数，谁大谁往右移，搞定 n-1 的位置；</li>
<li>索引 0 ~ n-2，依次比较相邻两个数，谁大谁往右移，搞定 n-2 的位置；</li>
<li>索引 0 ~ n-3，依次比较相邻两个数，谁大谁往右移，搞定 n-3 的位置；</li>
<li>…</li>
<li>索引 0 ~ 1，依次比较相邻两个数，谁大谁往右移，搞定 1 的位置；</li>
</ol>
<p><strong>时间复杂度 O(n^2)；空间复杂度 O (1)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    	retrun;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length -<span class="number">1</span>; i &gt; <span class="number">0</span> ; i--) &#123;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        	<span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            	swap(arr, j, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>类似于摸牌并将其从大到小排列。每次摸到一张牌后，根据其点数插入到确切位置</p>
<p>流程：</p>
<ol>
<li>索引 1 处的元素与前面的数依次比较，小就往前移动，保证索引 0 ~ 1 有序；</li>
<li>索引 2 处的元素与前面的数依次比较，小就往前移动，保证索引 0 ~ 2 有序；</li>
<li>索引 3 处的元素与前面的数依次比较，小就往前移动，保证索引 0 ~ 3 有序；</li>
<li>…</li>
<li>索引 n-1 处的元素依次与前面的数比较，保证索引 0 ~ n-1 有序；</li>
</ol>
<p><strong>时间复杂度 O(n^2)；空间复杂度 O (1)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">        	swap(arr, j, j + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="二分法详解与扩展"><a href="#二分法详解与扩展" class="headerlink" title="二分法详解与扩展"></a>二分法详解与扩展</h2><h3 id="基本二分查找"><a href="#基本二分查找" class="headerlink" title="基本二分查找"></a>基本二分查找</h3><p><strong>在一个有序数组中，寻找某个数是否存在 ，存在则返回下标；不存在则返回-1</strong></p>
<blockquote>
<p>对应  <a href="https://leetcode.cn/problems/binary-search/">leetcode704. 二分查找</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] sortedArray, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (sortedArray == <span class="literal">null</span> || sortedArray.length == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// 搜索区间为 [left, right]</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sortedArray.length - <span class="number">1</span>; </span><br><span class="line">     <span class="comment">// 终止条件是 left == right + 1</span></span><br><span class="line">     <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">if</span> (sortedArray[mid] == target) &#123;</span><br><span class="line">             <span class="keyword">return</span> mid;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortedArray[mid] &gt; target) &#123;</span><br><span class="line">             right = mid - <span class="number">1</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortedArray[mid] &lt; target) &#123;</span><br><span class="line">             left = mid + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么 while 循环的条件中是 &lt;&#x3D;，而不是 &lt; ？</p>
</blockquote>
<p>因为初始化 right 的赋值是 <code>sortedArray.length - 1</code>，而不是 <code>sortedArray.length</code></p>
<p><strong>区别是：前者搜索区间是闭区间 [left, right]，后者搜索区间是左闭右开区间 [left, right)</strong></p>
<p>停止搜索的条件是找到了目标值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(sortedArray[mid] == target)</span><br><span class="line"><span class="keyword">return</span> mid;</span><br></pre></td></tr></table></figure>

<p>但如果没找到，就需要 while 循环终止，然后返回 -1。<strong>即搜索区间为空的时候应该终止 while 循环</strong></p>
<ul>
<li><p><code>while(left &lt;= right)</code> 的终止条件是<code>left == right + 1</code>，写成区间的形式就是 [right + 1, right]，例如 [3, 2]，此时搜索区间为空，while 循环终止是正确的，直接返回 -1 即可；</p>
</li>
<li><p><code>while(left &lt; right)</code> 的终止条件是 <code>left == right</code>，写成区间的形式就是 [right, right]，例如 [2, 2]，此时搜索区间非空，还有一个数 2，但此时 while 循环终止了，也就是说这区间 [2, 2] 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就可能出现错误。</p>
</li>
</ul>
<p>当然，如果用 <code>while(left &lt; right)</code> 也可以，最后返回时需要做修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sortedArr[left] == target ? left : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进一步思考，此算法的缺陷？</p>
<p>有序数组 nums &#x3D; [1,2,2,2,3]，target &#x3D; 2，此算法返回的索引是 2；</p>
<p>但是如果想得到 target 的左侧边界，即索引 1，或者想得到 target 的右侧边界，即索引 3，此算法无法处理</p>
</blockquote>
<h3 id="寻找左侧边界"><a href="#寻找左侧边界" class="headerlink" title="寻找左侧边界"></a><strong>寻找左侧边界</strong></h3><p><strong>在一个有序数组中，找 &gt;&#x3D; 某个数最左侧的位置</strong></p>
<p>思路：</p>
<ol>
<li>一直二分到最后一个数，如果最后一个数是 &gt;&#x3D; 目标值的，此时就是最左的位置；</li>
<li>如果最后一个数不是 &gt;&#x3D; 目标值，就说明上一次记录的 index 是最左的位置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nearestIndex</span><span class="params">(<span class="type">int</span>[] sortedArray, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sortedArray.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (sortedArray[mid] &gt;= value) &#123;</span><br><span class="line">            index = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortedArray[mid] &lt; value) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此思路同样可以扩展为<strong>寻找右侧边界：</strong> <strong>在一个有序数组中《&#x3D; 某个数最右侧的位置</strong></p>
<p>与基本二分查找的区别是：</p>
<ul>
<li>基本二分查找，如果找到目标数，就停止了，不用继续二分了</li>
<li>而寻找 &gt;&#x3D; 某个数最左侧的位置，<strong>一定是二分到结束</strong></li>
</ul>
<h3 id="局部最小值问题"><a href="#局部最小值问题" class="headerlink" title="局部最小值问题"></a>局部最小值问题</h3><p><strong>在无序、相邻元素不相等的数组中返回一个局部最小值的位置</strong></p>
<p>数组无序，同样可以采用二分法</p>
<p>思路：</p>
<ol>
<li>若 arr[0] &lt; arr[1]，那么 arr[0] 即为局部最小；</li>
<li>若 arr[n-2] &gt; arr[n-1]，那么 arr[n-1] 即为局部最小；</li>
<li>以上都不成立，说明此数组两端高，那么中间必存在局部最小值，则在区间 [1，n-2]  开始二分；</li>
<li>若 arr[mid] &gt; arr[mid - 1]，说明在区间 [0, mid] 两端高，则进一步二分，直到找到</li>
<li>若 arr[mid] &gt; arr[mid + 1]，说明在区间 [mid, n - 1] 两端高，则进一步二分，直到找到</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLessValueIndex</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最左即为局部最小</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">1</span> || arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最右即为局部最小</span></span><br><span class="line">    <span class="keyword">if</span> (arr[arr.length - <span class="number">1</span>] &lt; arr[arr.length - <span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  在区间[1，n-2]开始二分</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; arr[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>异或运算的规则是 <strong>相等为0，不等为1</strong>，也可以理解为<strong>无进位相加</strong></p>
<h4 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h4><ul>
<li><code>0^N == N</code>，<code>N^N == 0</code></li>
<li>异或运算满足交换律和结合率：<code>(A ^ B) ^ C == A ^ (B ^ C)</code>，<code>A ^ B == B ^ A</code></li>
</ul>
<h4 id="用异或做交换"><a href="#用异或做交换" class="headerlink" title="用异或做交换"></a>用异或做交换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<ul>
<li>当：a &#x3D; a ^ b</li>
<li>则：b &#x3D; a ^ b &#x3D; a ^ b ^ b &#x3D; a</li>
<li>则：a &#x3D; a ^ b ^ a &#x3D; b</li>
</ul>
<p><strong>【注意】使用的前提是 a 和 b 不可以是同一块内存，否则都会变为 0</strong></p>
<h4 id="用异或找数"><a href="#用异或找数" class="headerlink" title="用异或找数"></a>用异或找数</h4><p>题目1：一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到这一个数？</p>
<blockquote>
<p>对应： <a href="https://leetcode.cn/problems/single-number/">leetcode136. 只出现一次的数字</a> </p>
</blockquote>
<p>思路：<strong>从头异或到尾，偶数次出现的数自己异或等0，剩下的就是出现了奇数次的数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findOddTimesNum1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">        res ^= cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>题目2：一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到这两个数</p>
<blockquote>
<p>对应：<a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></p>
</blockquote>
<p>思路：</p>
<ol>
<li>从头异或到尾，得到了这两个数的异或 <code>res1 = a^b</code>；</li>
<li>a、b 不相等，那么 <code>a^b≠0</code>， a 和 b 的某一位肯定不相同，要么 a 等于 1，b 等于 0，要么 a 等于 0，b 等于 1；</li>
<li>提取  res1 最右侧的 1，假设是第 k 位，这一位置上 a、b 不一样；那么数组可以分成两部分，第 k 位为 1的，和第 k 位为 0 的，一边有 a，一边有 b；</li>
<li>再设置一个变量 res2，<strong>res2 只和第 k 位是 1 的数异或</strong>，那么在第二次遍历之后，res2 就是 a 或 b 中的一个。<code>res1^res2</code> 就是另一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] findOddTimesNum2(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">        res1 ^= cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="comment">// 提取最右侧的 1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> res1 &amp; (~res1 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">        <span class="comment">// 将数组分成两部分的关键，也可以写成 != 0</span></span><br><span class="line">        <span class="keyword">if</span> ((cur &amp; rightOne) == <span class="number">0</span>) &#123;</span><br><span class="line">            res2 ^= cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;res2, (res1 ^ res2)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="提取一个数最右边的1"><a href="#提取一个数最右边的1" class="headerlink" title="提取一个数最右边的1"></a>提取一个数最右边的1</h3><p>计算方法：<strong>原数取返，加1，再与上原数</strong></p>
<p><img src="https://image.kongxiao.top/20211208112529.png" alt="img"></p>
<h3 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h3><ol>
<li>有一个你想要测的方法 a；</li>
<li>实现一个绝对正确但是复杂度不好的方法 b；</li>
<li>实现一个随机样本产生器；</li>
<li>实现对比算法 a 和 b 的方法；</li>
<li>把方法 a 和方法 b 比对多次来验证方法 a 是否正确；</li>
<li>如果有一个样本使得比对出错，打印样本分析是哪个方法出错；</li>
<li>当样本数量很多时比对测试依然正确，可以确定方法 a 已经正确。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comparator</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生一个随机数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxSize  数组元素个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxValue 数组元素最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxValue) &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">// 数组长度随机</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[random.nextInt(maxSize) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 数组元素随机，相减是为了能得到负数，最大值为 maxValue</span></span><br><span class="line">            arr[i] = (random.nextInt(maxValue) + <span class="number">1</span>) - (random.nextInt(maxValue));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyArray(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, res, <span class="number">0</span>, arr.length);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个数组是否相等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(arr1, arr2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以冒泡排序为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   		<span class="comment">// 测试次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">500000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">succeed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr1 = SortUtils.generateRandomArray(maxSize, maxValue);</span><br><span class="line">            <span class="type">int</span>[] arr2 = SortUtils.copyArray(arr1);</span><br><span class="line">            bubbleSort(arr1);</span><br><span class="line">            SortUtils.comparator(arr2);</span><br><span class="line">            <span class="keyword">if</span> (!SortUtils.isEqual(arr1, arr2)) &#123;</span><br><span class="line">                succeed = <span class="literal">false</span>;</span><br><span class="line">                SortUtils.printArray(arr1);</span><br><span class="line">                SortUtils.printArray(arr2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(succeed ? <span class="string">&quot;Nice!&quot;</span> : <span class="string">&quot;Fucking fucked!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = SortUtils.generateRandomArray(maxSize, maxValue);</span><br><span class="line">        SortUtils.printArray(arr);</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        SortUtils.printArray(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>时间复杂度</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法(二) - 递归行为、归并排序与快排</title>
    <url>/2022/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%BA%8C)-%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%E3%80%81%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%BF%AB%E6%8E%92/</url>
    <content><![CDATA[<p>学习视频： <a href="https://www.bilibili.com/video/BV13g41157hK?p=4">B站左神算法与数据结构视频 P4 </a></p>
<p>内容包括：</p>
<ol>
<li>剖析递归行为和递归行为时间复杂度的估算；</li>
<li>Master 公式的使用；</li>
<li>快速排序</li>
</ol>
<h2 id="递归行为"><a href="#递归行为" class="headerlink" title="递归行为"></a>递归行为</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>如果在函数中存在着调用函数本身的情况，这种现象就叫递归。</p>
<p><strong>特征</strong>：</p>
<ul>
<li>自身调用：原问题可以分解为子问题，子问题和原问题的求解方法是一致的，即都是调用自身的同一个函数。</li>
<li>终止条件：递归必须有一个终止的条件，即不能无限循环地调用本身。</li>
</ul>
<h3 id="Matser-公式"><a href="#Matser-公式" class="headerlink" title="Matser 公式"></a>Matser 公式</h3><p>Master 公式是用来解决递归问题时间复杂度的公式</p>
<p>一个复杂的过程可以拆分为<strong>多个规模相等的子过程</strong>，以及除去子过程外剩下的过程，则可以直接根据公式计算出其时间复杂度：</p>
<p>T(N) &#x3D; a*T(N&#x2F;b) + O(N^d)</p>
<ol>
<li>log(b,a) &gt; d -&gt; 复杂度为 O(N^log(b,a))</li>
<li>log(b,a) &#x3D; d -&gt; 复杂度为 O(N^d * logN)</li>
<li>log(b,a) &lt; d -&gt; 复杂度为   O(N^d)</li>
</ol>
<p>参考文档： <a href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem">https://blog.gocalf.com/algorithm-complexity-and-master-theorem</a></p>
<h3 id="递归找数组中的最大值"><a href="#递归找数组中的最大值" class="headerlink" title="递归找数组中的最大值"></a>递归找数组中的最大值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 process 方法，获取 arr在 0~arr.length - 1的最大值</span></span><br><span class="line">    <span class="keyword">return</span> process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 arr 在指定范围的最大值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 终止位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 在[left,mid]、[mid+1,right]区间分别找到最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> process(arr, left, mid);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> process(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="comment">// 返回这两个最大值中较大的</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(leftMax, rightMax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度分析：</p>
<ol>
<li>求最大值问题被分成了 2 个子问题，所以 a &#x3D; 2；</li>
<li>数据规模为 N ，每个子问题都只负责 N&#x2F;2 规模的数据，所以b &#x3D; 2；</li>
<li>除去迭代算法，时间复杂度就是O(1)，即N 的0次方，所以 d &#x3D; 0；</li>
<li>套master公式： T(N) &#x3D; 2*T(n&#x2F;2) + O(n^0)，log(2,2) &gt; 0，因此时间复杂度为：O（N^log(2,2)）&#x3D; O（N）</li>
</ol>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>整体就是一个简单递归，左边排好序、右边排好序、让其整体有序。</p>
<p>让其整体有序的过程里用了外排序方法。</p>
<blockquote>
<p>内排序：指在排序期间数据对象所有存放在内存的排序。</p>
<p>外排序：指在排序期间所有对象太多，不能同一时候存放在内存中，必须依据排序过程的要求，不断在内，外存间移动的排序。</p>
</blockquote>
<p>使用 Master 公式来计算时间复杂度：T(N) &#x3D; 2*T(N&#x2F;2) + O(N)，log(2,2) &#x3D; 0，因此：</p>
<p><strong>时间复杂度 O(N*logN)，额外空间复杂度 O(N)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在数组arr l -&gt; r上排列有序</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 左组有序</span></span><br><span class="line">       process(arr, l, mid);</span><br><span class="line">       <span class="comment">// 右组有序</span></span><br><span class="line">       process(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">       <span class="comment">// 合并左右组</span></span><br><span class="line">       merge(arr, l, mid, r);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 左右组合并并排好序</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l   左边界</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mid 中点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> r   右边界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="comment">// 申请一个辅助数组</span></span><br><span class="line">       <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// 左指针</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> l;</span><br><span class="line">       <span class="comment">// 右指针</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">           <span class="comment">// 谁小就复制谁的值到辅助数组，指针移动一位</span></span><br><span class="line">           help[index++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 还剩下的值直接全部复制，两个 while 只会中一个</span></span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= mid) &#123;</span><br><span class="line">           help[index++] = arr[p1++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">           help[index++] = arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 辅助数组的值复制回原数组</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : help) &#123;</span><br><span class="line">           arr[l++] = i;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>为什么比简单排序的时间复杂度更低？因为比较行为没有被浪费，一个整体有序的部分与其他部分去 merge。</p>
<h2 id="归并排序的扩展"><a href="#归并排序的扩展" class="headerlink" title="归并排序的扩展"></a>归并排序的扩展</h2><h3 id="小和问题"><a href="#小和问题" class="headerlink" title="小和问题"></a>小和问题</h3><p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。</p>
<blockquote>
<p>例子：[1,3,4,2,5]</p>
<ul>
<li>1左边比1小的数，没有; </li>
<li>3左边比3小的数，1; </li>
<li>4左边比4小的数，1、3;</li>
<li>2左边比2小的数，1; </li>
<li>5左边比5小的数，1、3、4、2;<br>所以小和为 1 + 1 + 3 + 1 + 1 + 3 + 4 + 2 &#x3D; 16</li>
</ul>
</blockquote>
<p><strong>暴力法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">smallSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            res += arr[j] &lt; arr[i] ? arr[j] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>递归思路：</strong></p>
<ol>
<li>求一个数左边比它小的数，可以转换思维，求一个数右边比它大的数，有几个则该数就产生几个小和；</li>
<li>利用归并排序，merge 时，如果右组的数比左组大，则收集一次左组作当前元素相对于右组所有数的小和，<strong>因为右组是排好序的，因此可以直接得到右组数的个数</strong></li>
<li>注意只能是 arr[p1] &lt; arr[p2]，左右数相等时，只能先拷贝右边的数，因为左边的数还没比较完</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">smallSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> process(arr, l, mid) + process(arr, mid + <span class="number">1</span>, r) + merge(arr, l, mid, r);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 左右组合并并排好序,同时返回小和</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> l;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">           <span class="comment">// 归并排序的同时求小和，因为右边是排好序的，因此可以直接根据下标求出个数</span></span><br><span class="line">           res += arr[p1] &lt; arr[p2] ? (r - p2 + <span class="number">1</span>) * arr[p1] : <span class="number">0</span>;</span><br><span class="line">           <span class="comment">// 注意只能是arr[p1] &lt; arr[p2]，左右数相等时，只能先拷贝右边的数，因为左边的数还没比较完</span></span><br><span class="line">           help[index++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= mid) &#123;</span><br><span class="line">           help[index++] = arr[p1++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">           help[index++] = arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : help) &#123;</span><br><span class="line">           arr[l++] = i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="逆序对问题"><a href="#逆序对问题" class="headerlink" title="逆序对问题"></a>逆序对问题</h3><p>问题：在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对，请打印所有逆序对。</p>
<p>方法与小和问题类似，在 merge 时，统计逆序对的数量并打印。</p>
<blockquote>
<p>对应  <a href="https://leetcode.cn/problems/count-of-smaller-numbers-after-self/">leetcode315. 计算右侧小于当前元素的个数</a></p>
</blockquote>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h3><blockquote>
<p><strong>问题 1：</strong></p>
<p>给定一个数组 arr，和一个数 num，请把小于等于 num 的数放在数组的左边，大于 num 的数放在数组的右边。要求额外空间复杂度 O(1)，时间复杂度 O(N)</p>
</blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>定义一个指针 p1，为小于等于 num 区域的右边界，在遍历 arr 的过程中，不断向右推移；</li>
<li>遍历 arr，当前位置为 curr ，终止条件为 curr &gt;&#x3D; arr.length - 1：<br>a. 如果 arr [i] &lt;&#x3D; num，将 curr 与 p1 的下一位元素互换， curr 向右移动一位；**相当于小于等于 num 区域向右扩展；**<br>b. 如果 arr [i] &gt; num， curr 直接向右移动一位；</li>
</ol>
<p><img src="http://image.kongxiao.top/20220524230013.png" alt="image-20220524230001860"></p>
<blockquote>
<p> <strong>问题 2(荷兰国旗问题)：</strong></p>
<p> 给定一个数组 arr，和一个数 num，请把小于 num 的数放在数组的左边，<strong>等于 num 的数放在数组的中间</strong>，大于 num 的数放在数组的右边。要求额外空间复杂度 O(1)，时间复杂度 O(N)</p>
<p> 对应 <a href="https://leetcode.cn/problems/sort-colors/">leetcode75. 颜色分类</a></p>
</blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>设定 less 为 -1 位置（ &lt; 区域）， more 为 arr.length 位置（ &gt; 区域），cur 为当前移动位置，即；</li>
<li>遍历 arr，当前位置为 cur ，终止条件为 curr &gt;&#x3D; more ：<br>a. 如果 arr [i] &lt; num，将 cur 与 &lt; 区域的下一位元素互换，&lt; 区域向右扩<br>b.  如果 arr [i] &gt; num，将 cur 与 &gt; 区域的前一位元素互换； &gt; 区域向左扩；因为当前位置的元素是从大于区域换过来的，因此 cur  不需要移动，需要再一次判断；<br>c. 如果 arr [i] &#x3D;&#x3D; num， cur 直接向右移动一位；</li>
</ol>
<p><img src="http://image.kongxiao.top/20220529155734.png" alt="image-20220529155732644"></p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr, <span class="type">int</span> num) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">more</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr &lt; more) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[curr] &lt; num) &#123;</span><br><span class="line">            <span class="comment">// 当前位置和less的下一个位置元素交换</span></span><br><span class="line">            swap(arr, ++less, curr++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[curr] &gt; num) &#123;</span><br><span class="line">            <span class="comment">// 当前位置和more的前一个位置元素交换，因为当前位置的元素是从大于区域换过来的，因此 curr 不需要移动</span></span><br><span class="line">            swap(arr, --more, curr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不改进的快速排序"><a href="#不改进的快速排序" class="headerlink" title="不改进的快速排序"></a>不改进的快速排序</h3><p><strong>思路：</strong></p>
<ol>
<li>把数组范围中的最后一个数作为划分值，然后通过荷兰国旗问题，把数组分成三个部分：左侧 &lt; 划分值、中间 &#x3D;&#x3D; 划分值、右侧 &gt; 划分值；这样 &#x3D; 区域的值就来到了它们该来的位置；</li>
<li>对左侧范围和右侧范围，递归执行，直到整体有序</li>
</ol>
<p><strong>分析：</strong></p>
<ol>
<li>划分值越靠近两侧，复杂度越高；划分值越靠近中间，复杂度越低</li>
<li>最差的例子：已经排好序的数组，每次选取的划分值都是最右边，所以不改进的快速排序时间复杂度为<strong>O(N^2)</strong></li>
</ol>
<h3 id="随机快排"><a href="#随机快排" class="headerlink" title="随机快排"></a>随机快排</h3><p>为什么会有最差情况，是因为划分值找的太偏。</p>
<p>如果把划分值尽量安排在中点位置，相当于转为 2个等规模的递归问题，可以根据 Master 公式：</p>
<p>T(N) &#x3D; 2*T(N&#x2F;2) + O(N^1)</p>
<p>则时间复杂度为 O(N*logN)。</p>
<p><strong>改进的快速排序</strong>：</p>
<ol>
<li>在数组范围中，<strong>等概率随机选一个数作为划分值</strong>，然后通过荷兰国旗问题，把数组分成三个部分：左侧 &lt; 划分值、中间 &#x3D;&#x3D; 划分值、右侧 &gt;划分值；</li>
<li>对左侧范围和右侧范围，递归执行；</li>
<li>时间复杂度为 O(N*logN)</li>
</ol>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 快速排序</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr 待排序的数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l   左边界</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> r   右边界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">           <span class="comment">// [l,r]上随机取一个元素作为划分值</span></span><br><span class="line">           swap(arr, l + (<span class="type">int</span>) (Math.random() * (r - l + <span class="number">1</span>)), r);</span><br><span class="line">           <span class="comment">// 以 arr[r]作为划分值，将数组进行划分成三个部分，左侧&lt;划分值、中间==划分值、右侧&gt;划分值</span></span><br><span class="line">           <span class="comment">// 将中间区域的左右边界索引存入 p 中</span></span><br><span class="line">           <span class="type">int</span>[] p = partition(arr, l, r);</span><br><span class="line">           quickSort(arr, l, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">           quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将数组进行划分成三个部分，左侧&lt;划分值、中间==划分值、右侧&gt;划分值，划分值取最右的元素，</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 中间区域的左右边界索引组成的数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> l - <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">more</span> <span class="operator">=</span> r;</span><br><span class="line">       <span class="keyword">while</span> (l &lt; more) &#123;</span><br><span class="line">           <span class="comment">// 以 arr[r]作为划分值，将数组进行划分成三个部分，左侧&lt;划分值、中间==划分值、右侧&gt;划分值</span></span><br><span class="line">           <span class="keyword">if</span> (arr[l] &lt; arr[r]) &#123;</span><br><span class="line">               swap(arr, ++less, l++);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[l] &gt; arr[r]) &#123;</span><br><span class="line">               swap(arr, --more, l);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               l++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 将划分值与右区间的第一个元素交换，arr的[l,r]区间划分完成</span></span><br><span class="line">       swap(arr, more, r);</span><br><span class="line">       <span class="comment">// 返回中间区域的左右边界索引组成的数组，因为将最后一位上的划分值移动到了中间去取，因此右边界为more</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;less + <span class="number">1</span>, more&#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">       arr[i] = arr[j];</span><br><span class="line">       arr[j] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>API接口签名验证与参数加密</title>
    <url>/2022/03/10/API%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>刚开始写代码时，接口都是裸奔的，客户端抓个包，就能知道所有的请求参数和返回参数，对于一些重要的接口，这样是不安全的。</p>
<p>后来公司开始对所有业务接口进行参数加密处理，就学习了接口的签名和加密的相关规则，做个记录。</p>
<h2 id="1-问题引出"><a href="#1-问题引出" class="headerlink" title="1 问题引出"></a>1 问题引出</h2><p>调用API接口时，请求方和接口提供方之间的通信过程，需要考虑几个问题：</p>
<ul>
<li>请求参数是否被篡改；</li>
<li>请求来源是否合法；</li>
<li>请求是否具有唯一性；</li>
</ul>
<p><strong>举个例子：</strong></p>
<p>客户端 app 调用产品信息查询 api 进行产品查询：</p>
<blockquote>
<p>请求: <a href="http://api.test.com/getproducts?key1=value1&amp;key2=value2">http://api.test.com/getproducts?key1=value1&amp;key2=value2</a></p>
</blockquote>
<p>没有进行任何的验证，接口处于裸奔状态，所有人都可以通过这个接口获取到产品列表，导致产品信息泄露。</p>
<h2 id="2-参数签名"><a href="#2-参数签名" class="headerlink" title="2 参数签名"></a>2 参数签名</h2><p>首先进行一个小优化：<strong>调用API 时需对请求参数进行签名验证</strong> ，规则如下：</p>
<ul>
<li>将所有入参（sign 除外）按照 “key&#x3D;value” 的格式拼接起来，并且将拼接以后的字符串以 “&amp;” 字符连接。顺序按首字母升序排列，值为空的不参与签名。将拼接好的字符串做 MD5 签名。</li>
</ul>
<blockquote>
<p>即：MD5(key1&#x3D;value1&amp;key2&#x3D;value2)</p>
</blockquote>
<ul>
<li>将生成的签名 sign 添加在请求参数中</li>
</ul>
<blockquote>
<p>新的接口：<a href="http://api.test.com/getproducts?key1=value1&amp;key2=value2&amp;sign=">http://api.test.com/getproducts?key1=value1&amp;key2=value2&amp;sign=</a>…</p>
</blockquote>
<ul>
<li>后端对请求的 sign 进行校验，需要携带正确的sign才能获取产品数据。</li>
</ul>
<p>但是，只对请求参数进行做 MD5 签名得到的 sign 还是不安全的，别人同样可以做相同的加密操作进行请求 。</p>
<h2 id="3-AccessKey-amp-SecretKey"><a href="#3-AccessKey-amp-SecretKey" class="headerlink" title="3 AccessKey &amp; SecretKey"></a>3 AccessKey &amp; SecretKey</h2><p>进一步优化方法：</p>
<p>为开发者分配 <strong>AccessKey</strong>（开发者标识，确保唯一）和 <strong>SecretKey</strong>（用于接口加密)</p>
<ol>
<li><p>请求参数中也携带 AccessKey；</p>
</li>
<li><p>app 和后端约定一个 SecretKey，用于生成签名；</p>
</li>
<li><p><strong>在上述请求参数字符串中尾部加上 SecretKey 组成一个新字符串，再进行 MD5 加密得到签名 sign</strong>。</p>
<p>当然也可以使用其他的加密算法</p>
</li>
</ol>
<blockquote>
<p>即：MD5(key1&#x3D;value1&amp;key2&#x3D;value2secret)</p>
</blockquote>
<p>请求携带参数<strong>AccessKey</strong>和<strong>Sign</strong>，只有拥有合法的身份 AccessKey 和正确的签名 sign 才能放行。这样就解决了身份验证和参数篡改问题。</p>
<p>如果参数被篡改，没事，因为别人无法知道 SecretKey，也就无法重新生成新的 sign。</p>
<p>注：SecretKey 仅作加密使用, 不参与网络传输，为了保证数据安全请不要在请求参数中使用。</p>
<h2 id="4-请求唯一性保证"><a href="#4-请求唯一性保证" class="headerlink" title="4 请求唯一性保证"></a>4 请求唯一性保证</h2><p>但是…这样就够了吗？</p>
<p>MD5 签名方法可以保证来源及请求参数的合法性，但是请求链接可能会被抓包而造成泄露，人家拿着这个请求链接反复请求，就可以正常获取数据了，即 <strong>重放攻击</strong>，因此仅仅是如上的优化是不够的！</p>
<p>再次优化：</p>
<ul>
<li>在如上的请求参数中带上 <strong>时间戳</strong> ，并且把时间戳也作为签名的一部分。在接口提供方对时间戳进行验证，只允许一定时间范围内的请求，假设为 5 分钟。后端先校验时间戳，相差超过 5 分钟的请求直接拒绝。</li>
</ul>
<blockquote>
<p>新的接口：<a href="http://api.test.com/getproducts?key1=value1&amp;key2=value2&amp;timestamp=...&amp;sign=">http://api.test.com/getproducts?key1=value1&amp;key2=value2&amp;timestamp=...&amp;sign=</a>…</p>
</blockquote>
<p>以上可以使用自定义注解 + 拦截器进行实现。</p>
<h2 id="5-参数加密"><a href="#5-参数加密" class="headerlink" title="5 参数加密"></a>5 参数加密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p><code>Symmetric Cryptography</code>，是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）使用同样的密钥（secret key）。</p>
<p>常见的对称加密算法如 AES，Advanced Encryption Standard。</p>
<p>对称加密的缺点是密钥的管理与分配，即如何发送秘钥。因为在发送密钥的过程中，密钥有很大的风险被拦截。<strong>通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的一方。</strong></p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p><code>Asymmetric Cryptography</code>，使用了一对密钥，**公钥（public key） ** 和 <strong>私钥（private key）</strong>。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。私钥是不会通过网络发送出去，因此安全性大大提高。</p>
<p>目前最常用的非对称加密算法是 RSA 算法</p>
<h3 id="加密方案"><a href="#加密方案" class="headerlink" title="加密方案"></a>加密方案</h3><p>目前采用的加密流程为：</p>
<ol>
<li>为不同的客户端 app 分配了不同的 RSA 加密的公钥，私钥保存在服务器中；</li>
<li>客户端 app 随机生成 AES 密钥并通过 RSA 加密放在请求 header 中；</li>
<li>服务端使用 RSA  的私钥，解密出 AES 密钥原文，从而解密出请求参数；进行业务处理；</li>
<li>使用客户端发过来的 AES 密钥将返回数据加密返回</li>
</ol>
<p>以上流程可以在过滤器中实现。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>接口签名校验和参数加密是非常常见的接口保护手段。</p>
<ol>
<li>签名校验使用了 AccessKey &amp; SecretKey + timestamp 的方式，对请求参数进行 MD5 加密得到签名 sign；</li>
<li>参数加密同时使用了 AES 和 RSA 两种加密算法，对称加密的密钥进行非对称加密后传输。</li>
</ol>
]]></content>
      <categories>
        <category>更多</category>
      </categories>
      <tags>
        <tag>参数加密</tag>
        <tag>签名</tag>
      </tags>
  </entry>
  <entry>
    <title>由客户端重复请求引发的幂等问题</title>
    <url>/2022/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%87%8D%E5%A4%8D%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在做项目的过程中，遇到了一个 <strong>数据库里插入了重复数据</strong> 的问题，当时还造成了一定的困扰。</p>
<p>在请教公司大佬，同时网上搜索后，才把问题弄清，其实就是 <strong>接口幂等性</strong> 的问题，记录一下。</p>
<h2 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1 问题引入"></a>1 问题引入</h2><p>有这样一个场景：<strong>新增用户时，往用户表里插入数据</strong></p>
<p>用户表类似这样：</p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>自增主键</td>
</tr>
<tr>
<td>device_info</td>
<td>varchar</td>
<td>设备信息</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>用户名</td>
</tr>
<tr>
<td>…</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>处理流程：</p>
<ol>
<li><p>客户端调用登录接口，携带设备信息字段 deviceInfo；</p>
</li>
<li><p>后台先根据 该设备信息参数 去数据库查询用户名是否存在；</p>
<p>不存在则往用户表里新增一条记录；存在则进行后续业务操作。</p>
</li>
</ol>
<p>代码示意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectBykey(deviceInfo);</span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行插入insert</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">// 执行业务操作</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>接口写完了，在客户端对接的过程中，发现数据库出现了一些重复记录，除了主键 id 外，其余信息完全一样。</p>
<p>查询日志发现 <strong>insert into 语句同时执行了两次，</strong>参数是一样的<strong>，但是实际上这只是一个用户。</strong></p>
<p>刚开始想法太简单，不知道是什么原因。请教了公司同事进行排查，才知道是并发问题导致的。</p>
<p>客户端并发调用登录接口，同时进入了 if 条件判断语句内部，所以插入操作执行了两次。自己用 Jmeter 测试一下确实如此。</p>
<h2 id="2-数据库层面解决"><a href="#2-数据库层面解决" class="headerlink" title="2 数据库层面解决"></a>2 数据库层面解决</h2><p>从数据库层面，为了防止数据库插入重复的数据，将 <strong>device_info</strong> 设置了唯一索引。</p>
<p>有以下几种解决方案：</p>
<h3 id="1-insert-ignore-into"><a href="#1-insert-ignore-into" class="headerlink" title="(1) insert ignore into"></a>(1) insert ignore into</h3><blockquote>
<p>如果insert into 两条 device_info 相同的数据，则会报错 <code>Duplicate entry</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( device_info，name ) <span class="keyword">VALUES</span> (<span class="string">&#x27;250&#x27;</span>，<span class="string">&#x27;Zhangsan&#x27;</span>), (<span class="string">&#x27;250&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"><span class="comment">----</span></span><br><span class="line"> Duplicate entry <span class="string">&#x27;250&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;&#x27;</span>device_info<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>insert ignore into</code>，插入数据时，会判断主键或者唯一索引是否有重复，如果有重复则不执行，也不会报错。</p>
<blockquote>
<p>例如，向数据库插入两条相同的数据，最后数据库中只会存在一条记录。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( device_info，name )<span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;251&#x27;</span>,<span class="string">&#x27;Zhangsan&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;251&#x27;</span>，<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-on-duplicate-key-update"><a href="#2-on-duplicate-key-update" class="headerlink" title="(2) on duplicate key update"></a>(2) on duplicate key update</h3><p>插入一条记录，若该数据的主键值或者 UNIQUE KEY 已经在表中存在，<strong>则执行更新操作，即UPDATE 后面的操作；</strong>  否则插入一条新的记录。</p>
<blockquote>
<p>如下sql语句，已经存在唯一索引 user_info &#x3D; 250的记录，则只会执行更新操作，不会再次插入</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> ( device_info, name )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="string">&#x27;251&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span> ) </span><br><span class="line">	<span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> name <span class="operator">=</span> <span class="string">&#x27;wangwu&#x27;</span></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>查看表，之前的记录被更新了</p>
<h3 id="3-replace-into"><a href="#3-replace-into" class="headerlink" title="(3) replace into"></a>(3) replace into</h3><p>使用 <code>REPLACE INTO</code>，如果存在主键或者 UNIQUE KEY 相同的记录，则会 <strong>删除原数据</strong> ，然后重新插入新的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE <span class="keyword">INTO</span> <span class="keyword">USER</span> ( device_info, NAME )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="string">&#x27;251&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span> )</span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="operator">&gt;</span> Affected <span class="keyword">rows</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>查看表，之前的记录删除了，同时新增一条记录。</p>
<p>在项目中暂时使用了将字段 device_info 设置为唯一索引，插入语句改为 insert ignore into 来进行处理。</p>
<p>但是如果对于上线的数据库，已经有重复的数据入库了，这个时候又没办法筛选出重复的数据，无法建立唯一索引。</p>
<p>也可以使用<code>Redis</code> 的 <code>setnx </code> 指令来实现，或者使用 Redisson 实现 Redis分布式锁，这里暂时不细说了。</p>
<h2 id="3-什么是幂等"><a href="#3-什么是幂等" class="headerlink" title="3 什么是幂等"></a>3 什么是幂等</h2><p>针对上述问题，需要保证接口的 <strong>幂等性</strong> 。</p>
<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="(1) 定义"></a>(1) 定义</h3><p>幂等性(Idempotence)。在HTTP&#x2F;1.1规范中幂等性的定义是：</p>
<blockquote>
<p>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.</p>
</blockquote>
<p>维基百科上的定义：</p>
<blockquote>
<p>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。<br>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p>
<p>用数学语言表达就是<code>f(x)=f(f(x))</code>。</p>
<p><strong>幂等函数</strong> ，或 <strong>幂等方法</strong> ，是指可以使用相同参数重复执行，并能获得相同结果的函数。</p>
</blockquote>
<p>如果一个接口满足 <strong>以相同的请求调用这个接口一次和调用这个接口多次，对系统产生的影响是相同的</strong> ，那么就说这个接口是一个幂等接口。</p>
<h3 id="2-需要幂等性的场景"><a href="#2-需要幂等性的场景" class="headerlink" title="(2) 需要幂等性的场景"></a>(2) 需要幂等性的场景</h3><p>在编程中主要操作就是 CURD，其中读取（Retrieve）操作和删除（Delete）操作是天然幂等的，受影响的就是创建（Create）、更新（Update）</p>
<p>对于业务中需要考虑幂等性的地方一般都是接口的重复请求，即同一个请求因为某些原因被多次提交。导致这个情况会有几种场景：</p>
<ul>
<li>前端重复提交：提交订单，用户快速重复点击多次，造成后端生成多个内容重复的订单。</li>
<li>接口超时重试：对于给第三方调用的接口，为了防止网络抖动或其他原因造成请求丢失，这样的接口一般都会设计成超时重试多次。</li>
<li>消息重复消费：MQ 消息中间件，消息重复消费。</li>
</ul>
<h3 id="3-幂等性的实现方式"><a href="#3-幂等性的实现方式" class="headerlink" title="(3) 幂等性的实现方式"></a>(3) 幂等性的实现方式</h3><p>对于和 web 端交互的接口，在前端防止表单重复提交，可以采用点击提交按钮后置灰、隐藏、不可点击等方式，目前做的一些管理后台系统都在这么干，虽然粗糙了点。</p>
<p>还可以采用以下几种实现方式</p>
<h4 id="数据库唯一主键"><a href="#数据库唯一主键" class="headerlink" title="数据库唯一主键"></a>数据库唯一主键</h4><p>适用于执行插入操作时的幂等性，利用数据库中主键唯一约束的特性，能保证一张表中只能存在一条带该唯一主键的记录。也就是标题 2 中提到的几种方法</p>
<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>适用于执行更新操作的接口，可以提前在对应的数据表中多添加一个字段，比如当前时间戳，充当当前数据的版本标识。</p>
<p>时间戳标识由前端到数据中查询出来，再传给执行更新操作的接口；</p>
<p>执行完更新操作后，时间戳也被更新，这样重复执行该条 SQL 语句将不生效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> table_xxx <span class="keyword">set</span> name<span class="operator">=</span> #name#, <span class="type">timestamp</span> <span class="operator">=</span> now() <span class="keyword">where</span> id<span class="operator">=</span>#id# <span class="keyword">and</span> <span class="type">timestamp</span><span class="operator">=</span>#<span class="type">timestamp</span>#</span><br></pre></td></tr></table></figure>

<h4 id="Token-机制防重"><a href="#Token-机制防重" class="headerlink" title="Token 机制防重"></a>Token 机制防重</h4><p>流程：</p>
<ol>
<li>调用方在调用接口的时候先向后端请求一个全局 <code>ID（Token）</code>，并将 <code>Token</code> 存入<code>Redis</code>中；</li>
<li>请求的时候携带这个全局 <code>ID</code> 一起请求（一般放到 <code>Headers</code> 中）；</li>
<li>后端需要对这个 <code>Token</code> 作为 <code>Key</code>，用户信息作为 <code>Value</code> 到 <code>Redis</code> 中进行键值内容校验；</li>
<li>如果 <code>Key</code> 存在且 <code>Value</code> 匹配就执行删除命令，然后正常执行后面的业务逻辑；</li>
<li>如果不存在对应的 <code>Key</code> 或 <code>Value</code> 不匹配就返回重复执行的错误信息，这样来保证幂等操作。</li>
</ol>
<p>这里可以使用 自定义注解 + 拦截器实现</p>
<h4 id="下游传递唯一序列号"><a href="#下游传递唯一序列号" class="headerlink" title="下游传递唯一序列号"></a>下游传递唯一序列号</h4><p>流程：</p>
<ol>
<li>下游服务生成分布式 <code>ID</code> 作为序列号，然后执行请求调用上游接口，并附带 **唯一序列号 **与请求的 <strong>认证凭据ID</strong> ；</li>
<li>上游服务进行安全效验，检测下游传递的参数中是否存在 <strong>序列号</strong> 和 <strong>凭据ID</strong> ；</li>
<li>上游服务到 Redis 中检测是否存在对应的 <strong>序列号</strong> 与 <strong>认证ID</strong> 组成的 <code>Key</code>，如果存在就抛出重复执行的异常信息，然后响应下游对应的错误信息；</li>
<li>如果不存在就以该 <strong>序列号</strong> 和 <strong>认证ID</strong> 组合作为 <code>Key</code>，以下游关键信息作为 <code>Value</code>，进而存储到 Redis 中，一定要设置过期时间，然后正常执行接来来的业务逻辑。</li>
</ol>
]]></content>
      <categories>
        <category>更多</category>
      </categories>
      <tags>
        <tag>幂等</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础01：一条SQL查询语句的执行过程</title>
    <url>/2021/06/20/MySQL%E5%9F%BA%E7%A1%8001%EF%BC%9A%E4%B8%80%E6%9D%A1SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>本文是学习 MySQL 的过程中的笔记记录整理。</p>
<p>学习资料：  <a href="https://time.geekbang.org/column/intro/100020801">极客时间 MySQL实战45讲-丁奇</a></p>
<p>内容包括：</p>
<ol>
<li>MySQL 数据库的基础架构：</li>
<li>SQL 查询语句的执行过程；</li>
<li>连接器、分析器、优化器、执行器、存储引擎等的作用</li>
</ol>
<h2 id="1-MySQL-基础架构"><a href="#1-MySQL-基础架构" class="headerlink" title="1 MySQL 基础架构"></a>1 MySQL 基础架构</h2><p>经典的 MySQL 的基本架构示意图：</p>
<p><img src="https://image.kongxiao.top/20210806172606.png" alt="img"></p>
<p>MySQL 可以分为 <strong>Server 层</strong> 和 <strong>存储引擎层</strong> 两部分。</p>
<ul>
<li><p><strong>Server 层</strong> ：包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>
</li>
<li><p><strong>存储引擎层</strong> ： 负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB (MySQL 5.5.5 版本开始成为了默认存储引擎) 。</p>
</li>
</ul>
<p><strong>不同的存储引擎共用一个 Server 层</strong></p>
<p>建表语句示例：使用 <code>ENGINE=InnoDB</code> 来指定存储引擎，不指定引擎类型，默认使用的就是 InnoDB</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>


<h2 id="2-连接器"><a href="#2-连接器" class="headerlink" title="2 连接器"></a>2 连接器</h2><p>连接器 负责跟客户端建立连接、获取权限、维持和管理连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动MySQLl服务</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="comment"># 连接MySQL</span></span><br><span class="line">mysql -h<span class="variable">$ip</span> -P<span class="variable">$port</span> -u<span class="variable">$user</span> -p</span><br></pre></td></tr></table></figure>

<p>如果用户名或密码不对，会报错<code>&quot;Access denied for user&quot;</code>，然后客户端程序结束执行。</p>
<p>如果用户名密码认证通过，连接器会到权限表里面查出账户所拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</p>
<p>也就是说 <strong>连接建立以后，权限就确定下来；如果发生变化，需要下次重新连接时生效。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看连接情况</span><br><span class="line"><span class="keyword">show</span> processlist</span><br></pre></td></tr></table></figure>

<p><img src="https://image.kongxiao.top/20210807092605.png" alt="image-20210807092604463"></p>
<ul>
<li>客户端如果长时间无动作，连接器会将其断开。这个时间是由参数 <code>wait_timeout</code> 控制的，默认值是 8 小时，可通过以下指令查看</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.kongxiao.top/20210807092719.png" alt="image-20210807092717997"></p>
<ul>
<li>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒：<code>Lost connection to MySQL server during query</code>，就需要重连</li>
</ul>
<p><strong>长连接与短连接：</strong></p>
<ul>
<li><p>长连接：连接成功后，如果客户端持续有请求，则一直使用同一个连接，（为了提升数据库并发性，可以建立一个数据库连接池）；长连接如果长期闲置，MySQL 会 8 小时后（默认时间）主动断开该连接；</p>
</li>
<li><p>短连接：每次执行完很少的几次查询就断开连接，下次查询再重新建立一个</p>
</li>
</ul>
<p>但是长时间使用长连接占用内存涨得会特别快， 因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p>
<p>解决方案：</p>
<ol>
<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>
<li>MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ol>
<p>可以类比 HTTP 的长连接和短连接：  <a href="https://www.cnblogs.com/gotodsp/p/6366163.html">[HTTP长连接、短连接究竟是什么？]</a></p>
<p>查看mysql最大连接数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;max_connections&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-查询缓存"><a href="#3-查询缓存" class="headerlink" title="3 查询缓存"></a>3 查询缓存</h2><p>建立连接完成后，可以开始执行 select 语句，来到第二步：查询缓存</p>
<p>MySQL 执行过的查询语句，会以 key-value 对的形式，被直接缓存在内存中，key 是查询的语句，value 是查询的结果。</p>
<p>在执行一个查询请求时，会先查询缓，如果能够直接在这个缓存中命中 key，那么就直接返回 value；否则才继续后面的执行阶段。</p>
<p>但是缓存带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。<strong>只要有对一个表的更新，这个表上所有的查询缓存都会被清空</strong>， 对于更新压力大的数据库来说，查询缓存的命中率会非常低。</p>
<p>MySQL 提供了”按需使用”的方式。 SQL_CACHE 显式指定，像下面这个语句一样：设置缓存的两个参数：</p>
<ul>
<li><p><code>query_cache_type</code> </p>
</li>
<li><p><code>query_cache_size</code></p>
</li>
</ul>
<p><strong>还可以通过 sql_cache 和 sql_no_cache 来控制某个查询语句是否需要缓存</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sql_no_cache <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> usr;</span><br><span class="line"><span class="keyword">select</span> sql_cache <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> usr;</span><br></pre></td></tr></table></figure>



<p>MySQL 8.0 版本后移除，因为这个功能不太实用！！</p>
<h2 id="4-分析器"><a href="#4-分析器" class="headerlink" title="4 分析器"></a>4 分析器</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span>；</span><br></pre></td></tr></table></figure>



<p>分析器，包括 <strong>词法分析</strong> 和 <strong>语法分析</strong></p>
<ul>
<li>词法分析：识别出里面的字符串分别是什么，代表什么。MySQL 从输入的 “select” 这个关键字识别出来，这是一个查询语句。把字符串 “T” 识别成“表名 T”，把字符串 “id” 识别成 “列 id” 。</li>
<li>语法分析：根据词法分析的结果，语法分析器会根据语法规则，判断输入的这个 SQL 语句是否满足 MySQL 语法。如果不对会报 <code>“You have an error in your SQL syntax”</code></li>
</ul>
<h2 id="5-优化器"><a href="#5-优化器" class="headerlink" title="5 优化器"></a>5 优化器</h2><p>一条 SQL 语句可能有不同的执行逻辑（或者顺执行顺序），而优化器就是选择最优的执行顺序。</p>
<p>在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p>
<p>但是 优化器判断的有的时候未必是正确的！后续再详细学习下</p>
<p>可以使用 explain 指令来查看 SQL 执行计划。</p>
<h2 id="6-执行器"><a href="#6-执行器" class="headerlink" title="6 执行器"></a>6 执行器</h2><p>MySQL 通过分析器知道了要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句</p>
<p><strong>开始执行的时候，要先判断一下对这个表 T 有没有执行查询的权限</strong>，如果没有，就会返回没有权限的错误。 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1142</span> (<span class="number">42000</span>): <span class="keyword">SELECT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">&#x27;b&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">&#x27;T&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p>
<p><strong>为什么对权限的检查不在优化器之前做？</strong>因为有些时候，SQL 语句要操作的表不只是 SQL字面上那些。比如有个触发器，得在执行器阶段（过程中）才能确定，优化器阶段前是无能为力的</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 五大数据结构及常用指令</title>
    <url>/2021/06/20/Redis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>官网：<a href="https://redis.io/">https://redis.io/</a>        <a href="http://www.redis.cn/">http://www.redis.cn/</a></p>
<p>Redis 命令参考：  <a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a> ， <a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p>
<p>Redis（Remote Dictionary Server )，即远程字典服务，是一个使用 C 语言开发的数据库。</p>
<p><strong>Redis 的数据是存在内存中的</strong></p>
<p><strong>Redis 除了做缓存之外，也经常用来做分布式锁，甚至是消息队列。</strong></p>
<p><strong>Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。</strong></p>
<h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><ul>
<li>string</li>
<li>list</li>
<li>hash</li>
<li>set</li>
<li>sorted set</li>
</ul>
<h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><h3 id="Key（键）"><a href="#Key（键）" class="headerlink" title="Key（键）"></a>Key（键）</h3><ol>
<li><strong>检查&#x2F; 删除 &#x2F;移动 key：</strong></li>
</ol>
<p><code>EXISTS key</code>   ：若 key 存在，返回 1 ，否则返回 0 ；<br><code>DEL key [key ...]</code>  ： 删除给定的一个或多个 key，不存在的 key 会被忽略，返回 被删除 key 的数量；<br><code>MOVE key db</code>  ：移动到给定的数据库 db 当中，成功返回 1 ，失败则返回 0 。如果源数据库和目标数据库有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果<br><code>TYPE key</code>  ： 返回 key 所储存的值的类型<br><code>RENAME key newkey</code>  ： 将 key 改名为 newkey；当  key 不存在时，返回一个错误；当 newkey 已经存在时， RENAME 命令将覆盖旧值</p>
<ol start="2">
<li><strong>生存时间：</strong></li>
</ol>
<p><code>TTL key</code>  ：  TTL, time to live，以秒为单位<br><code>PTTL key</code> ：以毫秒为单位</p>
<ul>
<li>当 key 不存在时，返回 -2 ；</li>
<li>当 key 存在但没有设置剩余生存时间时，返回 -1 ；</li>
<li>否则，以秒为单位，返回 key 的剩余生存时间</li>
</ul>
<p><code>EXPIRE key seconds</code>  ： 设置生存时间，单位为 s，设置成功返回 1，<br><code>PEXPIRE key milliseconds</code>  ： 设置生存时间，单位为 ms</p>
<p><code>EXPIREAT key timestamp</code>  ： 设置生存时间，参数为 UNIX 时间戳<br><code>PEXPIREAT key milliseconds-timestamp</code>  ： 设置生存时间，以毫秒为单位的 UNIX 时间戳</p>
<p><code>PERSIST key timestamp</code>  ： 移除给定 key 的生存时间，即设置为永久；当生存时间移除成功时，返回 1 ；如果 key 不存在或 key 没有设置生存时间，返回 0 </p>
<ol start="3">
<li><strong>查找&#x2F;扫描：</strong></li>
</ol>
<p><code>KEYS pattern</code>  ：查找所有符合给定模式 pattern 的 key </p>
<ul>
<li>KEYS * 匹配数据库中所有 key 。</li>
<li>KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</li>
<li>KEYS h*llo 匹配 hllo 和 heeeeello 等。</li>
<li>KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo</li>
</ul>
<p><code>SCAN cursor [MATCH pattern] [COUNT count]</code>  ：查找所有符合给定模式 pattern 的 key </p>
<h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><ol>
<li><strong>基本操作：</strong></li>
</ol>
<p><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code>  ： 设置 key-value 类型的值；key 已经存在则覆写旧值，无视类型，这个键原有的 TTL 也将被清除。支持以下参数</p>
<ul>
<li>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value </li>
<li>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value </li>
<li>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</li>
<li>XX ：只在键已经存在时，才对键进行设置操作。</li>
</ul>
<p><code>GET key</code>  ： 根据 key 获得对于的 value，如果 key 不存在那么返回特殊值 nil </p>
<p><code>STRLEN key</code>  ： 返回 key 所储存的字符串值的长度<br><code>SETRANGE key offset value</code>  ： 从偏移量 offset 开始设置 key 所保存的 value，返回被 SETRANGE 修改之后字符串的长度；不存在的 key 当作空白字符串处理，空白处被”\x00”填充</p>
<p><code>GETRANGE key start end</code>  ：返回截取后的字符串， 包括 start 和 end 在内；负数偏移量表示从字符串最后开始计数，-1 表示最后一个字符， -2 表示倒数第二个</p>
<p><code>SETEX key seconds value</code>  ： 将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)</p>
<p><code>SETNX key value</code>  ：即 【SET if Not eXists】。 当且仅当 key 不存在时，将 key 的值设为 value ；若给定的 key 已经存在，则不做任何动作。设置成功，返回 1 ；设置失败，返回 0 。</p>
<ol start="2">
<li><strong>批量设置：</strong></li>
</ol>
<p><code>MSET key value [key value ...]</code>  ： 同时设置一个或多个 key-value 对；是一个原子性(atomic)操作，所有给定 key 都会在同一时间内被设置<br><code>MGET key [key ...]</code>  ：返回所有(一个或多个)给定 key 的值。</p>
<ol start="3">
<li><strong>计数器：</strong></li>
</ol>
<p><code>DECR key</code>  ： 将 key 中储存的数字值增一；如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作<br><code>INCRBY key</code>  ： 将 key 所储存的值加上增量 increment 。<br><code>INCR key</code>  ： 将 key 中储存的数字值减一；如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作<br><code>INCRBY key</code>  ： 将 key 所储存的值减去减量 decrement </p>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p><code>RPUSH key value [value ...]</code>  ： 右边插入；返回执行 RPUSH 操作后，表的长度<br><code>LPOP key</code>  ： 移除并返回列表 key 最左边的元素<br><code>LPUSH key value [value ...]</code>  ： 左边插入；返回执行 LRPUSH 操作后，表的长度<br><code>RPOP key</code>  ： 移除并返回列表 key 最右边的元素</p>
<p><img src="https://image.kongxiao.top/20210922175322.png" alt="redis-list"></p>
<p><code>LLEN key</code>  ： 返回列表 key 的长度，如果 key 不存在，则 key 被解释为一个空列表，返回 0，<br>如果 key 不是列表类型，返回一个错误<br><code>LRANGE key start stop</code>  ： 返回列表 key 中指定区间内的元素，-1表示倒数第一<br><code>LINDEX key index</code>  ： 返回列表 key 中，下标为 index 的元素</p>
<p><code>LINSERT key BEFORE|AFTER pivot value</code>  ： 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</p>
<ul>
<li><p>当 pivot 不存在于列表 key 时，不执行任何操作；</p>
</li>
<li><p>当 key 不存在时， key 被视为空列表，不执行任何操作；</p>
</li>
<li><p>如果 key 不是列表类型，返回一个错误；</p>
</li>
<li><p>如果命令执行成功，返回插入操作完成之后，列表的长度；</p>
</li>
<li><p>如果没有找到 pivot ，返回 -1 ；</p>
</li>
<li><p>如果 key 不存在或为空列表，返回 0</p>
</li>
</ul>
<p><code>LREM key count value</code>：根据参数 count 的值，移除列表中与参数 value 相等的元素。返回被移除元素的数量</p>
<ul>
<li><p>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count ；</p>
</li>
<li><p>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值；</p>
</li>
<li><p>count &#x3D; 0 : 移除表中所有与 value 相等的值</p>
</li>
</ul>
<h3 id="Hash（哈希表）"><a href="#Hash（哈希表）" class="headerlink" title="Hash（哈希表）"></a>Hash（哈希表）</h3><p><code>HSET key filed value [filed value ...]</code>：设置 key 中的域 field 的值设为 value<br><code>HGET key filed</code>：返回指定 key 中给定域 field 的值</p>
<p><code>HLEN key</code>：返回指定 key 中域的数量</p>
<p><code>HGETALL key</code>：返回指定key 所有的域和值</p>
<p><code>HEXISTS key filed</code>：查看指定key，指定域 field 是否存在</p>
<p><code>HDEL key filed[field ...]</code>：删除指定 key 中，一个或多个给定的 field </p>
<p><code>HKEYS key</code>：返回指定key 中，所有的 field</p>
<p><code>HVALS key</code>：返回指定key，所有的 field 的 value</p>
<p><code>HSETNX key field value</code>：当且仅当域 field 不存在，将指定 key 中的域 field 的值设置为 value </p>
<p><code>HINCRBY key field increment</code>：为指定 key 中的域 field 的值加上增量 increment </p>
<h3 id="Set-（集合）"><a href="#Set-（集合）" class="headerlink" title="Set （集合）"></a>Set （集合）</h3><p><code>SADD key member [member ...]</code> ：添加元素</p>
<p><code>SMEMBERS key</code>：查看所有元素<br><code>SISMEMBERS key member</code>：判断 member 元素是否是集合 key 的成员</p>
<p><code>SCARD key</code>：查看元素个数</p>
<p><code>SREM key member [member ...]</code>：移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略</p>
<p><code>SPOP key</code>：移除并返回集合中的一个随机元素</p>
<p><code>SRANDMEMBER key [count]</code>：返回集合中的一个随机元素</p>
<ul>
<li>如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素<strong>各不相同</strong>。如果 count 大于等于集合基数，那么返回整个集合</li>
<li>如果 count 为负数，那么命令返回一个数组，数组中的元素<strong>可能会重复出现多次</strong>，而数组的长度为 count 的绝对值</li>
</ul>
<p><code>SMOVE source destination member</code>：将 member 元素从 source 集合移动到 destination 集合</p>
<p><strong>数学集合类：</strong></p>
<p><code>SDIFF key [key ...]</code>：返回所有给定集合之间的差集<br><code>SINNER key [key ...]</code>：返回所有给定集合之间的交集<br><code>SUNION key [key ...]</code>：返回所有给定集合之间的并集</p>
<p><code>SDIFFSTORE destination  key [key ...]</code>：返回所有给定集合之间的差集，将结果保存到 destination 集合<br><code>SINNERSTORE destination key [key ...]</code>：返回所有给定集合之间的交集，将结果保存到 destination 集合<br><code>SUNIONSTORE destination key [key ...]</code>：返回所有给定集合之间的并集，将结果保存到 destination 集合</p>
<h3 id="ZSet（Sorted-Set-有序集合）"><a href="#ZSet（Sorted-Set-有序集合）" class="headerlink" title="ZSet（Sorted Set 有序集合）"></a>ZSet（Sorted Set 有序集合）</h3><p>在 SET 基础上，加上一个 scroe 值</p>
<p><code>ZADD key score member [[score member] [score member] ...]</code>：将一个或多个 member 元素及其 score 值加入到有序集 key 当中</p>
<p><code>ZRANGE key start stop [WITHSCORES]</code>：返回有序集 key 中，指定区间内的成员，其中成员的位置按 score 值递增(从小到大)来排序</p>
<p><code>ZREVRANGE key start stop [WITHSCORES]</code>：同上，逆序</p>
<p><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code>：返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列</p>
<p><code>ZREVRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code>：同上，逆序</p>
<p><code>ZSCORE key member</code>：返回有序集 key 中，成员 member 的 score 值</p>
<p><code>ZRANK key member</code>：返回有序集 key 中成员 member 的排名</p>
<p><code>ZCARD key</code>：查看元素个数</p>
<p><code>ZCOUNT key min max</code>：返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量</p>
<p><code>ZREM key member [member ...]</code>：移除有序集 key 中的一个或多个成员</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis (一) - 原生 JDBC</title>
    <url>/2021/05/31/MyBatis(%E4%B8%80)-%E5%8E%9F%E7%94%9FJDBC/</url>
    <content><![CDATA[<p>MyBatis 学习笔记 (一)， 内容包括：</p>
<ol>
<li>原生 JDBC 编程步骤；</li>
<li>JDBC 关键对象</li>
</ol>
<h2 id="1-JDBC-简介"><a href="#1-JDBC-简介" class="headerlink" title="1 JDBC 简介"></a>1 JDBC 简介</h2><blockquote>
<p>JDBC (Java Database Connectivity) API，即 Java 数据库编程接口。</p>
</blockquote>
<p>是一组标准的Java语言中的接口和类，使用这些接口和类，Java 客户端程序可以访问各种不同类型的数据库。比如建立数据库连接、执行 SQL 语句进行数据的存取操作。</p>
<p>JDBC 库中所包含的 API 任务通常与数据库使用：</p>
<ul>
<li>连接到数据库</li>
<li>创建 SQL 或 MySQL 语句</li>
<li>在数据库中执行 SQL 或 MySQL 查询</li>
<li>查看和修改记录</li>
</ul>
<h2 id="2-JDBC-编程步骤"><a href="#2-JDBC-编程步骤" class="headerlink" title="2 JDBC 编程步骤"></a>2 JDBC 编程步骤</h2><ol>
<li>加载数据库驱动 <code>Class.forName</code></li>
<li>创建并获取数据库链接 <code>DriverManage.getConnection</code></li>
<li>创建 jdbc statement对象 <code>connection.createStatement</code></li>
<li>设置 SQL 语句</li>
<li>设置 SQL 语句中的参数 (使用 preparedStatement )</li>
<li>通过 statement 执行 SQL 并获取结果</li>
<li>对 SQL 执行结果进行解析处理</li>
<li>释放资源 (resultSet、preparedstatement、connection)</li>
</ol>
<h2 id="3-几个关键对象"><a href="#3-几个关键对象" class="headerlink" title="3 几个关键对象"></a>3 几个关键对象</h2><h3 id="（1）Connection"><a href="#（1）Connection" class="headerlink" title="（1）Connection"></a>（1）Connection</h3><p>数据库的链接 Connection，创建方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,user,pass); </span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>createStatement( )</td>
<td>执行SQL的对象</td>
</tr>
<tr>
<td>prepareStatement(sql)</td>
<td>执行预编译的SQL</td>
</tr>
<tr>
<td>prepaceCall(sql)</td>
<td>执行存储过程</td>
</tr>
<tr>
<td>setAutoCommit(boolean autoCommit)</td>
<td>设置事务是否自动提交，默认是</td>
</tr>
<tr>
<td>commit()</td>
<td>提交事务</td>
</tr>
<tr>
<td>rollback()</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<h3 id="（2）Statement"><a href="#（2）Statement" class="headerlink" title="（2）Statement"></a>（2）Statement</h3><p>Statement，用于向数据库发送SQL语句，创建方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>executeQuery(String sql)</td>
<td>向数据发送查询语句</td>
</tr>
<tr>
<td>executeUpdate(String sql)</td>
<td>向数据库发送 insert、update 或 delete 语句</td>
</tr>
<tr>
<td>execute(String sql)</td>
<td>向数据库发送任意 sql 语句</td>
</tr>
<tr>
<td>addBatch(String sql)</td>
<td>把多条 sql 语句放到一个批处理中</td>
</tr>
<tr>
<td>executeBatch()</td>
<td>向数据库发送一批 sql 语句执行</td>
</tr>
</tbody></table>
<h3 id="（3）PreparedStatement"><a href="#（3）PreparedStatement" class="headerlink" title="（3）PreparedStatement"></a>（3）PreparedStatement</h3><p>PreparedStatement，可执行预编译的 SQL 语句，避免 SQL 注入的问题，创建方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>setString(int parameterIndex,String x)</td>
<td>设置参数，其他数据类型同理，setInt、setLong</td>
</tr>
</tbody></table>
<h3 id="（4）ResultSet"><a href="#（4）ResultSet" class="headerlink" title="（4）ResultSet"></a>（4）ResultSet</h3><p>ResultSet，结果集对象。</p>
<p>Resultset 封装执行结果时，维护了一个指向表格数据行的游标，初始游标在第一行之前，调用 ResultSet.next() 方法，可以使游标指向具体的数据行，进行调用方法获取该行的数据。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>next()</td>
<td>移动到下一行</td>
</tr>
<tr>
<td>previous()</td>
<td>移动到前一行</td>
</tr>
<tr>
<td>absolute(int row)</td>
<td>移动到指定行</td>
</tr>
<tr>
<td>beforeFirst()</td>
<td>移动resultSet的最前面</td>
</tr>
<tr>
<td>afterLast()</td>
<td>移动到resultSet的最后面</td>
</tr>
<tr>
<td>getString(int index)</td>
<td>获取指定类型的数据，其余数据类型同理</td>
</tr>
<tr>
<td>getString(String columnName)</td>
<td>获取指定类型的数据</td>
</tr>
</tbody></table>
<h2 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4 代码示例"></a>4 代码示例</h2><p>数据库环境：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo`.`user_info`(`id`, `user_name`, `age`, `create_time`, `update_time`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2021-05-31 15:24:55&#x27;</span>, <span class="string">&#x27;2021-05-31 15:24:58&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo`.`user_info`(`id`, `user_name`, `age`, `create_time`, `update_time`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;2021-05-31 15:25:08&#x27;</span>, <span class="string">&#x27;2021-05-31 15:25:11&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiao.jdbc.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KongXiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取属性文件，获取jdbc信息</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            readConfig();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据库配置文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readConfig</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接对象Connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册JDBC驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取数据库连接</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭结果集、数据库操作对象、数据库连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection        数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preparedStatement 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet         结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preparedStatement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KongXiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">JDBCQueryTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user_info where user_name = ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">// 通过字段检索</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;user_name&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出数据</span></span><br><span class="line">            System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">            System.out.print(<span class="string">&quot;, 姓名: &quot;</span> + userName);</span><br><span class="line">            System.out.print(<span class="string">&quot;, 年龄: &quot;</span> + age);</span><br><span class="line">            System.out.print(<span class="string">&quot;, 创建时间: &quot;</span> + createTime);</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.release(connection, preparedStatement, resultSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>01 SpringBoot 入门案例 HelloWorld</title>
    <url>/2021/07/15/01demo-helloworld/</url>
    <content><![CDATA[<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>可以通过 <a href="https://start.spring.io/">https://start.spring.io/</a> 来初始化基础项目</p>
<p><img src="https://image.kongxiao.top/20210928164346.png" alt="image-20210928164344879"></p>
<p>也可以使用 IDEA 中的 Spring Initializr 来快速搭建项目</p>
<p><img src="https://image.kongxiao.top/20210928170133.png" alt="image-20210928170132959"></p>
<p>Spring Boot的基础结构共三个文件</p>
<ul>
<li><code>src/main/java</code>下的程序入口</li>
<li><code>src/main/resources</code>下的配置文件：<code>application.properties</code></li>
<li><code>src/test/</code>下的测试入口</li>
</ul>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><ul>
<li><code>spring-boot-starter</code>：核心模块，包括自动配置支持、日志和 YAML</li>
<li><code>spring-boot-starter-test</code>：测试模块，包括 JUnit、Hamcrest、Mockito</li>
<li><code>lombok</code></li>
<li><code>hutool-all</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写-HelloWorld-服务"><a href="#编写-HelloWorld-服务" class="headerlink" title="编写 HelloWorld 服务"></a>编写 HelloWorld 服务</h2><p>启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">        <span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> context.getBean(Environment.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">port</span> <span class="operator">=</span> env.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        log.info(<span class="string">&quot;\n---------------------------------------------------------\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\tApplication is running! Access address: http://&#123;&#125;:&#123;&#125;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n---------------------------------------------------------\n&quot;</span>, ip, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(required = false, name = &quot;userName&quot;)</span> String userName)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(StrUtil.isBlank(userName)) &#123;</span><br><span class="line">           userName = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;Hello,&#123;&#125;!&quot;</span>, userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> <span class="title class_">HelloController</span>()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/hello&quot;</span>).param(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">&quot;Hello,test!&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>02 SpringBoot 配置文件</title>
    <url>/2021/07/18/02demo-properties/</url>
    <content><![CDATA[<p>SpringBoot 默认使用两种全局的配置文件，全局配置文件可以对一些默认配置进行修改。</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">zhangsan@dev</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">lists:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">developer:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kongxiao@dev</span></span><br><span class="line">  <span class="attr">phone-number:</span> <span class="string">xxxxxx@dev</span></span><br></pre></td></tr></table></figure>

<p>定义好配置属性对象后，有以下两种方式进行配置注入</p>
<h2 id="方式一：-Value-注入属性"><a href="#方式一：-Value-注入属性" class="headerlink" title="方式一：@Value 注入属性"></a>方式一：@Value 注入属性</h2><ul>
<li><p>Spring 支持 <code>@value</code> 注解的方式来读取配置文件中的配置值；</p>
</li>
<li><p>添加 <code>@Component</code> 注解将配置类注入 Spring 容器中。</p>
</li>
<li><p>支持 List、Map 等绑定。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeveloperProperty</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过配置文件注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;developer.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;developer.phone-number&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方式二：-ConfigurationProperties"><a href="#方式二：-ConfigurationProperties" class="headerlink" title="方式二：@ConfigurationProperties"></a>方式二：@ConfigurationProperties</h2><p>步骤：</p>
<ol>
<li>定义配置类；</li>
<li>使用 <code>@ConfigurationProperties</code> 注解也可以获取配置文件的值：</li>
</ol>
<ul>
<li><code>prefix</code> 前缀定义了哪些外部属性将绑定到类的字段上；</li>
<li>类的属性名称必须与外部属性的名称匹配；</li>
<li>可以简单地用一个值初始化一个字段来定义一个默认值； </li>
<li>类的字段必须有公共 setter 方法</li>
<li>Spring Boot 具备宽松绑定规则，参考 <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding">https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoProperty</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 <code>@EnableConfigurationProperties(&#123;UserInfoProperty.class&#125;)</code>启用该配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(UserInfoProperty.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DeveloperProperty developerProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserInfoProperty userInfoProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PropertiesController</span><span class="params">(DeveloperProperty developerProperty, UserInfoProperty userInfoProperty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.developerProperty = developerProperty;</span><br><span class="line">        <span class="built_in">this</span>.userInfoProperty = userInfoProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/property&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Dict.create().set(<span class="string">&quot;userInfoProperty&quot;</span>, userInfoProperty).set(<span class="string">&quot;developerProperty&quot;</span>, developerProperty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>也可以直接在配置类上添加 <code>@Component</code> 注解将配置类注入 Spring 容器中使用</p>
<p>如果添加了如下依赖，可以从@ConfigurationProperties 注释的项生成的配置元数据文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image.kongxiao.top/20210929114213.png" alt="image-20210929114212357"></p>
<h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在Spring Boot中多环境配置文件名需要满足<code>application-&#123;profile&#125;.properties</code>的格式，其中<code>&#123;profile&#125;</code>对应环境标识，比如：</p>
<ul>
<li><code>application-dev.properties</code>：开发环境</li>
<li><code>application-test.properties</code>：测试环境</li>
<li><code>application-prod.properties</code>：生产环境</li>
</ul>
<p>需要在<code>application.properties</code>文件中通过<code>spring.profiles.active</code>属性来设置<code>&#123;profile&#125;</code>的值，决定哪个具体的配置文件会被加载，其值对应</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

<p>也可以通过命令行的方式：</p>
<p><code>java -jar xxx.jar --spring.profiles.active=dev</code></p>
<p><img src="https://image.kongxiao.top/20210929105847.png" alt="image-20210929105846792"></p>
<h2 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h2><h3 id="参数间的引用"><a href="#参数间的引用" class="headerlink" title="参数间的引用"></a>参数间的引用</h3><p>在<code>application.properties</code>中的各个参数之间也可以直接引用，通过 <code>$&#123;xxx&#125;</code> 即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">blog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Spring</span> <span class="string">Boot</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">配置文件</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">$&#123;blog.name&#125;的标题是$&#123;blog.title&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用随机数"><a href="#使用随机数" class="headerlink" title="使用随机数"></a>使用随机数</h3><p>在一些情况下，有些参数希望它不是一个固定的值，比如密钥、服务端口等。Spring Boot的属性配置文件中可以通过<code>$&#123;random&#125;</code>来产生 int 值、long 值或者 string 字符串，来支持属性的随机值。</p>
<ul>
<li>随机字符串：  <code>$&#123;random.value&#125;</code></li>
<li>随机 int：  <code>$&#123;random.int&#125;</code></li>
<li>随机 long：  <code>$&#123;random.value&#125;</code></li>
<li>10以内的随机数：  <code>&#123;random.int(10)&#125;</code></li>
<li>10-20的随机数：  <code>$&#123;random.int[10,20]&#125;</code></li>
</ul>
<h3 id="定制启动-banner"><a href="#定制启动-banner" class="headerlink" title="定制启动 banner"></a>定制启动 banner</h3><p>在resourece 目录下新建 banner.txt，即可更改项目启动时的 banner</p>
<p><img src="https://image.kongxiao.top/20210929111523.png" alt="image-20210929111522875"></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">   _</span><br><span class="line">  | |__   __ __</span><br><span class="line">  | / /   \ \ /</span><br><span class="line">  |_\_\   /_\_\</span><br><span class="line">_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;|</span><br><span class="line">&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>yml</tag>
      </tags>
  </entry>
  <entry>
    <title>03 SpringBoot JSR-303 接口参数校验</title>
    <url>/2021/07/23/03demo-validation/</url>
    <content><![CDATA[<p>JSR 是 Java Specification Requests 的缩写，意思是 Java 规范提案。</p>
<p>JSR-303 是 JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现</p>
<h2 id="1-问题引出"><a href="#1-问题引出" class="headerlink" title="1 问题引出"></a>1 问题引出</h2><p>先来看看平时写的代码存在的一些问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">addUser</span><span class="params">(UserInfo userInfo )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(userInfo .getAge() == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;年龄不能为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(userInfo .getAge() &gt; <span class="number">120</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;年龄不能超过120&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(userInfo .getName().isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户名不能为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略一堆参数校验...</span></span><br><span class="line">    <span class="comment">//开始业务逻辑...</span></span><br><span class="line">    <span class="keyword">return</span> processSuccess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>正常的业务逻辑还没有开始，参数校验代码就写了一堆，而且每个接口中都要写一些类似的代码，既不优雅，又不专业。</p>
</blockquote>
<p>所以我们要做的是：</p>
<ul>
<li>消灭不优雅的代码，使用 Spring 框架封装的校验组件：<code>validation</code></li>
<li>对于请求参数格式错误造成的异常进行处理，即使传参错误，程序也能按预期处理响应，减少无必要的告警。</li>
</ul>
<p><code>validation</code> 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Spring Boot 2.1版本中，该依然其实已经包含在了spring-boot-starter-web依赖中，并不需要额外引入</p>
<h2 id="2-几个案例"><a href="#2-几个案例" class="headerlink" title="2 几个案例"></a>2 几个案例</h2><p>先定义好通用返回消息实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">(Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="type">CommonResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>();</span><br><span class="line">        r.setCode(<span class="number">200</span>);</span><br><span class="line">        r.setData(data);</span><br><span class="line">        r.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">error</span><span class="params">( String msg)</span> &#123;</span><br><span class="line">        <span class="type">CommonResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>();</span><br><span class="line">        r.setCode(-<span class="number">1</span>);</span><br><span class="line">        r.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面总结了需要进行参数校验的几种情况：</p>
<h3 id="2-1-Query-参数缺失"><a href="#2-1-Query-参数缺失" class="headerlink" title="2.1 Query 参数缺失"></a>2.1 Query 参数缺失</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于如上接口，请求参数添加注解：<code>@RequestParam(&quot;age&quot;)</code></p>
<p>如果调用接口时，未携带参数age，例如 <a href="http://127.0.0.1:8080/test%EF%BC%8C%E5%88%99%E4%BC%9A%E8%BF%94%E5%9B%9E">http://127.0.0.1:8080/test，则会返回</a> 400 异常页面<strong>MissingServletRequestParameterException：Required Integer parameter ‘age’ is not present</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-01T08:24:14.372+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Required Integer parameter &#x27;age&#x27; is not present&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>为返回友好提示，添加一个 <strong>全局异常处理类</strong> ，针对  <code>MissingServletRequestParameterException</code> 异常进行处理，以自定义返回消息进行返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求参数缺失异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        log.warn(<span class="string">&quot;异常：MissingServletRequestParameterException，原因: &#123;&#125;,请求方式: &#123;&#125;,请求url: &#123;&#125;,请求参数: &#123;&#125;&quot;</span>,</span><br><span class="line">                e.getMessage(),request.getMethod(), request.getRequestURI(),request.getQueryString());</span><br><span class="line">        <span class="keyword">return</span> CommonResult.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次请求返回消息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Required Integer parameter &#x27;age&#x27; is not present&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-参数类型不正确"><a href="#2-2-参数类型不正确" class="headerlink" title="2.2 参数类型不正确"></a>2.2 参数类型不正确</h3><p>访问链接：<a href="http://127.0.0.1:8080/test?age=ddd">http://127.0.0.1:8080/test?age=ddd</a></p>
<p>对于 Integer 类型的请求参数 age ，如果参数格式不对，如携带一个字符串进行请求，会返回 400 异常页面 <strong>MethodArgumentTypeMismatchException：Failed to convert value of type ‘java.lang.String’ to required type ‘java.lang.Integer’</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-01T08:25:01.197+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Failed to convert value of type &#x27;java.lang.String&#x27; to required type &#x27;java.lang.Integer&#x27;; nested exception is java.lang.NumberFormatException: For input string: \&quot;ddd\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>同样的，在 <strong>全局异常处理类中添加处理 MethodArgumentTypeMismatchException的方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(MethodArgumentTypeMismatchException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">mismatchErrorHandler</span><span class="params">(MethodArgumentTypeMismatchException e, HttpServletRequest request)</span> &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;异常：MissingServletRequestParameterException，原因: &#123;&#125;,请求方式: &#123;&#125;,请求url: &#123;&#125;,请求参数: &#123;&#125;&quot;</span>,</span><br><span class="line">            e.getMessage(),request.getMethod(), request.getRequestURI(),request.getQueryString());</span><br><span class="line">    <span class="keyword">return</span> CommonResult.error( e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-处理-query-参数校验"><a href="#2-3-处理-query-参数校验" class="headerlink" title="2.3 处理 query 参数校验"></a>2.3 处理 query 参数校验</h3><p>校验 <code>@RequestParam</code> 类型的请求参数：</p>
<ul>
<li><p>首先需要添加 <code>@Validated</code> 注解来启用控制器中的 <code>@RequestParams</code> 的验证。</p>
</li>
<li><p>在请求参数中增加 <strong>校验规则注解</strong></p>
</li>
</ul>
<p>任何与这些条件不匹配的请求都将返回 HTTP 状态 500 ，并显示默认错误消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">test02</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="meta">@NotNull(message = &quot;age不能为空&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@RequestParam</code> 上 validate 失败后抛出的异常是：<strong>ConstraintViolationException</strong></p>
<p>在全局异常处理类中新增处理 ConstraintViolationException 的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求参数格式错误 <span class="doctag">@RequestParam</span>上validate失败后抛出的异常是javax.validation.ConstraintViolationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">constraintViolationExceptionHandler</span><span class="params">(ConstraintViolationException e)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getConstraintViolations().stream().map(ConstraintViolation::getMessage).collect(Collectors.joining(<span class="string">&quot;;&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> CommonResult.error(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <a href="http://127.0.0.1:8080/test02?age=">http://127.0.0.1:8080/test02?age=</a></p>
<p>在调用接口时，如果 age 为 null ，则会返回注解 @NotNull(message &#x3D; “age不能为空”) 中的自定义的 message提示信息。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age不能为空&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p> 如果 GET 请求的接口的请求参数用一个实体类接收，则需要将 <strong>校验规则注解标注在实体类对于的成员变量上</strong>，此时校验不通过抛出的异常是  **BindException **</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;userName不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Max(value = 10, message = &quot;age最大值为10&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;age最小值为1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口，在实体类参数前加上注解 <code>@Valid</code> 或者 <code>@Validated</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">test03</span><span class="params">(<span class="meta">@Valid</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问  <a href="http://127.0.0.1/test03?userName=">http://127.0.0.1/test03?userName=</a> 直接返回了异常信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-01T08:26:53.978+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;NotNull.userInfo.age&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotNull.age&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotNull.java.lang.Integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotNull&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;userInfo.age&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;age&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不能为null&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;userInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NotNull&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object=&#x27;userInfo&#x27;. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test03&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-处理-Body-请求体验"><a href="#2-4-处理-Body-请求体验" class="headerlink" title="2.4 处理 Body 请求体验"></a>2.4 处理 Body 请求体验</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">test04</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于携带 RequestBody 类型的请求，</p>
<p>@RequestBody 上 validate 失败后抛出的异常是 <strong>MethodArgumentNotValidException</strong> 异常。</p>
<p>在全局异常处理类中添加上对于此类型异常的处理即可。</p>
<h2 id="3-内置的校验注解"><a href="#3-内置的校验注解" class="headerlink" title="3 内置的校验注解"></a>3 内置的校验注解</h2><p>内置的校验注解有很多，罗列如下：</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>校验功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@AssertFalse</td>
<td>必须是false</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>必须是true</td>
</tr>
<tr>
<td>@DecimalMax</td>
<td>小于等于给定的值</td>
</tr>
<tr>
<td>@DecimalMin</td>
<td>大于等于给定的值</td>
</tr>
<tr>
<td>@Digits</td>
<td>可设定最大整数位数和最大小数位数</td>
</tr>
<tr>
<td>@Email</td>
<td>校验是否符合Email格式</td>
</tr>
<tr>
<td>@Future</td>
<td>必须是将来的时间</td>
</tr>
<tr>
<td>@FutureOrPresent</td>
<td>当前或将来时间</td>
</tr>
<tr>
<td>@Max</td>
<td>最大值</td>
</tr>
<tr>
<td>@Min</td>
<td>最小值</td>
</tr>
<tr>
<td>@Negative</td>
<td>负数（不包括0）</td>
</tr>
<tr>
<td>@NegativeOrZero</td>
<td>负数或0</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>不为null并且包含至少一个非空白字符</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>不为null并且不为空</td>
</tr>
<tr>
<td>@NotNull</td>
<td>不为null</td>
</tr>
<tr>
<td>@Null</td>
<td>为null</td>
</tr>
<tr>
<td>@Past</td>
<td>必须是过去的时间</td>
</tr>
<tr>
<td>@PastOrPresent</td>
<td>必须是过去的时间，包含现在</td>
</tr>
<tr>
<td>@PositiveOrZero</td>
<td>正数或0</td>
</tr>
<tr>
<td>@Size</td>
<td>校验容器的元素个数</td>
</tr>
</tbody></table>
<h2 id="4-分组校验"><a href="#4-分组校验" class="headerlink" title="4 分组校验"></a>4 分组校验</h2><p>直接定义在JavaBean 中的校验注解，在不同场景下，每个 Controller 方法对该 JavaBean 都具有不同的校验规则。</p>
<p>比如：新注册用户还没起名字，允许<code>name</code>字段为空，但是不允许将名字更新为空字符。</p>
<p>此时需要用到 <strong>分组校验，将不同的校验规则分给不同的组，在使用时，指定不同的校验规则</strong></p>
<p>步骤：</p>
<ol>
<li>定义一个分组接口；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//校验分组 Update</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span>  <span class="title class_">Update</span>&#123; </span><br><span class="line">    <span class="comment">//接口中不需要定义任何方法，仅对不同的校验规则进行分组 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在校验注解上添加 <code>groups</code> 属性指定分组；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;userName不能为空&quot;,groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Max(value = 10, message = &quot;age最大值为10&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;age最小值为1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>Controller</code> 方法的 <code>@Validated</code> 注解中添加一个 value 值，该 value 值指定校验规则所在的接口；此时则只会校验指定分组下的字段</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">test05</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(value = Update.class)</span> UserInfo userInfo)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>自定义的分组接口可以继承<code>Default</code>接口。校验注解和<code>@validated</code>默认都属于<code>Default.class</code>分组。</p>
<h2 id="5-嵌套属性校验"><a href="#5-嵌套属性校验" class="headerlink" title="5 嵌套属性校验"></a>5 嵌套属性校验</h2><p>如果 UserInfo 类中增加一个 OrderInfo 类的属性，而 OrderInfo中的属性也需要校验，就用到递归校验了，只要在相应属性上增加<code>@Valid</code> 注解即可实现</p>
<h2 id="6-自定义校验"><a href="#6-自定义校验" class="headerlink" title="6 自定义校验"></a>6 自定义校验</h2><p>可以参照 @NotEmpty 注解；步骤如下：</p>
<ol>
<li>自定义校验注解，通过<code>@Constraint</code>来指明使用哪个类进行校验；</li>
<li>编写自定义校验的逻辑实体类，这个类必须实现 ConstraintValidator 这个接口，这样才可以被注解用来校验。 </li>
<li>编写具体的校验逻辑。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//指定了当前注解使用哪个类来进行校验。</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;HaveNoBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HaveNoBlank &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 校验出错时默认返回的消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;字符串中不能含有空格&quot;</span>;</span><br><span class="line">    <span class="comment">// default 关键字 接口中被default修饰的方法，在类实现这个接口时不必必须实现这个方法</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">    <span class="comment">// Class&lt;?&gt; 表示不确定的java类型 </span></span><br><span class="line">    <span class="comment">// Class&lt;T&gt; 表示java类型 </span></span><br><span class="line">    <span class="comment">// Class&lt;K,V&gt; 分别代表java键值中的key value </span></span><br><span class="line">    <span class="comment">// Class&lt;E&gt; 代表Element</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一个元素上指定多个该注解时使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> List &#123;</span><br><span class="line">        NotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaveNoBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;HaveNoBlank, String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// null 不做检验</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 校验失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7 小结"></a>7 小结</h2><p>在全局异常处理类中，我们可以写多个异常处理方法，几种参数校验时可能引发的异常：</p>
<ol>
<li><p>Query 参数校验异常抛出 <code>ConstraintViolationException</code></p>
</li>
<li><p>使用实体类接收Query 参数，或者使用 form data 方式传参，校验异常抛出 <code>BindException</code></p>
</li>
<li><p>使用 Body 参数校验异常抛出  <code>MethodArgumentNotValidException</code></p>
</li>
</ol>
<p><strong>校验 <code>@RequestParam</code>单个请求参数时：</strong></p>
<ul>
<li>首先需要在类上添加<code>@Validated</code>注解来启用控制器中的 @RequestParams 的验证。</li>
<li>在请求参数中增加<strong>校验规则注解</strong></li>
</ul>
<p><strong>校验 <code>@RequestBody</code> 请求体参数时：</strong></p>
<ul>
<li>在请求参数实体类中的成员变量上增加 <strong>校验规则注解</strong></li>
<li>在控制器方法的请求参数中加上<code>@Valid</code> 或者<code>@Validated</code>  注解</li>
<li>如果用到分组校验、嵌套属性校验时，需要使用<code>@Validated</code></li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Validation</tag>
      </tags>
  </entry>
  <entry>
    <title>03-2 接口参数校验异常小结</title>
    <url>/2021/07/24/03%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E5%BC%82%E5%B8%B8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>项目中写接口时，总是出现一些由于请求方式不对、请求参数缺失等原因造成的异常，需要做全局异常处理，针对不同的异常返回不用的信息。</p>
<p>因此整理了一些常见的接口请求异常如下：</p>
<ul>
<li><p>HttpRequestMethodNotSupportedException</p>
</li>
<li><p>MissingServletRequestParameterException</p>
</li>
<li><p>MethodArgumentTypeMismatchException</p>
</li>
<li><p>MissingServletRequestPartException</p>
</li>
<li><p>HttpMessageNotReadableException</p>
</li>
<li><p>ConstraintViolationException</p>
</li>
<li><p>MethodArgumentNotValidException </p>
</li>
<li><p>BindException</p>
</li>
</ul>
<p>本文是对 <strong>03 SpringBoot JSR-303 接口参数校验</strong> 的补充。</p>
<h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><ol>
<li>创建全局异常处理类 GlobalExceptionHandler.java；</li>
<li>通过使用<code>@ControllerAdvice</code>&#x2F; <code>@RestControllerAdvice</code> 定义统一的异常处理类；</li>
<li>使用<code>@ExceptionHandler</code>用来定义函数针对的异常类型；</li>
</ol>
<blockquote>
<p><code>@RestControllerAdvice</code> 与 <code>@ControllerAdvice</code>的区别 ：</p>
<p>与 @RestController 与 @Controller 的区别类似。</p>
<p>当自定义类加@ControllerAdvice注解时，方法需要返回json数据时，每个方法还需要添加@ResponseBody注解</p>
</blockquote>
<h2 id="异常示例"><a href="#异常示例" class="headerlink" title="异常示例"></a>异常示例</h2><ol>
<li>定义一个登录信息VO类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInfo</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>不同的参数校验，引发不同的异常</li>
</ol>
<ul>
<li><p><strong>HttpRequestMethodNotSupportedException：请求方式不支持</strong></p>
<p>请求方式与接口的定义方式不一致则会出现此异常。</p>
</li>
<li><p><strong>MissingServletRequestParameterException：请求参数缺失</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生 MissingServletRequestParameterException 条件：</span></span><br><span class="line"><span class="comment">     * - 使用了<span class="doctag">@RequestParam</span>注解</span></span><br><span class="line"><span class="comment">     * - 缺失必填参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;missingServletRequestParameter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">missingServletRequestParameterException</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam</span> String account, <span class="meta">@RequestParam</span> String password)</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>HttpMessageNotReadableException：请求体缺失</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生 HttpMessageNotReadableException 条件：</span></span><br><span class="line"><span class="comment"> * - 使用了<span class="doctag">@RequestBody</span> 但是请求时不传body</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;httpMessageNotReadableException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">httpMessageNotReadableException</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestBody</span> LoginInfo loginInfo)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>ConstraintViolationException：@RequestParam上参数校验失败</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生 ConstraintViolationException 条件：</span></span><br><span class="line"><span class="comment"> * - 使用了<span class="doctag">@Validated</span>注解（SpringBoot提供），</span></span><br><span class="line"><span class="comment"> * - 缺失必填参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;constraintViolationException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> constraintViolationException <span class="meta">@RequestParam</span> <span class="meta">@NotNull</span> String account, <span class="meta">@RequestParam</span> String password) &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>BindException：DTO接受参数时的参数校验失败</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生 BindException 条件：</span></span><br><span class="line"><span class="comment"> * - 没有使用<span class="doctag">@RequestParam</span>注解，用一个实体类接收参数，但使用了<span class="doctag">@Valid</span>注解,</span></span><br><span class="line"><span class="comment"> * - 必填参数缺失</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;bindException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bindException</span><span class="params">(<span class="meta">@Valid</span> LoginInfo loginInfo)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>MethodArgumentNotValidException：@RequestBody上参数校验失败</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 产生 MethodArgumentNotValidException 条件：</span></span><br><span class="line"><span class="comment">   * - 使用了<span class="doctag">@RequestBody</span> 以及 <span class="doctag">@Valid</span>注解，</span></span><br><span class="line"><span class="comment">   * - 必填参数缺失</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;methodArgumentNotValidException&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodArgumentNotValidException</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> LoginInfo loginInfo)</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Spring-Boot-Web 自带异常有：</p>
<ul>
<li><p>HttpRequestMethodNotSupportedException：请求方法错误异常</p>
</li>
<li><p>MissingServletRequestParameterException：缺失<code>@RequestParam</code> 参数</p>
</li>
<li><p>MethodArgumentTypeMismatchException：参数类型不正确</p>
</li>
<li><p>MissingServletRequestPartException：文件上传，缺失文件</p>
</li>
<li><p>HttpMessageNotReadableException：使用了<code>@RequestBody</code> 但是请求时不传body</p>
</li>
</ul>
<p>Hibernate-Validator 框架校验的异常：常用注解：<code>@Valid</code>、<code>@Validated </code></p>
<ul>
<li><p>ConstraintViolationException：<code>@RequestParam</code>请求参数校验不通过</p>
</li>
<li><p>MethodArgumentNotValidException ：<code>@RequestBody </code>请求参数校验不通过</p>
</li>
<li><p>BindException：使用实体类接收 <code>Query</code> 参数，或者使用 <code>form-data</code> 方式传参，校验不通过</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Validation</tag>
      </tags>
  </entry>
  <entry>
    <title>04 SpringBoot 利用 AOP 实现日志切面</title>
    <url>/2021/07/25/04demo-log-aop/</url>
    <content><![CDATA[<p>参考：<a href="https://mp.weixin.qq.com/s/Y2Dk5EJweUl3fvmyE72L-A">https://mp.weixin.qq.com/s/Y2Dk5EJweUl3fvmyE72L-A</a></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>05 SpringBoot 集成 Swagger2</title>
    <url>/2021/07/28/05demo-swagger2/</url>
    <content><![CDATA[<p><strong>Swagger2</strong> 是一个规范和完整的框架，可以用于生成、描述、调用和可视化 RESTful 风格的 Web 服务：</p>
<ol>
<li>接口文档在线自动生成，文档随接口变动实时更新，节省维护成本</li>
<li>支持在线接口测试，不依赖第三方工具</li>
</ol>
<p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p>
<p>在线 DEMO：<a href="https://petstore.swagger.io/#/">https://petstore.swagger.io/#/</a></p>
<p>顺便一提，目前公司使用的是 YApi 进行接口文档管理平台，每次迭代开发后，都是手动进行接口新增、修改，有点低效。</p>
<p>官网：<a href="https://hellosean1025.github.io/yapi/index.html">https://hellosean1025.github.io/yapi/index.html</a></p>
<p>仓库：<a href="https://github.com/ymfe/yapi">https://github.com/ymfe/yapi</a></p>
<h2 id="添加-Swagger2-依赖"><a href="#添加-Swagger2-依赖" class="headerlink" title="添加 Swagger2 依赖"></a>添加 Swagger2 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-Swagger2-配置类"><a href="#创建-Swagger2-配置类" class="headerlink" title="创建 Swagger2 配置类"></a>创建 Swagger2 配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个DocketBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">// 调用apiInfo方法,创建一个ApiInfo实例,里面是展示在文档页面信息内容</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 控制暴露出去的路径下的实例</span></span><br><span class="line">                <span class="comment">// 如果某个接口不想暴露,可以使用注解 @ApiIgnore</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xiao.swagger2.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 api文档的详细信息函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="comment">// 页面标题</span></span><br><span class="line">                .title(<span class="string">&quot;Spring Boot Swagger2 构建restful API&quot;</span>)</span><br><span class="line">                <span class="comment">// 条款地址</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://www.kongxiao.top&quot;</span>)</span><br><span class="line">                <span class="comment">// 创建人</span></span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;kongxiao&quot;</span>,<span class="string">&quot;https://www.kongxiao.top&quot;</span>,<span class="string">&quot;xxx@163.com&quot;</span>))</span><br><span class="line">                <span class="comment">// 版本号</span></span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                <span class="comment">// 描述</span></span><br><span class="line">                .description(<span class="string">&quot;API 描述&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>createRestApi</code>函数创建<code>Docket</code>的Bean</li>
<li><code>apiInfo()</code>用来创建该Api的基本信息，这些基本信息会展现在文档页面中</li>
<li><code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现</li>
</ul>
<h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>使用注解来生成文档内容。</p>
<p>常用注解汇总如下：</p>
<table>
<thead>
<tr>
<th align="left">作用范围</th>
<th align="left">API</th>
<th align="left">使用位置</th>
</tr>
</thead>
<tbody><tr>
<td align="left">对象属性</td>
<td align="left">@ApiModelProperty</td>
<td align="left">用在出入参数对象的字段上</td>
</tr>
<tr>
<td align="left">协议集描述</td>
<td align="left">@Api</td>
<td align="left">用于controller类上</td>
</tr>
<tr>
<td align="left">协议描述</td>
<td align="left">@ApiOperation</td>
<td align="left">用在controller的方法上</td>
</tr>
<tr>
<td align="left">Response集</td>
<td align="left">@ApiResponses</td>
<td align="left">用在controller的方法上</td>
</tr>
<tr>
<td align="left">Response</td>
<td align="left">@ApiResponse</td>
<td align="left">用在 @ApiResponses里边</td>
</tr>
<tr>
<td align="left">非对象参数集</td>
<td align="left">@ApiImplicitParams</td>
<td align="left">用在controller的方法上</td>
</tr>
<tr>
<td align="left">非对象参数描述</td>
<td align="left">@ApiImplicitParam</td>
<td align="left">用在@ApiImplicitParams的方法里边</td>
</tr>
<tr>
<td align="left">描述返回对象的意义</td>
<td align="left">@ApiModel</td>
<td align="left">用在返回对象类上</td>
</tr>
</tbody></table>
<h3 id="API"><a href="#API" class="headerlink" title="@API"></a>@API</h3><p><strong>使用场景：</strong> 在 Rest 接口类上使用，标记类为 Swagger 资源类，运行时有效</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>tags</code>： 对接口进行分组；</li>
<li><code>value</code>： 在UI界面上不显示；</li>
<li><code>produces</code>： content types，例如：”application&#x2F;json, application&#x2F;xml”；</li>
</ul>
<p>生成的 api 文档会根据 tags 分类，这个 controller 中的所有接口生成的接口文档都会在 tags 这个 list 下；tags 如果有多个值，会生成多个 list，每个 list 都显示所有接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;列表1&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;列表1&quot;,&quot;列表2&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p><strong>使用场景：</strong> 使用于在方法上，表示一个 http 请求的操作；具有相同路径的不同操作会被归组为同一个操作对象</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>value</code>： 用于方法描述</li>
<li><code>notes</code>： 用于提示内容</li>
</ul>
<h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h3><p><strong>使用场景：</strong> 用于响应实体类上，用于说明实体作用</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>value</code>： 实体值</li>
<li><code>description</code>： 描述实体的作用</li>
</ul>
<h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h3><p><strong>使用场景：</strong>用在属性上，描述实体类的属性</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>value</code>： 描述参数的意义</li>
<li><code>name</code>： 参数的变量名</li>
<li><code>required=true</code>：参数是否必选</li>
</ul>
<h3 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h3><p><strong>使用场景：</strong> 用在请求的方法上，包含多 <code>@ApiImplicitParam</code></p>
<p><strong>属性：</strong></p>
<ul>
<li><code>value</code>： 用于方法描述</li>
<li><code>description</code>： 描述实体的作用</li>
</ul>
<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3><p><strong>使用场景：</strong> 用于方法上，表示单独的请求参数</p>
<p><strong>属性：</strong></p>
<ul>
<li><p><code>name</code>：参数名</p>
</li>
<li><p><code>value</code>： 参数说明</p>
</li>
<li><p><code>dataType</code>：数据类型</p>
</li>
<li><p><code>paramType</code>： 表示参数放在哪里，包括</p>
<ul>
<li>header 请求参数的获取：@RequestHeader</li>
<li>query   请求参数的获取：@RequestParam</li>
<li>path（用于restful接口） 请求参数的获取：@PathVariable</li>
<li>body</li>
<li>form</li>
</ul>
</li>
<li><p><code>defaultValue</code>：参数默认值</p>
</li>
<li><p><code>required=true</code>：参数是否必选</p>
</li>
</ul>
<h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3><p><strong>使用场景：</strong> 用于请求的方法上，根据响应码表示不同响应。一个<code>@ApiResponses</code>包含多个<code>@ApiResponse</code></p>
<h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a>@ApiResponse</h3><p><strong>使用场景：</strong>用在请求的方法上，表示不同的响应</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>code</code>： 表示响应码(int型)，可自定义</li>
<li><code>message</code>： 状态码对应的响应信息</li>
</ul>
<h2 id="RESTful-API-文档"><a href="#RESTful-API-文档" class="headerlink" title="RESTful API 文档"></a>RESTful API 文档</h2><h3 id="统一返回格式"><a href="#统一返回格式" class="headerlink" title="统一返回格式"></a>统一返回格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;CommonResult&quot;,description = &quot;统一返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;成功标识；true：成功；false:失败&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回状态码；200:成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;描述信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        CommonResult&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;();</span><br><span class="line">        r.setCode(<span class="number">200</span>);</span><br><span class="line">        r.setData(data);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        CommonResult&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;();</span><br><span class="line">        r.setCode(<span class="number">500</span>);</span><br><span class="line">        r.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RESTFul风格API"><a href="#RESTFul风格API" class="headerlink" title="RESTFul风格API"></a>RESTFul风格API</h3><p><img src="https://image.kongxiao.top/20211018113252.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;User&quot;,produces = &quot;application/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取用户列表&quot;,notes = &quot;获取所有的用户信息列表&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;@ApiResponse(code = 200, message = &quot;操作成功&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 500, message = &quot;服务器内部异常&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 401, message = &quot;权限不足&quot;)&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;User&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(UserController.users.values());</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取单个用户信息&quot;, notes = &quot;根据用户id查询&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Integer&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;创建用户&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细信息&quot;, required = true, dataType = &quot;User&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;修改用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细信息&quot;, required = true, dataType = &quot;User&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Integer&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user, <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> users.get(id);</span><br><span class="line">        u.setUsername(user.getUsername());</span><br><span class="line">        u.setAge(user.getId());</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;删除单个用户信息&quot;, notes = &quot;根据用户id删除&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Integer&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成API文档"><a href="#生成API文档" class="headerlink" title="生成API文档"></a>生成API文档</h3><p>访问文档地址：<a href="http://localhost:8084/swagger-ui.html#/">http://localhost:8084/swagger-ui.html#/</a></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>06 使用 JdbcTemplate 访问 MySQL 数据库</title>
    <url>/2021/08/02/06demo-jdbctemplate/</url>
    <content><![CDATA[<h2 id="1-数据库环境"><a href="#1-数据库环境" class="headerlink" title="1 数据库环境"></a>1 数据库环境</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `phone_number` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `status` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态，1 有效；0 无效&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h2 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2 引入依赖"></a>2 引入依赖</h2><ul>
<li>jdbc</li>
<li>mysql-connector-java</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数据库连接参数"><a href="#3-数据库连接参数" class="headerlink" title="3 数据库连接参数"></a>3 数据库连接参数</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<h2 id="4-使用JdbcTemplate操作数据库"><a href="#4-使用JdbcTemplate操作数据库" class="headerlink" title="4 使用JdbcTemplate操作数据库"></a>4 使用JdbcTemplate操作数据库</h2><ol>
<li><p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态，1 有效；0 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接口文件定义增删改查方法</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">add</span><span class="params">(User model)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 ：1； 失败 ： 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User model)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 ：1； 失败 ： 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>使用 JdbcTemplate 实现</strong></li>
</ol>
<p><code>query(String sql, RowMapper&lt;T&gt; rowMapper)</code>：其中 rowMapper 对象可以自定义返回结果集的映射</p>
<p><code>GeneratedKeyHolder()</code>：可以获取自增主键的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    UserServiceImpl(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM `user`&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, (resultSet, rowNum) -&gt; User.builder()</span><br><span class="line">                .id(resultSet.getLong(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                .name(resultSet.getString(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                .phoneNumber(resultSet.getString(<span class="string">&quot;phone_number&quot;</span>))</span><br><span class="line">                .status(resultSet.getByte(<span class="string">&quot;status&quot;</span>))</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM `user` WHERE `id` = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, (resultSet, rowNum) -&gt; User.builder()</span><br><span class="line">                .id(resultSet.getLong(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                .name(resultSet.getString(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                .phoneNumber(resultSet.getString(<span class="string">&quot;phone_number&quot;</span>))</span><br><span class="line">                .status(resultSet.getByte(<span class="string">&quot;status&quot;</span>))</span><br><span class="line">                .build(), id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">add</span><span class="params">(User model)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `user` (`name`,`phone_number`,`status`,`create_time`,`update_time`) values (?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">KeyHolder</span> <span class="variable">keyHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneratedKeyHolder</span>();</span><br><span class="line">        jdbcTemplate.update(connection -&gt; &#123;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">psst</span> <span class="operator">=</span> connection.prepareStatement(sql, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;id&quot;</span>&#125;);</span><br><span class="line">            psst.setString(<span class="number">1</span>, model.getName());</span><br><span class="line">            psst.setString(<span class="number">2</span>, model.getPhoneNumber());</span><br><span class="line">            psst.setByte(<span class="number">3</span>, model.getStatus());</span><br><span class="line">            psst.setObject(<span class="number">4</span>, model.getCreateTime());</span><br><span class="line">            psst.setObject(<span class="number">5</span>, model.getUpdateTime());</span><br><span class="line">            <span class="keyword">return</span> psst;</span><br><span class="line">        &#125;, keyHolder);</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(keyHolder.getKey()).longValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(User model)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE `user` SET `name` = ?, `phone_number` = ?,`status` = ? where id =  ? &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, model.getName(), model.getPhoneNumber(), model.getStatus(), model.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE `user` SET `status` = 0 where id =  ? &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4 <strong>编写单元测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateApplicationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = initUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;12345678901&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">initUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .name(name)</span><br><span class="line">                .phoneNumber(phoneNumber)</span><br><span class="line">                .status((<span class="type">byte</span>) <span class="number">1</span>)</span><br><span class="line">                .createTime(LocalDateTime.now())</span><br><span class="line">                .updateTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> userService.add(user);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectById(userId);</span><br><span class="line">        Assert.assertEquals(phoneNumber, user.getPhoneNumber());</span><br><span class="line">        List&lt;User&gt; users = userService.selectAll();</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, users.size());</span><br><span class="line">        Assert.assertEquals(name, users.get(<span class="number">0</span>).getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> userService.add(user);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectById(userId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">        user.setName(newName);</span><br><span class="line">        userService.update(user);</span><br><span class="line">        Assert.assertNotNull(userService.selectById(userId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> userService.add(user);</span><br><span class="line">        userService.deleteById(userId);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectById(userId);</span><br><span class="line">        Assert.assertEquals(Optional.of((<span class="type">byte</span>) <span class="number">0</span>).get(), user.getStatus());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>07 SpringBoot 整合 Mybatis</title>
    <url>/2021/08/05/07demo-mybatis/</url>
    <content><![CDATA[<p>MyBatis 官方中文文档：<a href="https://mybatis.org/mybatis-3/zh/">https://mybatis.org/mybatis-3/zh/</a></p>
<p>GitHub: <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
<p>参考文档：<a href="https://blog.didispace.com/spring-boot-learning-21-3-5/">https://blog.didispace.com/spring-boot-learning-21-3-5/</a></p>
<h2 id="1-数据库环境"><a href="#1-数据库环境" class="headerlink" title="1 数据库环境"></a>1 数据库环境</h2><p>在数据中 mybatis 中，建表 user：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `phone_number` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `status` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态，1 有效；0 无效&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h2 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2 引入依赖"></a>2 引入依赖</h2><ul>
<li>mybatis</li>
<li>mysql-connector-java</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于 mybatis-spring-boot-starter 的版本：</p>
<ul>
<li>2.1.x版本适用于：MyBatis 3.5+、Java 8+、Spring Boot 2.1+</li>
<li>2.0.x版本适用于：MyBatis 3.5+、Java 8+、Spring Boot 2.0&#x2F;2.1</li>
<li>1.3.x版本适用于：MyBatis 3.4+、Java 6+、Spring Boot 1.5</li>
</ul>
<h2 id="3-数据库连接参数"><a href="#3-数据库连接参数" class="headerlink" title="3 数据库连接参数"></a>3 数据库连接参数</h2><p>在 Spring Boot 自动化配置中，对于数据源的配置可以分为两类：</p>
<ul>
<li><p>通用配置：以<code>spring.datasource.*</code>的形式存在，主要是对一些即使使用不同数据源也都需要配置的一些常规内容。比如：数据库链接地址、用户名、密码等。</p>
</li>
<li><p>数据源连接池配置：以<code>spring.datasource.&lt;数据源名称&gt;.*</code>的形式存在，比如：Hikari 的配置参数就是<code>spring.datasource.hikari.*</code>形式。</p>
</li>
</ul>
<p>在Spring Boot 2.x中，默认数据源是 <a href="https://github.com/brettwooldridge/HikariCP">HikariCP</a>。</p>
<p>其常用配置项如下：</p>
<ul>
<li><code>spring.datasource.hikari.minimum-idle</code>: 最小空闲连接，默认值 10，小于 0 或大于 maximum-pool-size，都会重置为 maximum-pool-size</li>
<li><code>spring.datasource.hikari.maximum-pool-size</code>: 最大连接数，小于等于 0 会被重置为默认值 10 ；大于零小于 1 会被重置为 minimum-idle的值</li>
<li><code>spring.datasource.hikari.idle-timeout</code>: 空闲连接超时时间，默认值 600000（10分钟），大于等于max-lifetime 且 max-lifetime &gt; 0，会被重置为 0；不等于 0 且小于 10 秒，会被重置为 10 秒。</li>
<li><code>spring.datasource.hikari.max-lifetime</code>: 连接最大存活时间，不等于 0 且小于 30 秒，会被重置为默认值 30 分钟。设置应该比 mysql 设置的超时时间短</li>
<li><code>spring.datasource.hikari.connection-timeout</code>: 连接超时时间：毫秒，小于 250 毫秒，否则被重置为默认值 30 秒</li>
<li><code>spring.datasource.hikari.connection-test-query</code>: 用于测试连接是否可用的查询语句</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">500000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">540000</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># mybatis配置，下划线转驼峰、打印SQL语句、mapper文件位置、包别名</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xiao.mybatis.entity</span></span><br></pre></td></tr></table></figure>
<h2 id="4-实体类、Mapper接口、xml文件"><a href="#4-实体类、Mapper接口、xml文件" class="headerlink" title="4 实体类、Mapper接口、xml文件"></a>4 实体类、Mapper接口、xml文件</h2><ol>
<li><p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态，1 有效；0 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Mapper 接口文件</strong></p>
</li>
</ol>
<p>新建 UserMapper，在接口中定义两个数据操作，一个查询，一个插入。</p>
<p>支持两种方式进行 SQL 语句操作：</p>
<ul>
<li>注解形式</li>
<li>XML 文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 ：1； 失败 ： 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(User model)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 ：1； 失败 ： 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User model)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 ：1； 失败 ： 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;update user set status = 0 where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><strong>xml 配置文件</strong></li>
</ol>
<p>insert 标签中标明<code> useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</code>：可以将自增主键的值设置进实体类中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiao.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO `user` (`name`,`phone_number`,`status`,`create_time`,`update_time`)</span><br><span class="line">        VALUES (#&#123;name&#125;, #&#123;phoneNumber&#125;, #&#123;status&#125;,#&#123;createTime&#125;, #&#123;updateTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        UPDATE `user`</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name = #&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phoneNumber != null&quot;</span>&gt;</span></span><br><span class="line">                phone_number = #&#123;phoneNumber&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                status = #&#123;status&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span></span><br><span class="line">                create_time = #&#123;createTime&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time = #&#123;updateTime&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>创建 Spring Boot 主程序类</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xiao.mybatis.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------service start success ------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>编写单元测试</strong></li>
</ol>
<ul>
<li>使用 <code>@Transactional</code> 和 <code>@Rollback</code> 注解，测试结束回滚数据，保证测试单元每次运行的数据环境独立</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                .name(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .phoneNumber(<span class="string">&quot;12345678901&quot;</span>)</span><br><span class="line">                .status((<span class="type">byte</span>) <span class="number">1</span>)</span><br><span class="line">                .createTime(LocalDateTime.now())</span><br><span class="line">                .updateTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        userMapper.add(user);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>,users.size());</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;zhangsan&quot;</span>,users.get(<span class="number">0</span>).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>07 SpringBoot 整合 Spring Data JPA</title>
    <url>/2021/08/10/08demo-jpa/</url>
    <content><![CDATA[<p>官方文档：<a href="https://docs.spring.io/spring-data/jpa/docs/2.4.2/reference/html/#repository-query-keywords">https://docs.spring.io/spring-data/jpa/docs/2.4.2/reference/html/#repository-query-keywords</a></p>
<p>GitHub: <a href="https://github.com/spring-projects/spring-data-jpa">https://github.com/spring-projects/spring-data-jpa</a></p>
<h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1 引入依赖"></a>1 引入依赖</h2><ul>
<li>jpa</li>
<li>mysql-connector-java</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2 配置文件"></a>2 配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">hbm2ddl:</span></span><br><span class="line">          <span class="attr">auto:</span> <span class="string">update</span></span><br></pre></td></tr></table></figure>

<p><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code> 是 hibernate 的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：</p>
<ul>
<li>create：每次加载hibernate时都会删除上一次的生成的表，然后根据 model 类再重新来生成新表。谨慎使用</li>
<li>create-drop：每次加载hibernate时根据model类生成表，但是 sessionFactory 一关闭,表就自动删除</li>
<li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</li>
<li>validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li>
</ul>
<h2 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3 创建实体类"></a>3 创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态，1 有效；0 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解说明：</p>
<ul>
<li><code>@Entity</code>: 标识了 User 类是一个持久化的实体</li>
<li><code>@Id</code> 和 <code>@GeneratedValue</code> 用来标识 User 对应对应数据库表中的主键，可选四种策略。<ul>
<li>TABLE：使用一个特定的数据库表格来保存主键。</li>
<li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。</li>
<li>IDENTITY：主键由数据库自动生成（主要是自动增长型）</li>
<li>AUTO：主键由程序控制。</li>
</ul>
</li>
<li><code>@Column</code>：用于成员变量名与表字段名的映射，JPA 默认使用的命名策略是下划线分隔的字段命名</li>
<li><code>@DynamicInsert</code>: 设置为 true,表示 insert 对象的时候,生成动态的 insert 语句,如果这个字段的值是 null 就不会加入到 insert 语句当中。默认 false</li>
<li><code>@DynamicUpdate</code>: 设置为true,表示 update 对象的时候,生成动态的 update 语句,如果这个字段的值是 null 就不会被加入到 update 语句中,默认 false</li>
</ul>
<h2 id="4-创建数据访问接口-Repository"><a href="#4-创建数据访问接口-Repository" class="headerlink" title="4 创建数据访问接口 Repository"></a>4 创建数据访问接口 Repository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByName</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和手机号查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByNameAndPhoneNumber</span><span class="params">(String name, String phoneNumber)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;from User u where u.name=:name&quot;)</span></span><br><span class="line">    User <span class="title function_">findUser</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Spring Data JPA中，只需要编写接口继承 JpaRepository, 就可实现数据访问。</p>
<p>JpaRepository 接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。</p>
<p>支持通过解析方法名创建查询，例如 findByNameAndPhoneNumber</p>
<p>支持使用 <code>@Query</code> 注解来创建查询，编写 JPQL 语句，并通过类似“:name”来映射 @Param 指定的参数</p>
]]></content>
      <categories>
        <category>框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基本操作</title>
    <url>/2022/02/10/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Docker 基本知识，包括：</p>
<ul>
<li><p>镜像与容器的概念</p>
</li>
<li><p>安装与启动</p>
</li>
<li><p>镜像与容器相关命令</p>
</li>
<li><p>docker 部署 Tomcat、Nginx 、MySQL、Redis</p>
</li>
</ul>
<h2 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1. Docker简介"></a>1. Docker简介</h2><blockquote>
<p>虚拟化</p>
</blockquote>
<p>​	Virtualization，是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p>
<p>​	在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p>
<p>​	虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p>
<blockquote>
<p>什么是Docker</p>
</blockquote>
<p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p>
<p>项目地址： <a href="https://github.com/docker/docker">https://github.com/docker/docker</a></p>
<p>特点：</p>
<ol>
<li>启动快；去除了管理程序的开销同一台宿主机中也可以运行更多的容器，尽可能的充分利用系统资源。</li>
<li>职责的逻辑分类；加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。</li>
<li>可移植性，易于构建，并易于协作。</li>
<li>鼓励使用面向服务的架构，推荐单个容器只运行一个应用程序或进程，形成了一个分布式的应用程序模型。</li>
</ol>
<blockquote>
<p>Docker 镜像与容器</p>
</blockquote>
<p>Docker是一个客户端-服务器（C&#x2F;S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果Docker提供了一个命令行工具Docker以及一整套RESTful API。可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程</p>
<p><strong>镜像</strong>： 将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p>
<p><strong>容器：</strong> 类似于集装箱</p>
<p>**Registry： ** 镜像仓库，分为公共和私有两种。</p>
<p>Docker公司运营公共的Registry：Docker Hub。<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<p>也可以自己构建私有的Registry</p>
<h2 id="2-安装-Docker（yum安装）"><a href="#2-安装-Docker（yum安装）" class="headerlink" title="2. 安装 Docker（yum安装）"></a>2. 安装 Docker（yum安装）</h2><h3 id="2-1-安装步骤"><a href="#2-1-安装步骤" class="headerlink" title="2.1 安装步骤"></a>2.1 安装步骤</h3><ol>
<li><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</li>
<li><p>确定是 CentOS7 及以上版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release  #查看版本</span><br><span class="line">CentOS Linux release 7.7.1908 (Core)</span><br></pre></td></tr></table></figure>
</li>
<li><p>yum 安装 gcc 相关（需要确保 虚拟机可以上外网 ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">yum remove docker \</span></span><br><span class="line"><span class="language-bash">                  docker-client \</span></span><br><span class="line"><span class="language-bash">                  docker-client-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-common \</span></span><br><span class="line"><span class="language-bash">                  docker-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-engine</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装需要的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置stable镜像仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推荐使用国内的阿里云</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新yum软件包索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版本Docker Engine和容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

</li>
<li><p>启动并测试 hello-world</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">systemctl start docker   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行helloworld,会提示先在本地找没有这个镜像，然后拉取进镜像</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置ustc的镜像 </p>
<p>ustc是老牌的linux镜像服务提供者：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p>
<p>新建并编辑文件：</p>
</li>
</ol>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json  </span><br></pre></td></tr></table></figure>

<p>在该文件中输入如下内容：</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者注册一个自己的阿里云账号，配置阿里云中的镜像加速器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;****&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker   #重启docker</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>docker相关操作</li>
</ol>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker</span></span><br><span class="line">systemctl start docker  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止docker</span></span><br><span class="line">systemctl stop docker	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl restart docker </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker状态：</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置开机启动：</span></span><br><span class="line">systemctl enable docker  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">帮助命令,<span class="comment">#查看docker版本</span></span></span><br><span class="line">docker verion </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker状态</span></span><br><span class="line">docker info   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker帮助文档</span></span><br><span class="line">docker --help </span><br></pre></td></tr></table></figure>

<h3 id="2-2-镜像相关命令"><a href="#2-2-镜像相关命令" class="headerlink" title="2.2 镜像相关命令"></a>2.2 镜像相关命令</h3><h4 id="2-2-1-查看镜像"><a href="#2-2-1-查看镜像" class="headerlink" title="2.2.1 查看镜像"></a>2.2.1 查看镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出本地所有镜像(含中间映像层)</span></span><br><span class="line">docker images -a  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只显示镜像ID</span></span><br><span class="line">docker images -q  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示镜像的摘要信息</span></span><br><span class="line">docker images --digests  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示完整的镜像信息</span></span><br><span class="line">docker images --no-trunc  </span><br></pre></td></tr></table></figure>

<ul>
<li>REPOSITORY：镜像名称， 唯一的</li>
<li>TAG：镜像标签，如果不指定一个镜像的版本标签将默认使用latest 镜像</li>
<li>IMAGE ID：镜像ID， 唯一的</li>
<li>CREATED：镜像的创建日期（不是获取该镜像的日期）</li>
<li>SIZE：镜像大小</li>
<li>这些镜像都是存储在Docker宿主机的&#x2F;var&#x2F;lib&#x2F;docker目录下</li>
</ul>
<h4 id="2-2-2-搜索镜像"><a href="#2-2-2-搜索镜像" class="headerlink" title="2.2.2 搜索镜像"></a>2.2.2 搜索镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索某个镜像</span></span><br><span class="line">docker search 镜像名称  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索点赞数超过30的镜像</span></span><br><span class="line">docker search -s 30 镜像名称   </span><br></pre></td></tr></table></figure>

<ul>
<li><p>NAME：仓库名称</p>
</li>
<li><p>DESCRIPTION：镜像描述</p>
</li>
<li><p>STARS：用户评价，反应一个镜像的受欢迎程度</p>
</li>
<li><p>OFFICIAL：是否官方</p>
</li>
<li><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p>
</li>
</ul>
<h4 id="2-2-3-拉取镜像"><a href="#2-2-3-拉取镜像" class="headerlink" title="2.2.3 拉取镜像"></a>2.2.3 拉取镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">拉取某个镜像，等价于： docker pull 镜像名称：latest</span></span><br><span class="line">docker pull 镜像名称  </span><br></pre></td></tr></table></figure>

<ul>
<li>还可以拉 dokcer pull centos ，只有不到200M的大小</li>
</ul>
<h4 id="2-2-4-删除镜像"><a href="#2-2-4-删除镜像" class="headerlink" title="2.2.4 删除镜像"></a>2.2.4 删除镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">删除镜像，先删容器才能删镜像</span></span><br><span class="line">docker rmi  镜像ID(或者镜像名)  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">强制删除</span></span><br><span class="line">docker rmi -f 镜像ID/(或者镜像名)  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除多个</span></span><br><span class="line">docker rmi -f 镜像名 镜像名 镜像名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">组合命令，删除所有镜像</span></span><br><span class="line">docker rmi -f $(docker images -q)    </span><br></pre></td></tr></table></figure>

<h3 id="2-3-容器相关命令"><a href="#2-3-容器相关命令" class="headerlink" title="2.3 容器相关命令"></a>2.3 容器相关命令</h3><h4 id="2-3-1-查看容器"><a href="#2-3-1-查看容器" class="headerlink" title="2.3.1 查看容器"></a>2.3.1 查看容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有正在运行的容器</span></span><br><span class="line">docker ps 		</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有容器,运行过的或者正在运行的</span></span><br><span class="line">docker ps -a  	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看最后一次运行的容器</span></span><br><span class="line">docker ps –l 	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看最近n个创建的容器</span></span><br><span class="line">docker ps –n 数字	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">静默模式，只显示容器编号</span></span><br><span class="line">docker ps –q 	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看停止的容器</span></span><br><span class="line">docker ps -f status=exited  </span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-创建与启动容器"><a href="#2-3-2-创建与启动容器" class="headerlink" title="2.3.2 创建与启动容器"></a>2.3.2 创建与启动容器</h4><ol>
<li>创建容器命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  [OPTIONS]  image  [COMMAND]</span><br></pre></td></tr></table></figure>

<p><strong>[OPTIONS]说明：</strong></p>
<ul>
<li><p>–name&#x3D;”容器新名字”：为容器指定一个名称</p>
</li>
<li><p>-d：后台运行容器，并返回去容器ID，即启动守护式容器（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p>
</li>
<li><p>&#x3D;&#x3D;-i：以交互模式运行容器，常与-t同时使用&#x3D;&#x3D;</p>
</li>
<li><p>&#x3D;&#x3D;-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。&#x3D;&#x3D;</p>
</li>
<li><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p>
</li>
<li><p>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p>
</li>
</ul>
<ol start="2">
<li>交互式方式创建容器：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br><span class="line"></span><br><span class="line">exit  # 退出并关闭当前容器</span><br><span class="line">Ctrl+Q+P   # 退出当前容器,并不停止</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>守护式方式创建容器：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name=容器名称 镜像名称:标签</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录守护式容器方式：</span></span><br><span class="line">docker exec -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure>

<p>【注意】：此时docker ps -a 进行查看, 会发现容器已经退出。</p>
<p>Docker容器后台运行,就必须有一个前台进程。</p>
<p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p>
<ol start="4">
<li>停止与启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器：</span></span><br><span class="line">docker stop 容器名称（或者容器ID）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">强制停止容器：</span></span><br><span class="line">docker kill 容器名称（或者容器ID）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动容器：</span></span><br><span class="line">docker start 容器名称（或者容器ID）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器：</span></span><br><span class="line">docker restart 容器名称（或者容器ID）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>删除容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID  #，删除容器</span><br><span class="line">docker rm -f $(docker ps -aq)  #一次性删除所有容器</span><br><span class="line">docker pa -aq | xargs docker rm</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>文件拷贝</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷进</span></span><br><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷出</span></span><br><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure>

<h3 id="2-4-镜像补充命令"><a href="#2-4-镜像补充命令" class="headerlink" title="2.4 镜像补充命令"></a>2.4 镜像补充命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit #提交容器副本使之成为一个新的镜像</span><br><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者信息&quot; 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure>

<h3 id="2-5-Docker容器数据卷"><a href="#2-5-Docker容器数据卷" class="headerlink" title="2.5 Docker容器数据卷"></a>2.5 Docker容器数据卷</h3><h4 id="2-5-1-联合文件系统-Union-File-System"><a href="#2-5-1-联合文件系统-Union-File-System" class="headerlink" title="2.5.1 联合文件系统(Union File System)"></a>2.5.1 联合文件系统(Union File System)</h4><p>​		Docker镜像被存储在一系列的只读层。当开启一个容器，Docker读取只读镜像并添加一个读写层在顶部。如果正在运行的容器修改了现有的文件，该文件将被拷贝出底层的只读层到最顶层的读写层。在读写层中的旧版本文件隐藏于该文件之下，但并没有被不破坏 - 它仍然存在于镜像以下。当Docker的容器被删除，然后重新启动镜像时，将开启一个没有任何更改的新的容器 - 这些更改会丢失。此只读层及在顶部的读写层的组合被Docker称为联合文件系统</p>
<h4 id="2-5-2-容器数据卷-Volumes"><a href="#2-5-2-容器数据卷-Volumes" class="headerlink" title="2.5.2 容器数据卷(Volumes)"></a>2.5.2 容器数据卷(Volumes)</h4><p>​        DVolumes是目录（或者文件），它们是外部默认的联合文件系统或者是存在于宿主文件系统正常的目录和文件，<strong>能够持久数据以及共享容器间的数据</strong>。通俗地来说，docker容器数据卷可以看成是生活中常用的u盘，它存在于一个或多个的容器中，由docker挂载到容器，但不属于联合文件系统，Docker不会在容器删除时删除其挂载的数据卷。</p>
<p>特点：</p>
<ul>
<li><p>数据卷可以在容器之间共享或重用数据</p>
</li>
<li><p>数据卷中的更改可以直接生效</p>
</li>
<li><p>数据卷中的更改不会包含在镜像的更新中</p>
</li>
<li><p>数据卷的生命周期一直持续到没有容器使用它为止</p>
</li>
</ul>
<h4 id="2-5-3-添加数据卷"><a href="#2-5-3-添加数据卷" class="headerlink" title="2.5.3 添加数据卷"></a>2.5.3 添加数据卷</h4><ol>
<li><p>命令添加，创建容器时在容器内添加数据卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径:/容器内目录 镜像名</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>将宿主机的目录与容器内的目录进行映射，这样就可以通过修改宿主机某个目录的文件从而去影响容器。把容器关掉，修改宿主机的目录，再次启动容器时，也会同步。</p>
</li>
<li><p>如果共享的是多级的目录，可能会出现权限不足的提示。这是因为CentOS7中的安全模块selinux把权限禁掉了，需要添加参数  –privileged&#x3D;true  来解决挂载的目录没有权限的问题。</p>
</li>
<li><p>-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现，因为并不能够保证在所有的宿主机上都存在这样的特定目录。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id  #查看是否挂载成功</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>DockerFile添加：</p>
<ul>
<li>容器下新建一个文件夹mydocker，编辑Dockerfile文件，添加两个数据卷;</li>
<li>执行，获得一个新的镜像;</li>
<li>宿主机的默认路径可以用<code>docker inspect 容器id</code>指令查看</li>
</ul>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">容器下新建一个文件夹mydocker，编辑Dockerfile文件，添加两个数据卷</span></span><br><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line">FROM centos    #来源于镜像centos</span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]  #添加两个数据卷</span><br><span class="line">CMD echo &quot;finished,--------success1&quot; #容器卷运行成功提示</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">---------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上指令相当于:</span></span><br><span class="line">docker run -it -v /host1:/dataVolumeContainer1 /host2:/dataVolumeContainer2 centos /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行，获得一个新的镜像</span></span><br><span class="line">docker bulid -f /mydocker/Dockerfile -t 自定义镜像名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">宿主机的默认路径可以用docker inspect 容器<span class="built_in">id</span>指令查看</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6-Dockerfile"><a href="#2-6-Dockerfile" class="headerlink" title="2.6 Dockerfile"></a>2.6 Dockerfile</h3><h4 id="2-6-1-概念"><a href="#2-6-1-概念" class="headerlink" title="2.6.1 概念"></a>2.6.1 概念</h4><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p>
<ol>
<li>对于开发人员：可以为开发团队提供一个完全一致的开发环境； </li>
<li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了； </li>
<li>对于运维人员：在部署时，可以实现应用的无缝移植</li>
</ol>
<p>区分几个概念：</p>
<ul>
<li><p>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</p>
</li>
<li><p>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</p>
</li>
<li><p>Docker容器，容器是直接提供服务的。</p>
</li>
</ul>
<h4 id="2-6-2-常用命令"><a href="#2-6-2-常用命令" class="headerlink" title="2.6.2 常用命令"></a>2.6.2 常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>FROM image_name:tag</td>
<td>定义了使用哪个基础镜像启动构建流程</td>
</tr>
<tr>
<td>MAINTAINER user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量 (可以写多条)</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dockerfile的核心部分(可以写多条)</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>当前容器对外暴露出的端口</td>
</tr>
<tr>
<td>ADD source_dir&#x2F;file dest_dir&#x2F;file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir&#x2F;file dest_dir&#x2F;file</td>
<td>和ADD相似，但是如果有压缩文件并不能解压</td>
</tr>
<tr>
<td>VOLUME</td>
<td>容器数据卷，用于数据保持和持久化工作</td>
</tr>
<tr>
<td>CMD</td>
<td>指定一个容器启动时要运行的命令，Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替代</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定一个容器启动时要运行的命令，docker run之后的会追加</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody></table>
<h3 id="2-7-centos镜像案例"><a href="#2-7-centos镜像案例" class="headerlink" title="2.7 centos镜像案例"></a>2.7 centos镜像案例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM scratch    #依赖镜像名称和ID</span><br><span class="line">MAINTAINER ...   #指定镜像创建者信息</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /    #执对容器作出修改</span><br><span class="line"></span><br><span class="line">LABEL org.label-schema.schema-version=&quot;1.0&quot; \</span><br><span class="line">    org.label-schema.name=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.label-schema.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.label-schema.license=&quot;GPLv2&quot; \</span><br><span class="line">    org.label-schema.build-date=&quot;20191001&quot;</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="3-应用部署"><a href="#3-应用部署" class="headerlink" title="3. 应用部署"></a>3. 应用部署</h2><h3 id="3-1-Tomcat-部署"><a href="#3-1-Tomcat-部署" class="headerlink" title="3.1 Tomcat 部署"></a>3.1 Tomcat 部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat   #搜索Tomcat镜像</span><br><span class="line">docker pull tomcat    #拉取tomcat镜像</span><br><span class="line">docker run -it -p 8080:8080 tomcat  #交互式方式创建容器，-p表示端口映射，前者是宿主机端口，后者是容器内的映射端口</span><br></pre></td></tr></table></figure>

<p>最新版本的webapp目录下没有页面，浏览器连接会显示404。</p>
<h3 id="3-2-MySQL-部署"><a href="#3-2-MySQL-部署" class="headerlink" title="3.2 MySQL 部署"></a>3.2 MySQL 部署</h3><ol>
<li>拉取镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7   #拉取mysql:5.7镜像</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br><span class="line"></span><br><span class="line">docker run -p 12345:3306 --name mysql -v /root/mysql/conf:/etc/mysql/conf.d -v /root/mysql/logs:/logs -v /root/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 </span><br><span class="line"></span><br><span class="line">docker exec –it 容器id /bin/bash  #进入容器，操作mysql</span><br><span class="line">mysql -uroot -p123456  #进入mysql命令操作</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数据备份：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有的数据库文件导出到宿主机的/root/mysql/all-databases.sql文件备份</span></span><br><span class="line">docker exec 容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;123456&quot; &#x27; &gt; /root/mysql/all-databases.sql</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Redis-部署"><a href="#3-3-Redis-部署" class="headerlink" title="3.3 Redis 部署"></a>3.3 Redis 部署</h3><ol>
<li>搜索redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:3.2</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 -v /root/redis/data:/data -v /root/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes  #开启aof</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试连接</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID  redis-cli</span><br></pre></td></tr></table></figure>

<h3 id="3-4-Ngnix-部署"><a href="#3-4-Ngnix-部署" class="headerlink" title="3.4 Ngnix 部署"></a>3.4 Ngnix 部署</h3><ol>
<li>搜索nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_nginx -p 80:80  -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/conf/logs:/var/log/nginx -v /root/nginx/conf/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用外部机器访问 nginx</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis (三) - 高级结果映射 association、collection</title>
    <url>/2021/06/03/MyBatis(%E4%B8%89)-%E9%AB%98%E7%BA%A7%E7%BB%93%E6%9E%9C%E6%98%A0%E5%B0%84association%E3%80%81collection/</url>
    <content><![CDATA[<p>MyBatis 学习笔记 (三)，多表查询的高级结果映射，内容包括：</p>
<ol start="5">
<li>多对一查询  关联 (association)</li>
<li>一对多查询  集合 (collection)</li>
</ol>
<p>学习视频：尚硅谷雷丰阳老师 MyBatis <a href="https://www.bilibili.com/video/BV1bb411A7bD">https://www.bilibili.com/video/BV1bb411A7bD</a></p>
<h2 id="1-association–多对一查询"><a href="#1-association–多对一查询" class="headerlink" title="1. association–多对一查询"></a>1. association–多对一查询</h2><p>处理多表查询。</p>
<p>MyBatis 有两种不同的方式加载关联：</p>
<ul>
<li>嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。</li>
<li>嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。</li>
</ul>
<h3 id="1-1-测试环境"><a href="#1-1-测试环境" class="headerlink" title="1.1 测试环境"></a>1.1 测试环境</h3><p>两张表，员工表 tbl_employee 和部门表 tbl_dept，员工表中设置外键部门 id ，指向部门表的主键</p>
<p>在之前的基础上新建了部门表，并在员工表中设置外键，插入数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 员工表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_employee(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  </span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"># 部门表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_dept(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">dept_name <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_dept`(`id`, `dept_name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;开发部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_dept`(`id`, `dept_name`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;测试部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 员工表新增字段部门id，并设置外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_employee <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> d_id <span class="type">INT</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_employee <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(d_id) <span class="keyword">REFERENCES</span> tbl_dept(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_employee`(`id`, `last_name`, `gender`, `email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;lisi@163.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_employee`(`id`, `last_name`, `gender`, `email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;wangwu@126.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_employee`(`id`, `last_name`, `gender`, `email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;林青霞&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;lingqingxia@163.com&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`tbl_employee`(`id`, `last_name`, `gender`, `email`, `d_id`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>员工表：</p>
<p><img src="http://image.kongxiao.top/image-20210618153546857.png" alt="image-20210618153546857"></p>
<p>部门表：</p>
<p><img src="http://image.kongxiao.top/image-20210618153603192.png" alt="image-20210618153603192"></p>
<p>Employee实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dept实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-级联属性封装结果"><a href="#1-2-级联属性封装结果" class="headerlink" title="1.2 级联属性封装结果"></a>1.2 级联属性封装结果</h3><p>在接口文件中声明一个根据员工 id 查询员工信息的方法，因为员工信息中一个成员是部门对象，按照之前的映射关系，无法查询部门信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询员工的信息及其部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Employee <span class="title function_">getEmpAndDept</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>采用级联属性来封装结果：</strong></p>
<p>employee 中有一个成员是 dept，由 dept.id 和 dept.departmentName 则可以获取到部门的 id 和部门名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--联合查询，级联属性封装结果集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDifEmp&quot;</span>&gt;</span></span><br><span class="line">       select emp.id        id,</span><br><span class="line">            emp.last_name last_name,</span><br><span class="line">            emp.gender    gender,</span><br><span class="line">            emp.email     email,</span><br><span class="line">            dep.id        did,</span><br><span class="line">            dep.dept_name dept_name</span><br><span class="line">        from tbl_employee emp,</span><br><span class="line">             tbl_dept dep</span><br><span class="line">        where emp.d_id = dep.id</span><br><span class="line">          and emp.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@8b87145]</span><br><span class="line">==&gt;  Preparing: select emp.id id, emp.last_name last_name, emp.gender gender, emp.email email, dep.id did, dep.dept_name dept_name from tbl_employee emp, tbl_dept dep where emp.d_id = dep.id and emp.id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, last_name, gender, email, did, dept_name</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, <span class="number">0</span>, lisi@<span class="number">163.</span>com, <span class="number">1</span>, 开发部</span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>, dept=Dept(id=<span class="number">1</span>, departmentName=开发部))</span><br></pre></td></tr></table></figure>

<h3 id="1-3-association嵌套结果集"><a href="#1-3-association嵌套结果集" class="headerlink" title="1.3 association嵌套结果集"></a>1.3 association嵌套结果集</h3><p>关联（association）元素可以处理多表查询。</p>
<p>MyBatis 有两种不同的方式加载关联：</p>
<ul>
<li>嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。</li>
<li>嵌套 Select 查询：即分步查询，通过执行另外一个 SQL 映射语句来加载期望的复杂类型。</li>
</ul>
<p>查询结果本质上是 Employee 类，其中的成员 Dept 是对象，需要进行关联 association，用 javaType 获取属性的类型。两种方式结果相同。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--查询结果本质上是Employee类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--对查询结果进行映射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库中的字段取了别名后用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- dept成员是一个对象，需要用association指定联合的JavaBean对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property=&quot;dept&quot;:指定哪个属性是联合的对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- javaType:指定这个属性对象的类型，不能省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDep&quot;</span>&gt;</span></span><br><span class="line">       select emp.id        id,</span><br><span class="line">            emp.last_name last_name,</span><br><span class="line">            emp.gender    gender,</span><br><span class="line">            emp.email     email,</span><br><span class="line">            dep.id        did,</span><br><span class="line">            dep.dept_name dept_name</span><br><span class="line">        from tbl_employee emp,</span><br><span class="line">             tbl_dept dep</span><br><span class="line">        where emp.d_id = dep.id</span><br><span class="line">          and emp.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@8b87145]</span><br><span class="line">==&gt;  Preparing: select emp.id id, emp.last_name last_name, emp.gender gender, emp.email email, dep.id did, dep.dept_name dept_name from tbl_employee emp, tbl_dept dep where emp.d_id = dep.id and emp.id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, last_name, gender, email, did, dept_name</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, <span class="number">0</span>, lisi@<span class="number">163.</span>com, <span class="number">1</span>, 开发部</span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>, dept=Dept(id=<span class="number">1</span>, departmentName=开发部))</span><br></pre></td></tr></table></figure>

<h3 id="1-4-association分步查询"><a href="#1-4-association分步查询" class="headerlink" title="1.4 association分步查询"></a>1.4 association分步查询</h3><p>思路：</p>
<ol>
<li>先根据输入的员工 id 查询员工信息</li>
<li>再根据查询到的员工信息中的 d_id，查询对应的部门信息</li>
<li>将部门信息设置给员工</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--association分步查询--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--第一步,先查询员工信息--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--第二步,根据查询到的员工信息的did，寻找对应的部门信息--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDep2&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--第一步,先查询员工信息--&gt;</span></span><br><span class="line">     select id, last_name, gender,email,d_id from tbl_employee  where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDep2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--简单的属性直接写--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--复杂的属性，需要单独处理--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--select：调用指定的方法查出结果--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--column：将哪一列的值传给这个方法--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--property：查出的结果封装给property指定的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">column</span>=<span class="string">&quot;d_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getDept&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二步,根据查询到的员工信息中的d_id，查询对应的部门信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDept&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">    select id,dept_name departmentName from tbl_dept where id = #&#123;d_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> association标签中的属性：</p>
<ul>
<li><code>select</code>：调用指定的方法查出结果</li>
<li><code>column</code>：将哪一列的值传给这个方法</li>
<li><code>property</code>：查出的结果封装给property指定的属性</li>
</ul>
<p><strong>执行流程：使用 select 指定的方法，用传入的 column 指定的这列参数的值，查出对象，并封装给 property属性</strong></p>
<p>结果：有两条 sql 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@8b87145]</span><br><span class="line">==&gt;  Preparing: select id, last_name, gender,email,d_id from tbl_employee <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, last_name, gender, email, d_id</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, <span class="number">0</span>, lisi@<span class="number">163.</span>com, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">==&gt;  Preparing: select id, dept_name departmentName from tbl_dept <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, departmentName</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 开发部</span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>, dept=Dept(id=<span class="number">1</span>, departmentName=开发部))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>分步查询可以使用延迟加载</p>
</blockquote>
<p>延迟加载(懒加载、按需加载)，需要在全局配置文件中开启</p>
<ul>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。默认是 false</li>
<li>aggressiveLazyLoading：开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载。（在 3.4.1 及之前的版本中默认为 true，之后默认为 false）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启懒加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试中只使用查询到的员工信息，不使用部门信息，则只会发出一条 sql 语句，如果不开启延迟加载，则总是会发出两条 sql 语句： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">System.out.println(employee.getEmail());</span><br></pre></td></tr></table></figure>

<p>结果，只执行了第一步的 sql 语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@8b87145]</span><br><span class="line">==&gt;  Preparing: select id, last_name, gender,email,d_id from tbl_employee <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, last_name, gender, email, d_id</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, <span class="number">0</span>, lisi@<span class="number">163.</span>com, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">lisi@<span class="number">163.</span>com</span><br></pre></td></tr></table></figure>

<p>关联关系中设置 <code>fetchType=&quot;eager&quot;</code> ，则会忽略全局配置参数 <code>lazyLoadingEnabled</code>，使用改属性的值，执行了两条 sql 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">column</span>=<span class="string">&quot;d_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getDept&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-collection–一对多查询"><a href="#2-collection–一对多查询" class="headerlink" title="2 collection–一对多查询"></a>2 collection–一对多查询</h2><p>查询部门，并将部门对应的所有员工信息查询出来</p>
<p>Employee 实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dept 实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DeptMapper 接口文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">    Dept <span class="title function_">selectDeptById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-嵌套结果集"><a href="#2-1-嵌套结果集" class="headerlink" title="2.1 嵌套结果集"></a>2.1 嵌套结果集</h3><p>使用关联查询，根据 Dept 的 id 查询 Dept 信息，其中 Dept 中有一个成员是 emps，即员工的集合，需要用到<strong>collection 标签</strong>进行结果映射。</p>
<p>集合标签：<code>collection</code></p>
<ul>
<li><code>property</code>：指定哪个属性是集合</li>
<li><code>ofType</code>：获取集合中的泛型信息</li>
</ul>
<p>sql映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiao.dao.DeptMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--嵌套结果查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDept&quot;</span>&gt;</span></span><br><span class="line">        select d.id did, d.dept_name dept_name, e.id eid, e.last_name last_name, e.email email, e.gender gender</span><br><span class="line">        from tbl_dept d</span><br><span class="line">        left join tbl_employee e</span><br><span class="line">        on d.id = e.d_id</span><br><span class="line">        where d.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，单独处理，集合：collection，property指定哪个属性是集合，用ofType获取集合中的泛型信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.selectDeptById(<span class="number">1</span>);</span><br><span class="line">System.out.println(dept);</span><br></pre></td></tr></table></figure>

<p>查询结果，一个部门中有两个员工信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select d.id did, d.dept_name dept_name, e.id eid, e.last_name last_name, e.email email, e.gender gender from tbl_dept d left join tbl_employee e on d.id = e.d_id where d.id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: did, dept_name, eid, last_name, email, gender</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 开发部, <span class="number">1</span>, lisi, lisi@<span class="number">163.</span>com, <span class="number">0</span></span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 开发部, <span class="number">2</span>, wangwu, wangwu@<span class="number">126.</span>com, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">2</span></span><br><span class="line">Dept(id=<span class="number">1</span>, departmentName=开发部, emps=[Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>), Employee(id=<span class="number">2</span>, lastName=wangwu, email=wangwu@<span class="number">126.</span>com, gender=<span class="number">1</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="2-2-分步查询"><a href="#2-2-分步查询" class="headerlink" title="2.2 分步查询"></a>2.2 分步查询</h3><p>思路与多对一中的思路类型：</p>
<ol>
<li>先根据输入的部门 id 查询部门信息</li>
<li>再根据查询到的部门信息中的部门 id，查询对应的员工信息</li>
<li>将员工信息设置给部门</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分步查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDept&quot;</span>&gt;</span></span><br><span class="line">    select id, dept_name</span><br><span class="line">    from tbl_dept</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getEmp&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select id,last_name lastName,email,gender from tbl_employee where d_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询结果，执行了两条 SQL 语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select id, dept_name from tbl_dept <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, dept_name</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 开发部</span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">==&gt;  Preparing: select id,last_name lastName,email,gender from tbl_employee <span class="type">where</span> <span class="variable">d_id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, lastName, email, gender</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, lisi@<span class="number">163.</span>com, <span class="number">0</span></span><br><span class="line">&lt;==        Row: <span class="number">2</span>, wangwu, wangwu@<span class="number">126.</span>com, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">2</span></span><br><span class="line">Dept(id=<span class="number">1</span>, departmentName=开发部, emps=[Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>), Employee(id=<span class="number">2</span>, lastName=wangwu, email=wangwu@<span class="number">126.</span>com, gender=<span class="number">1</span>)])</span><br></pre></td></tr></table></figure>



<h3 id="2-3-补充几个小点"><a href="#2-3-补充几个小点" class="headerlink" title="2.3 补充几个小点"></a>2.3 补充几个小点</h3><ol>
<li><p>分步查询如何传递多列的值？</p>
<p>将多列的值封装成 map 传递：column&#x3D;{key1&#x3D;column1,key2&#x3D;column2…}，使用时则用 #{key} 获取</p>
</li>
<li><p>开启了全局懒加载后，特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态</p>
</li>
</ol>
<ul>
<li><p>fetchType&#x3D;”lazy”：懒加载</p>
</li>
<li><p>fetchType&#x3D;”eager”：立即加载</p>
</li>
</ul>
<ol start="3">
<li><p><strong>鉴别器 discriminator</strong></p>
<p>类似于 Java 语言中的 switch 语句，可以根据不同的条件封装不同的结果集。需要指定 column 和 javaType 属性。</p>
<ul>
<li>javaType：列值对应的java类型</li>
<li>column：指定用于判定的列名</li>
<li>value：进行条件的判断，满足该条件，则选择该结果封装规则</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">      ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">      ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>关联查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis (四)-动态 SQL 和缓存</title>
    <url>/2021/06/05/Mybatis(%E5%9B%9B)-%E5%8A%A8%E6%80%81SQL%E5%92%8C%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>MyBatis 笔记 (四)，内容包括：</p>
<ol>
<li>动态SQL的几个标签</li>
<li>缓存，包括一级缓存、二级缓存和第三方缓存</li>
</ol>
<h2 id="1-动态SQL"><a href="#1-动态SQL" class="headerlink" title="1. 动态SQL"></a>1. 动态SQL</h2><p>动态 SQL 就是指根据不同的条件生成不同的 SQL 语句</p>
<p>MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p>
<ul>
<li><code>if</code></li>
<li><code>choose (when, otherwise)</code></li>
<li><code>trim (where, set)</code></li>
<li><code>foreach</code></li>
</ul>
<p>数据库环境和实体类依然如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_employee(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  </span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_employee <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,&quot;zhansgan&quot;,<span class="number">0</span>,&quot;zhangsan@qq.com&quot;),</span><br><span class="line">(<span class="number">2</span>,&quot;lisi&quot;,<span class="number">0</span>,&quot;lisi@163.com&quot;),</span><br><span class="line">(<span class="number">3</span>,&quot;wangwu&quot;,<span class="number">1</span>,&quot;wangwu@126.com&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName; </span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-if"><a href="#1-1-if" class="headerlink" title="1.1 if"></a>1.1 if</h3><p>语法： <strong>test</strong>  属性可以拿到 <code>if </code>标签中的参数值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">     ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>适用于多条件查询的场景，携带了哪个字段查询条件，就带上这个字段的值；即如果传入id，则根据id查询；如果同时传入 id 和 lastName ，则根据 id 和 lastName 查询。</p>
<p>接口文件中声明查询方法，传入的是一个对象作为条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个查询方法，传入的参数是一个对象</span></span><br><span class="line">    List&lt;Employee&gt; <span class="title function_">selectEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sql映射文件写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.dynamic.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tbl_employee</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null and lastName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and last_name = #&#123;lastName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ognl会进行字符串与数字的转换判断--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==0 or gender == 1&quot;</span>&gt;</span></span><br><span class="line">        and gender = #&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">        and email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">List&lt;Employee&gt; list = mapper.selectEmp(employee);</span><br></pre></td></tr></table></figure>

<p>执行的sql语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from tbl_employee <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? <span class="type">and</span> <span class="variable">gender</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer), <span class="number">1</span>(String)</span><br></pre></td></tr></table></figure>



<h3 id="1-2-where"><a href="#1-2-where" class="headerlink" title="1.2 where"></a>1.2 where</h3><p>上面的例子有一个弊端，就是如果传入的 id 值是 null ，而后续条件不为 null，则 sql 语句中会出现 where 后面直接跟一个 and 的情况。</p>
<p>解决方法：</p>
<ol>
<li>在查询语句中写 where 1&#x3D;1，后面的每一个 <code>if</code> 标签的前面都加上 and</li>
<li><strong>将查询语句放入<code>where</code> 标签中</strong></li>
</ol>
<p><code>where</code> 标签只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。</p>
<p>而且，若子句的开头为 “AND” 或 “OR”，<code>where</code> 标签也会将它们去除。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.dynamic.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null and lastName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and last_name = #&#123;lastName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ognl会进行字符串与数字的转换判断--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender == 0 or gender == 1&quot;</span>&gt;</span></span><br><span class="line">        and gender = #&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">        and email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-trim"><a href="#1-3-trim" class="headerlink" title="1.3 trim"></a>1.3 trim</h3><p>如果 <code>where</code> 标签与期望的不太一样，也可以通过自定义 <code>trim</code> 标签来定制 <code>where</code> 元素的功能。</p>
<p>比如，和 <code>where</code> 标签等价的自定义 trim 标签为：</p>
<p>属性：</p>
<ul>
<li>prefix：前缀，给trim标签体中整个拼接好的字符串加一个前缀</li>
<li>prefixOverrides：前缀覆盖，去掉整个字符串前面多余的字符</li>
<li>suffix：后缀，给trim标签体中整个拼接好的字符串加一个后缀</li>
<li>suffixOverrides：后缀覆盖，去掉整个字符串后面多余的字符</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-choose-when-otherwise"><a href="#1-4-choose-when-otherwise" class="headerlink" title="1.4 choose (when, otherwise)"></a>1.4 choose (when, otherwise)</h3><p><code>choose </code> 标签，从多个条件中选择一个使用，类似于 Java 中的 switch 语句。</p>
<p>带了id条件就用id查询，带了 lastName 条件就用 lastName 查，否则就查 gender&#x3D;&#x3D;0 的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp3&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.dynamic.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null and lastName !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                and last_name = #&#123;lastName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and gender=0</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-set"><a href="#1-5-set" class="headerlink" title="1.5 set"></a>1.5 set</h3><p>与if结合使用，用于动态包含需要更新的列，忽略其它不更新的列，会动态地在行首插入 SET 关键字，并会删掉额外的逗号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line">    update tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null&quot;</span>&gt;</span></span><br><span class="line">            last_name = #&#123;lastName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">            gender = #&#123;gender&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">            email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-foreach"><a href="#1-6-foreach" class="headerlink" title="1.6 foreach"></a>1.6 foreach</h3><p><code>foreach</code> 标签，指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。也可以指定开头与结尾的字符串以及集合项迭代之间的分隔符（separator）。</p>
<ul>
<li>可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给<code>foreach</code>。</li>
<li>当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。</li>
<li>当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</li>
</ul>
<h4 id="01-查询条件是集合"><a href="#01-查询条件是集合" class="headerlink" title="01 查询条件是集合"></a>01 查询条件是集合</h4><p>如果要执行 <code>select  * from tbl_employee where id in (1,2,3) </code>语句，则可以写为：</p>
<p>接口文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据传入的id集合查询</span></span><br><span class="line">List&lt;Employee&gt; <span class="title function_">selectEmpByList</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p>sql映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpByList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.dynamic.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select  * from tbl_employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item_id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;where id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性说明：</p>
<ul>
<li><code>collection</code>：要遍历的集合</li>
<li><code>item</code>：将当前遍历出的元素赋值给指定的变量</li>
<li><code>separator</code>：每个元素之间的分隔符</li>
<li><code>open</code>：遍历出所有的结果拼接一个开始的字符</li>
<li><code>close</code>：遍历出所有的结果拼接一个结束的字符</li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">mapper.selectEmpByList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p>执行的SQL语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from tbl_employee where id <span class="title function_">in</span> <span class="params">( ? , ? , ? )</span> </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer), <span class="number">2</span>(Integer), <span class="number">3</span>(Integer)</span><br></pre></td></tr></table></figure>



<h4 id="02-批量插入"><a href="#02-批量插入" class="headerlink" title="02 批量插入"></a>02 批量插入</h4><p>批量插入即执行：insert into tbl_employee(last_name, gender, email) values (…),(…),(…)</p>
<p>接口文件中声明一个批量插入方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量插入</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertEmp</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span> List&lt;Employee&gt; employees)</span>;</span><br></pre></td></tr></table></figure>

<p>sql映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(last_name, gender, email) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>也可以使用执行多次sql语句的方式：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        insert into tbl_employee(last_name, gender, email)</span><br><span class="line">        values (#&#123;emp.lastName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式需要开启MySQL的allowMultiQueries：允许一条语句中使用分号来分隔各语句</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-bind-绑定"><a href="#1-7-bind-绑定" class="headerlink" title="1.7 bind 绑定"></a>1.7 bind 绑定</h3><p>可以将ognl表达式的值绑定到一个变量中，方便后面来引用这个值。</p>
<p>模糊查询中，只传入了lastName值，用bind标签在两端拼接了%，然后name属性为_lastName，给sql语句引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.dynamic.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;_lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + lastName + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">	select * from tbl_employee where last_name like #&#123;_lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-sql-抽取可重用片段"><a href="#1-8-sql-抽取可重用片段" class="headerlink" title="1.8 sql 抽取可重用片段"></a>1.8 sql 抽取可重用片段</h3><ol>
<li>将经常要使用的片段用 sql 标签抽取出来，sql 标签中指定 id</li>
<li>增删改标签里用 include 标签来引用，指定 refid 即可</li>
<li>include 标签内部还可以自定义 property 标签，name 属性指定列名，value 属性为值，sql 标签内部就能使用自定义的属性，用 $ 来使用</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span> = <span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">id,last_name,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">   select</span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">&quot;insert&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">   from  tbl_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t1&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t2&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	from tbl_employee t1</span><br><span class="line">		left join tbl_employee t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="1-9-两个内置参数"><a href="#1-9-两个内置参数" class="headerlink" title="1.9 两个内置参数"></a>1.9 两个内置参数</h3><p>MyBatis 中有两个内置参数可以直接使用：</p>
<ul>
<li><p>_parameter：代表整个参数；如果是单个参数，那么它就是这个参数；如果是多个参数，则会被封装为一个map，那么它代表这个 map</p>
</li>
<li><p>_databaseId：如果配置了 databaseIdProvider 标签，则代表的就是当前数据库的别名</p>
</li>
</ul>
<h2 id="2-缓存机制"><a href="#2-缓存机制" class="headerlink" title="2. 缓存机制"></a>2. 缓存机制</h2><p>MyBatis 系统中默认定义了两级缓存：一级缓存和二级缓存。</p>
<ul>
<li><strong>默认情况下，只有一级缓存（SqlSession级别的缓存，也称为本地缓存）开启。</strong></li>
<li><strong>二级缓存需要手动开启和配置，是基于 namespace 级别的缓存。</strong></li>
<li>为了提高扩展性。MyBatis 定义了缓存接口 Cache。可以通过实现 Cache 接口来自定义二级缓存</li>
</ul>
<h3 id="2-1-一级缓存"><a href="#2-1-一级缓存" class="headerlink" title="2.1 一级缓存"></a>2.1 一级缓存</h3><p>一级缓存 (local cache)，即本地缓存, 作用域默认为 SqlSession ，即一次数据库连接，是一直开启的。</p>
<p>同一次会话期间只要查询过的数据都会保存在当前 SqlSession 的一个Map中：key–hashCode+查询的SqlId+编写的 sql 查询语句+参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee1</span> <span class="operator">=</span> mapper.selectEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(employee1);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> mapper.selectEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(employee2);</span><br><span class="line">System.out.println(employee1==employee2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>一级缓存失效的情况：</strong></p>
<ol>
<li>不同的 SqlSession 对应不同的一级缓存</li>
<li>同一个 SqlSession 但是查询条件不同</li>
<li>同一个 SqlSession 两次查询期间执行了任何一次增删改操作</li>
<li>同一个 SqlSession 两次查询期间手动清空了缓存，调用 sqlSession.clearCache() 方法</li>
</ol>
<p>全局配置文件中：<strong>localCacheScope</strong> 属性即 MyBatis 的本地缓存机制，默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存，即禁用了一级缓存。</p>
<h3 id="2-2-二级缓存"><a href="#2-2-二级缓存" class="headerlink" title="2.2 二级缓存"></a>2.2 二级缓存</h3><h4 id="01-工作机制"><a href="#01-工作机制" class="headerlink" title="01 工作机制"></a>01 工作机制</h4><p>一级缓存的作用域比较小，需要使用到二级缓存 (second level cache)，即全局作用域缓存，<strong>是基于namespace级别的缓存</strong></p>
<ul>
<li>二级缓存默认不开启，需要手动配置</li>
<li>MyBatis 提供二级缓存的接口以及实现，缓存实现要求 POJO 实现 Serializable 接口</li>
<li>二级缓存在 SqlSession 关闭或提交之后才会生效</li>
</ul>
<p>工作机制：</p>
<ol>
<li><p>一个会话查询一条语句，这个数据就会被放在当前会话的一级缓存中；</p>
</li>
<li><p><strong>如果会话关闭，一级缓存中的数据才会被保存到二级缓存中</strong>，新的会话信息就可以参照二级缓存中的内容</p>
</li>
<li><p>不同 namespace 查出的数据会被放在自己对应的缓存中 (map)，EmployeeMapper &#x3D;&#x3D;&gt; Employee；DepartmentMapper &#x3D;&#x3D;&gt; Department</p>
</li>
</ol>
<h4 id="02-使用步骤"><a href="#02-使用步骤" class="headerlink" title="02 使用步骤"></a>02 使用步骤</h4><ol>
<li><p>全局配置文件中开启二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要使用二级缓存的 sql 映射文件中使用 cache 标签配置缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;false&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：POJO 需要实现 Serializable 接口</p>
</li>
<li><p>开启两个 sqlSession 进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">   <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee1</span> <span class="operator">=</span> mapper.selectEmpById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(employee1);</span><br><span class="line">   sqlSession.close();</span><br><span class="line">   </span><br><span class="line">   <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">   <span class="type">EmployeeMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(EmployeeMapper.class);</span><br><span class="line">   <span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> mapper2.selectEmpById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(employee2);</span><br><span class="line">   System.out.println(employee1 == employee2); <span class="comment">//false</span></span><br><span class="line">   sqlSession2.close();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@140e5a13]</span><br><span class="line">==&gt;  Preparing: select * from tbl_employee <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, last_name, gender, email, d_id</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, lisi, <span class="number">0</span>, lisi@<span class="number">163.</span>com, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>)</span><br><span class="line">Resetting autocommit to <span class="literal">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@140e5a13]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@140e5a13]</span><br><span class="line">Returned connection <span class="number">336484883</span> to pool.</span><br><span class="line">Cache Hit Ratio [com.xiao.mybatis.dynamic.mapper.EmployeeMapper]: <span class="number">0.5</span></span><br><span class="line">Employee(id=<span class="number">1</span>, lastName=lisi, email=lisi@<span class="number">163.</span>com, gender=<span class="number">0</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>注意：<strong>第一个sqlSession.close()后，才会把一级缓存存入二级缓存</strong>，第二次缓存命中 Cache Hit Ratio 为0.5，即第二次查缓存，命中了一次，没有执行sql</p>
</li>
</ol>
<h4 id="03-参数说明"><a href="#03-参数说明" class="headerlink" title="03 参数说明"></a>03 参数说明</h4><p>**eviction：缓存回收策略 **</p>
<ul>
<li><p>LRU –– 最近最少使用的：移除最长时间不被使用的对象。</p>
</li>
<li><p>FIFO –– 先进先出：按对象进入缓存的顺序来移除它们。</p>
</li>
<li><p>SOFT –– 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p>
</li>
<li><p>WEAK –– 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p>
<p>默认的是 LRU。</p>
</li>
</ul>
<p><strong>flushInterval：刷新间隔，单位毫秒</strong></p>
<ul>
<li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>
</ul>
<p><strong>size：引用数目，正整数</strong></p>
<ul>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
</ul>
<p><strong>readOnly：只读，true&#x2F;false</strong></p>
<ul>
<li>true：只读缓存；直接将数据在缓存中的引用交给用户。加快了获取速度，不安全</li>
<li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li>
</ul>
<p>type：可以指定自定义缓存的全类名，实现 cache 接口</p>
<h4 id="04-缓存有关设置小结"><a href="#04-缓存有关设置小结" class="headerlink" title="04 缓存有关设置小结"></a>04 缓存有关设置小结</h4><ol>
<li><strong>全 局setting 的 cacheEnable</strong>：配置二级缓存的开关，置为 alse，关闭的是二级缓存，一级缓存一直是打开的</li>
<li><strong>select 标签的useCache属性</strong>：配置这个 select 是否使用二级缓存。一级缓存一直是使用的</li>
<li><strong>sql标签的flushCache属性</strong>：增删改标签中默认 flushCache&#x3D;true，即清除缓存，<strong>sql 执行以后，会同时清空一级和二级缓存</strong>。查询标签默认 flushCache&#x3D;false</li>
<li>**sqlSession.clearCache()**：只是用来清除一级缓存。</li>
<li>当在某一个作用域(一级缓存 Session&#x2F;二级缓存 Namespaces) 进行了 C&#x2F;U&#x2F;D 操作后，默认该作用域下所有select 中的缓存将被 clear。</li>
</ol>
<p><img src="http://image.kongxiao.top/image-20200613174757061.png"></p>
<h3 id="2-3-第三方缓存"><a href="#2-3-第三方缓存" class="headerlink" title="2.3 第三方缓存"></a>2.3 第三方缓存</h3><p>EhCache 是一个纯 Java 的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认的 CacheProvider。</p>
<p>MyBatis 定义了 Cache 接口方便我们进行自定义扩展。</p>
<ol>
<li>添加依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 sql 映射文件中配置 cache 标签</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入使用缓存--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--缓存自创建日期起至失效时的间隔时间一个小时--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToIdleSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--缓存创建以后，最后一次访问缓存的日期至失效之时的时间间隔一个小时--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToLiveSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置在缓存中保存的对象的最大的个数，这个按照业务进行配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxEntriesLocalHeap&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--设置在磁盘中最大实体对象的个数--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxEntriesLocalDisk&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000000&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--缓存淘汰算法--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryStoreEvictionPolicy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者单独建立一个 ehcache.xml 配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\44\ehcache&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">defaultCache</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">属性说明：</span></span><br><span class="line"><span class="comment">diskStore：指定数据在磁盘中的存储位置。</span></span><br><span class="line"><span class="comment">defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是必须的：</span></span><br><span class="line"><span class="comment">maxElementsInMemory - 在内存中缓存的element的最大数目 </span></span><br><span class="line"><span class="comment">maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span></span><br><span class="line"><span class="comment">eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span></span><br><span class="line"><span class="comment">overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是可选的：</span></span><br><span class="line"><span class="comment">timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment">diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span></span><br><span class="line"><span class="comment">diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span></span><br><span class="line"><span class="comment">diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span></span><br><span class="line"><span class="comment">memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>

<p>参照缓存：若想在命名空间中共享相同的缓存配置和实例。可以使用 cache-ref 标签来引用另外一个缓存，指定namespace 即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p><img src="http://image.kongxiao.top/image-20200613180156203.png"></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>动态 SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring (三) - 声明式事务</title>
    <url>/2021/06/14/Spring(%E4%B8%89)-%20%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>Spring 基础知识学习笔记 (三)，声明式事务，内容包括：：</p>
<ol>
<li>注解实现声明式事务</li>
<li>事务的隔离级别</li>
<li>事务的传播行为</li>
<li>配置文件实现</li>
</ol>
<p>参考视频：</p>
<p>B 站尚硅谷雷丰阳大神的 Spring、Spring MVC、MyBatis 课程 <a href="https://www.bilibili.com/video/BV1d4411g7tv">https://www.bilibili.com/video/BV1d4411g7tv</a></p>
<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><h3 id="1-1-数据库环境"><a href="#1-1-数据库环境" class="headerlink" title="1.1 数据库环境"></a>1.1 数据库环境</h3><p>三张表：账户表 account，书籍价格表 book，书籍库存表 book_stock</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">balance <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> </span><br><span class="line">(&quot;Tom&quot;,<span class="number">1000</span>),</span><br><span class="line">(&quot;Jerry&quot;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">isbn <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">book_name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line">)ENGINE	<span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span>	</span><br><span class="line">(&quot;ISBN-001&quot;,&quot;book01&quot;,<span class="number">100</span>),</span><br><span class="line">(&quot;ISBN-002&quot;,&quot;book02&quot;,<span class="number">200</span>),</span><br><span class="line">(&quot;ISBN-003&quot;,&quot;book03&quot;,<span class="number">300</span>),</span><br><span class="line">(&quot;ISBN-004&quot;,&quot;book04&quot;,<span class="number">400</span>),</span><br><span class="line">(&quot;ISBN-005&quot;,&quot;book05&quot;,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book_stock (</span><br><span class="line">isbn <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">stock <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book_stock	<span class="keyword">VALUES</span> </span><br><span class="line">(&quot;ISBN-001&quot;,<span class="number">10</span>),</span><br><span class="line">(&quot;ISBN-002&quot;,<span class="number">10</span>),</span><br><span class="line">(&quot;ISBN-003&quot;,<span class="number">10</span>),</span><br><span class="line">(&quot;ISBN-004&quot;,<span class="number">10</span>),</span><br><span class="line">(&quot;ISBN-005&quot;,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-减余额、减库存的方法"><a href="#1-2-减余额、减库存的方法" class="headerlink" title="1.2 减余额、减库存的方法"></a>1.2 减余额、减库存的方法</h3><ol>
<li>新建一个 BookDao 类，用于操作数据库，包括减账户余额、修改图书价格、减图书库存方法等</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减去某个用户的账户余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(String userName, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE account SET balance = balance - ? WHERE username = ?&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate.update(sql, price, userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照图书的isbn获取图书的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isbn 编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPrice</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT price FROM book WHERE isbn = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.jdbcTemplate.queryForObject(sql, Integer.class, isbn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减去图书的库存,每次减去1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isbn 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE book_stock SET stock = stock-1 WHERE isbn = ?&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate.update(sql, isbn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改图书价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isbn 编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 要修改的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">(String isbn, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE book SET price=? where isbn =?&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate.update(sql, price, isbn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建一个 BookService 类，结账方法，调用减账户余额和减图书库存两个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结账方法，分为减库存，减余额两步操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOut</span><span class="params">(String username,String isbn)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.减库存</span></span><br><span class="line">        <span class="built_in">this</span>.bookDao.updateStock(isbn);</span><br><span class="line">        System.out.println(<span class="string">&quot;减库存完成！&quot;</span>);</span><br><span class="line">        <span class="comment">// 故意引入异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 根据isbn查询价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> <span class="built_in">this</span>.bookDao.getPrice(isbn);</span><br><span class="line">        <span class="comment">// 2.减账户余额</span></span><br><span class="line">        <span class="built_in">this</span>.bookDao.updateBalance(username,price);</span><br><span class="line">        System.out.println(<span class="string">&quot;结账完成!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数据库配置文件 <strong>db.properties</strong> 和 Spring配置文件 <strong>ApplicationContext.xml</strong>：</li>
</ol>
<p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_learn?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p><code>ApplicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ioc.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService.getClass());</span><br><span class="line">        System.out.println(ioc.getBean(BookDao.class).getClass());</span><br><span class="line">        bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在 <strong>减图书库存</strong> 和 <strong>减账户余额</strong> 之间故意插入异常，则只会执行 <strong>减图书库存</strong> ，<strong>减账户余额</strong> 未执行。</p>
<h2 id="2-声明式事务"><a href="#2-声明式事务" class="headerlink" title="2. 声明式事务"></a>2. 声明式事务</h2><h3 id="2-1-事务的-ACID-原则"><a href="#2-1-事务的-ACID-原则" class="headerlink" title="2.1 事务的 ACID 原则"></a>2.1 事务的 ACID 原则</h3><ul>
<li><strong>原子性（Atomicity）</strong> ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>
<li><strong>一致性（Consistency）</strong> ：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</li>
<li><strong>隔离性（Isolation）</strong>：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>
<li><strong>持久性（Durability）</strong> ： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
<h3 id="2-2-声明式事务配置"><a href="#2-2-声明式事务配置" class="headerlink" title="2.2 声明式事务配置"></a>2.2 声明式事务配置</h3><p>Spring 提供了事务管理器，就可以在目标方法运行前后进行事务控制(事务切面)。这里使用DataSourceTransaction。</p>
<p>步骤：</p>
<ol>
<li>配置事务管理器让其进行事务控制，传入要控制哪个数据源</li>
<li>开启基于注解的事务控制，依赖于 tx 名称空间，指定事务管理器的id</li>
<li>给事务方法加注解 <code>@Transactional</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(切面)，DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要控制哪个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的事务控制模式，指定事务管理器的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法上加上注解<code>@Transactional</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOut</span><span class="params">(String username,String isbn)</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时 <strong>减图书库存</strong> 和 <strong>减账户余额</strong> 之间发生异常时，事务会回滚。</p>
<h2 id="3-事务细节"><a href="#3-事务细节" class="headerlink" title="3. 事务细节"></a>3. 事务细节</h2><ul>
<li><code>Isolation isolation()</code>：事务的隔离级别，默认为 Isolation.DEFAULT</li>
<li><code>Propagation propagation()</code>：事务的传播行为，默认为 Propagation.REQUIRED</li>
<li><code>Class&lt;? extends Throwable&gt;[] rollbackFor() </code>：哪些异常事务需要回滚，让本来不回滚的异常进行回滚</li>
<li><code>String[] rollbackForClassName()</code>：</li>
<li><code>Class&lt;? extends Throwable&gt;[] noRollbackFor()</code>：哪些异常事务可以不回滚，让本来回滚的异常不回滚</li>
<li><code>String[] noRollbackForClassName()</code></li>
<li><code>int timeout() </code>：事务超出指定执行时长后自动终止并回滚，单位为秒</li>
<li><code>boolean readOnly()</code>：设置事务为只读事务，加快查询速度，不用管事务那一堆操作。默认为false</li>
</ul>
<h3 id="3-1-超时-x2F-只读"><a href="#3-1-超时-x2F-只读" class="headerlink" title="3.1 超时&#x2F;只读"></a>3.1 超时&#x2F;只读</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3,readOnly = false)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-rollbackFor-x2F-noRollbackFor"><a href="#3-2-rollbackFor-x2F-noRollbackFor" class="headerlink" title="3.2 rollbackFor&#x2F;noRollbackFor"></a>3.2 rollbackFor&#x2F;noRollbackFor</h3><p>运行时异常（非检查异常）：可以不用处理，默认都回滚</p>
<p>编译时异常（检查异常）：要么 try-catch，要么在方法上声明 throws，默认不回滚</p>
<ul>
<li><p><code>Class&lt;? extends Throwable&gt;[] rollbackFor() </code>：哪些异常事务需要回滚，让本来不回滚的异常进行回滚</p>
</li>
<li><p><code>Class&lt;? extends Throwable&gt;[] noRollbackFor()</code>：哪些异常事务可以不回滚，让本来回滚的异常不回滚</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = &#123;ArithmeticException.class&#125;)</span></span><br></pre></td></tr></table></figure>

<p>算术运算异常，是运行时异常，本来默认回滚的，设置noRollbackFor属性后，就不回滚了。</p>
<h3 id="3-3-事务的隔离级别"><a href="#3-3-事务的隔离级别" class="headerlink" title="3.3 事务的隔离级别"></a>3.3 事务的隔离级别</h3><h4 id="01-事务并发运行带来的问题"><a href="#01-事务并发运行带来的问题" class="headerlink" title="01 事务并发运行带来的问题"></a>01 事务并发运行带来的问题</h4><p>多个事务并发运行，经常会操作相同的数据来完成各自的任务，能会导致以下的问题：</p>
<ul>
<li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li>
<li><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li>
<li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>
</ul>
<h4 id="02-SQL的隔离级别"><a href="#02-SQL的隔离级别" class="headerlink" title="02 SQL的隔离级别"></a>02 SQL的隔离级别</h4><p>SQL 标准定义了四个隔离级别：</p>
<ul>
<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>
<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。MySQL 的 InnoDB 存储引擎默认的。</li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<h4 id="03-Spring事务的隔离级别"><a href="#03-Spring事务的隔离级别" class="headerlink" title="03 Spring事务的隔离级别"></a>03 Spring事务的隔离级别</h4><p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>
<ul>
<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong> 使用后端数据库默认的隔离级别，MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li>
<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>
<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>
<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>
<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<h3 id="3-4-事务的传播行为"><a href="#3-4-事务的传播行为" class="headerlink" title="3.4 事务的传播行为"></a>3.4 事务的传播行为</h3><p>事务的传播行为，即如果有多个事务进行嵌套运行，子事务是否要和父事务公用一个事务。</p>
<p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。</p>
<p>事务传播属性可以在 <code>@Transactional</code> 注解的 propagation 属性中定义。Spring 定义了 7 种传播行为。</p>
<p><strong>支持当前事务的情况：</strong></p>
<ul>
<li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>
<li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li>
</ul>
<p><strong>不支持当前事务的情况：</strong></p>
<ul>
<li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 当前事务总是创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li>
</ul>
<p><strong>其他情况：</strong></p>
<ul>
<li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>
<h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5 案例"></a>3.5 案例</h3><p>REQUIRED：将之前事务用的 connection 传递给这个方法使用</p>
<p>REQUIRES_NEW：这个方法直接使用新的 connection</p>
<p>在 BookDao 类中再定义一个修改图书价格的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改图书价格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">(String isbn,Integer price)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE book SET price=? where isbn =?&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.jdbcTemplate.update(sql,price,isbn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookService 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改价格方法</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">(String isbn,Integer price)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bookDao.updatePrice(isbn, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个 MulService 类，其中有一个声明了事务的方法，同时调用结账方法和修改价格的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mulTx</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//结账 </span></span><br><span class="line">        <span class="built_in">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line">        <span class="comment">//修改价格</span></span><br><span class="line">        <span class="built_in">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="01-情况一"><a href="#01-情况一" class="headerlink" title="01 情况一"></a>01 情况一</h4><p>checkOut() 方法和 updatePrice() 方法默认传播行为是 REQUIRED，因为 mulTx() 方法存在事务，所以就加入它，<strong>所以如果一个方法崩了，则整体都会回滚。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结账 REQUIRED</span></span><br><span class="line"><span class="built_in">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line"><span class="comment">//修改价格 REQUIRED</span></span><br><span class="line"><span class="built_in">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>);</span><br></pre></td></tr></table></figure>
<p>大家都在一车上，一个翻车全翻车。</p>
<h4 id="02-情况二"><a href="#02-情况二" class="headerlink" title="02 情况二"></a>02 情况二</h4><p>checkOut() 方法传播行为设置为 REQUIRES_NEW，即自己去开个新事务，在updatePrice() 方法中引入异常。</p>
<p>相当于第一个方法开了新车，第二个方法跟主方法在一车上，翻车了并不影响第一个方法，因此结账执行完成了，修改价格会回滚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结账 REQUIRES_NEW</span></span><br><span class="line"><span class="built_in">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line"><span class="comment">//修改价格 REQUIRED</span></span><br><span class="line"><span class="built_in">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>);</span><br></pre></td></tr></table></figure>
<h2 id="4-配置文件实现声明式事务"><a href="#4-配置文件实现声明式事务" class="headerlink" title="4. 配置文件实现声明式事务"></a>4. 配置文件实现声明式事务</h2><p><code>aop:config</code>：告诉 Spring 哪些方法是事务方法：事务切面按照外面的切入点表达式去切入事务方法</p>
<p><code>tx:advice</code>：配置事务建议，切入上面的切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(切面)，DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要控制哪个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务属性，传播特性、超时时间等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指明哪些方法是事务方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入，告诉Spring哪些方法是事务方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点，com.xiao.service包下的所有类的所有方法，只是说事务管理器要切入这些方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xiao.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务建议，让事务管理器切面来切入这个切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>Spring</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring (二) - 动态代理、AOP</title>
    <url>/2021/06/12/Spring(%E4%BA%8C)-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E3%80%81AOP/</url>
    <content><![CDATA[<p>Spring 基础知识学习笔记 (二)，内容包括：</p>
<ol>
<li>代理模式：静态代理和动态代理</li>
<li>AOP 实现：注解实现+配置文件实现</li>
<li>切面、通知、切入点、切入点表达式</li>
<li>环绕通知</li>
</ol>
<p>几个概念：</p>
<p><code>OOP</code> ：(Object Oriented Programming) 面向对象编程。</p>
<p><code>AOP</code> ：(Aspect Oriented Programming) 面向切面编程，基于 OOP 基础之上的编程思想，在程序运行期间，将某段代码动态的切入到指定方法的指定位置进行运算。</p>
<p>应用场景：计算器运行计算方法的时候进行日志记录，不推荐直接在方法内部，修改维护麻烦。</p>
<p>希望：在核心功能运行期间，系统的辅助功能自己动态的加上。</p>
<p>参考视频：</p>
<p>B 站尚硅谷雷丰阳大神的 Spring、Spring MVC、MyBatis 课程 <a href="https://www.bilibili.com/video/BV1d4411g7tv">https://www.bilibili.com/video/BV1d4411g7tv</a></p>
<h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1. 代理模式"></a>1. 代理模式</h2><h3 id="1-1-静态代理"><a href="#1-1-静态代理" class="headerlink" title="1.1 静态代理"></a>1.1 静态代理</h3><p><strong>静态代理角色分析</strong>：</p>
<ul>
<li>抽象角色 : 一般使用接口或者抽象类来实现</li>
<li>真实角色 : 被代理的角色</li>
<li>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</li>
<li>客户  :  使用代理角色来进行一些操作</li>
</ul>
<p><strong>案例：</strong>  房东有房子，交给中介代理，客户直接找中介，中介在租房前后带客户看房子和收中介费。</p>
<p>租房接口 Renet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真实角色房东：Host，实现了 Rent 接口，可以出租房子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理角色 MyProxy：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//中介在出租房屋前带客户看房子</span></span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="built_in">this</span>.host.rent();</span><br><span class="line">        <span class="comment">//中介在出租房屋后收中介费</span></span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带客户看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户 Client，找中介租房：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//中介来代理房东</span></span><br><span class="line">        <span class="type">MyProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyProxy</span>(host);</span><br><span class="line">        <span class="comment">//客户找中介，中介出租房屋</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">带客户看房子</span><br><span class="line">房屋出租！</span><br><span class="line">收中介费</span><br></pre></td></tr></table></figure>

<p><strong>静态代理的好处:</strong></p>
<ul>
<li>使得真实角色更加纯粹，不再去关注一些公共的事情 </li>
<li>公共的业务由代理来完成，实现了业务的分工 </li>
<li>公共业务发生扩展时变得更加集中和方便</li>
</ul>
<p><strong>缺点 :</strong></p>
<ul>
<li>类多了 , 多了代理类 , 工作量变大了 ，开发效率降低</li>
</ul>
<h3 id="1-2-动态代理"><a href="#1-2-动态代理" class="headerlink" title="1.2 动态代理"></a>1.2 动态代理</h3><p>动态代理的角色和静态代理的一样 ，区别是 <strong>动态代理的代理类是动态生成的</strong>  ，静态代理的代理类是提前写好的。</p>
<p>动态代理分为两类 : 一类是 <strong>基于接口动态代理</strong> , 一类是 <strong>基于类的动态代理</strong></p>
<ul>
<li>基于接口的动态代理–JDK动态代理，<strong>代理对象和被代理对象唯一能产生的关联就是实现了同一个接口。如果目标对象没有实现任何接口，是无法为其创建代理对象的。</strong></li>
<li>基于类的动态代理–cglib</li>
</ul>
<p>JDK动态代理需要两个核心类：<code>Proxy</code> 代理和 <code>InvocationHandler</code> 调用处理程序。</p>
<blockquote>
<p> Proxy：</p>
</blockquote>
<p><code>Proxy.newProxyInstance()</code> 方法为目标对象创建代理对象，返回代理对象。三个参数：</p>
<ul>
<li>ClassLoader loader：和被代理对象使用相同的类加载器。 </li>
<li>Class&lt;?&gt;[] interfaces：和被代理对象具有相同的行为。实现相同的接口。 </li>
<li>InvocationHandler：如何代理，方法执行器。</li>
</ul>
<blockquote>
<p> InvocationHandler：</p>
</blockquote>
<p>调用其<code>invoke()</code>方法，执行被代理对象的任何方法，都会经过该方法，三个参数：被代理对象、方法、参数</p>
<ul>
<li>Object proxy：被代理的对象</li>
<li>Method method：方法</li>
<li>Object[] args：执行方法的参数</li>
</ul>
<p>代码实现：</p>
<ol>
<li><p>定义一个出租房子的接口Rent</p>
</li>
<li><p>房东类实现Rent，具有出租房子的功能</p>
</li>
<li><p>定义一个类实现InvocationHandler接口，来创建动态代理对象，增强功能</p>
</li>
<li><p>动态代理对象调用方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Description</span>: 定义一个类实现InvocationHandler接口，来创建动态代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 设置要代理的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个生成代理类的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Proxy.newProxyInstance()传入三个参数：类加载器，类实现的接口，InvocationHandler对象</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), rent.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object invoke </span><br><span class="line">		  <span class="comment">// 先看房</span></span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="comment">// 使用反射机制invoke方法，传入被代理的接口和参数。使用真实对象的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(proxy, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">proxyInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传入要代理的接口</span></span><br><span class="line">        proxyInvocationHandler.setRent(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得代理对象</span></span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) proxyInvocationHandler.getProxy();</span><br><span class="line">        <span class="comment">// 代理对象使用真实对象的方法，方法被增强了</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-动态代理实现日志功能"><a href="#1-3-动态代理实现日志功能" class="headerlink" title="1.3 动态代理实现日志功能"></a>1.3 动态代理实现日志功能</h3><ol>
<li>定义一个 <code>Calculator</code> 接口，声明加减乘除方法</li>
<li>定义一个 <code>MyCalculator</code> 类实现 <code>Calculator</code> 接口，完成方法体</li>
<li>定义一个生成代理对象的类 <code>CalculatorProxy</code>，获取代理对象</li>
<li>重写<code>InvocationHandler</code> 的 <code>invoke()</code>方法，在执行目标方法前后，添加相应的日志输出，也可以处理异常信息</li>
</ol>
<p>Calculator 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加减乘除方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyCalculator 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalculator</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i * j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志工具类 LogUtils：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 执行前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method,Object... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法开始执行了，用的参数列表是【&quot;</span>+ Arrays.asList(args)+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method,Object result)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法执行完成了，计算结果是【&quot;</span>+ result+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出现异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">(Method method,Exception e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法出现异常了,异常信息是：&quot;</span>+e.getCause());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法结束</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成代理对象的类 CalculatorProxy：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Proxy.newProxyInstance()</span></span><br><span class="line"><span class="comment">     * 为传入的参数对象创建一个动态代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> calculator 被代理的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title function_">getProxy</span><span class="params">(Calculator calculator)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> Proxy.newProxyInstance(calculator.getClass().getClassLoader(), calculator.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象，给JDK使用的</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 当前将要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//目标方法执行前</span></span><br><span class="line">                            LogUtils.before(method,args);</span><br><span class="line">             </span><br><span class="line">                            System.out.println(<span class="string">&quot;动态代理要帮你执行方法！&quot;</span>);</span><br><span class="line">                            <span class="comment">//利用反射执行目标方法</span></span><br><span class="line">                            result = method.invoke(calculator, args);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//目标方法执行后</span></span><br><span class="line">                            LogUtils.after(method,result);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                           <span class="comment">//目标方法出现异常</span></span><br><span class="line">                            LogUtils.exception(method,e);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//目标方法结束后</span></span><br><span class="line">                            LogUtils.end(method);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//返回值必须返回出去，外界才能拿到真正执行后的返回值</span></span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxyInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculator</span>();</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> CalculatorProxy.getProxy(calculator);</span><br><span class="line">        proxy.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        proxy.divide(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【add】方法开始执行了，用的参数列表是【[<span class="number">1</span>, <span class="number">2</span>]】</span><br><span class="line">动态代理要帮你执行方法！</span><br><span class="line">【add】方法执行完成了，计算结果是【<span class="number">3</span>】</span><br><span class="line">【add】方法最终结束了</span><br><span class="line">【divide】方法开始执行了，用的参数列表是【[<span class="number">2</span>, <span class="number">0</span>]】</span><br><span class="line">动态代理要帮你执行方法！</span><br><span class="line">【divide】方法出现异常了,异常信息是：java.lang.ArithmeticException: / by zero</span><br><span class="line">【divide】方法最终结束了</span><br></pre></td></tr></table></figure>

<h2 id="2-AOP"><a href="#2-AOP" class="headerlink" title="2. AOP"></a>2. AOP</h2><p><code>AOP</code> ：(Aspect Oriented Programming) 面向切面编程，将某段代码动态的切入到指定方法的指定位置(方法的开始、结束、异常…)。</p>
<p>使用场景：</p>
<ul>
<li>加日志保存到数据库</li>
<li>做权限验证</li>
<li>做安全检查</li>
<li>做事务控制</li>
</ul>
<h3 id="2-1-几个专业术语"><a href="#2-1-几个专业术语" class="headerlink" title="2.1 几个专业术语"></a>2.1 几个专业术语</h3><p><img src="http://image.kongxiao.top/image-20200615132452367.png" alt="image-20200615132452367"></p>
<ul>
<li><p><strong>横切关注点</strong>：与业务逻辑无关的，但是需要关注的部分，就是横切关注点，方法的开始、返回、异常、结束等。</p>
</li>
<li><p><strong>切面（ASPECT）类</strong>：在上面例子中相当于自己定义的一个日志工具类。</p>
</li>
<li><p><strong>通知（Advice）</strong>：切面必须要完成的工作，是类中的一个方法。</p>
</li>
<li><p><strong>目标（Target）</strong>：被通知对象。</p>
</li>
<li><p><strong>代理（Proxy）</strong>：向目标对象应用通知之后创建的对象。</p>
</li>
<li><p><strong>连接点（JointPoint）</strong>：每一个方法的每一个位置都是一个连接点</p>
</li>
<li><p><strong>切入点（PointCut）</strong>：切面通知执行的 “地点”，即真正需要执行日志记录的地方</p>
</li>
<li><p><strong>切入点表达式</strong>：在众多连接点中选出我们感兴趣的地方</p>
</li>
</ul>
<h3 id="2-2-注解实现步骤"><a href="#2-2-注解实现步骤" class="headerlink" title="2.2 注解实现步骤"></a>2.2 注解实现步骤</h3><p>需要 AOP 织入，要导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<ol>
<li><p>将目标类和切面类(封装了通知方法的类)加入到IOC容器中，注解<code>@Component</code>，配置文件开启context:component-scan 包扫描</p>
</li>
<li><p>告诉Spring到底哪个是切面类，在类上注解<code>@Aspect</code></p>
</li>
<li><p>告诉Spring切面中的方都是何时何地运行，方法上注解</p>
<ul>
<li>@Before：在目标方法之前运行；前置通知</li>
<li>@After：在目标方法之后运行；后置通知</li>
<li>@AfterReturning：在目标方法正常返回之后；返回通知</li>
<li>@AfterThrowing：在目标方法抛出异常之后；异常通知</li>
<li>@Around：环绕通知</li>
</ul>
</li>
<li><p>在注解中写切入点表达式：<code>execution(访问权限符 返回值类型 方法全类名(参数表))</code></p>
</li>
<li><p>配置文件中开启基于注解的 AOP 功能</p>
<p>AOP 名称空间头文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>代码实现：</p>
<p>目标类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalculator</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切面类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogUtils</span> &#123;</span><br><span class="line">    <span class="comment">//执行前</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行后</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行完成了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出现异常</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法结束</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，获取到目标对象的 bean，执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//注意这里是根据接口类型获取的</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(Calculator.class);</span><br><span class="line">        System.out.println(bean);<span class="comment">//com.xiao.aop.MyCalculator@3c9bfddc</span></span><br><span class="line">        System.out.println(bean.getClass());<span class="comment">//class com.sun.proxy.$Proxy22</span></span><br><span class="line">        bean.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> 	<span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao.aop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-注解实现的几个细节"><a href="#2-3-注解实现的几个细节" class="headerlink" title="2.3 注解实现的几个细节"></a>2.3 注解实现的几个细节</h3><h4 id="01-获取组件"><a href="#01-获取组件" class="headerlink" title="01 获取组件"></a>01 获取组件</h4><p>IOC 容器中保存的是组件的代理对象。ioc.getBean() 中使用的接口类型，也可以用id名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calculator</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(Calculator.class);</span><br><span class="line">System.out.println(bean);<span class="comment">// com.xiao.MyProxy02.MyCalculator@3c9bfddc</span></span><br><span class="line">System.out.println(bean.getClass());<span class="comment">// class com.sun.proxy.$Proxy22</span></span><br></pre></td></tr></table></figure>
<h4 id="02-cglib"><a href="#02-cglib" class="headerlink" title="02 cglib"></a>02 cglib</h4><p><code>&lt;aop:aspectj-autoproxy /&gt;</code>有一个 proxy-target-class 属性，默认为 false，表示使用 JDK 动态代理织入增强。</p>
<p>当配为<code>&lt;aop:aspectj-autoproxy  poxy-target-class=&quot;true&quot;/&gt;</code>时，表示使用 CGLib 动态代理技术织入增强。不过即使 proxy-target-class 设置为 false，如果目标类没有声明接口，则 spring 将自动使用 CGLib 动态代理。</p>
<p>CGLib 可以为没有实现接口的组件创建代理对象，通过本类类型或者 id 名获取到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.xiao.MyProxy02.MyCalculator$$EnhancerBySpringCGLIB$$5ef61d8e</span><br></pre></td></tr></table></figure>

<h4 id="03-切入点表达式的写法"><a href="#03-切入点表达式的写法" class="headerlink" title="03 切入点表达式的写法"></a>03 切入点表达式的写法</h4><p>固定格式：**execution(访问权限符 返回值类型 方法全类名(参数表))**，表达式中支持 &amp;&amp; 、||、 ！</p>
<p><code>&quot;execution(* *.*(..))&quot;</code>：表示任意返回值类型，任意包下的任意类的任意方法，任意参个数</p>
<p>通配符：</p>
<ul>
<li><code>*</code> 可以匹配一个或多个字符；匹配一个参数；匹配一层路径；权限位置不写就行</li>
<li><code>..</code> 匹配任意多个参数，任意类型参数，任意多层路径</li>
</ul>
<h4 id="04-通知方法的执行顺序"><a href="#04-通知方法的执行顺序" class="headerlink" title="04 通知方法的执行顺序"></a>04 通知方法的执行顺序</h4><p>正常执行：Before →方法执行 →After → AfterReturning (正常返回)</p>
<p>出现异常：Before →方法执行 →After → AfterThrowing</p>
<h4 id="05-拿到目标方法的详细信息"><a href="#05-拿到目标方法的详细信息" class="headerlink" title="05 拿到目标方法的详细信息"></a>05 拿到目标方法的详细信息</h4><p>从 JoinPoint 对象中可以拿到方法的详细信息，<code>joinPoint.getArgs()</code>，<code>joinPoint.getSignature()</code></p>
<p>也可以接收异常和返回值，需要自己传入对应的参数Object result、Exception exception，并且要告诉Spring指定返回值<strong>returning</strong> ，指定异常<strong>throwing</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行前</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+ joinPoint.getSignature().getName()+<span class="string">&quot;】方法开始执行了，用的参数列表是【&quot;</span>+ Arrays.asList(joinPoint.getArgs())+<span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行后</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint,Object result)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+ joinPoint.getSignature().getName()+<span class="string">&quot;】方法执行完成了，执行结果是【&quot;</span>+ result +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出现异常</span></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">(JoinPoint joinPoint,Exception exception)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;】方法出现异常了,异常信息是：&quot;</span>+exception);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法结束</span></span><br><span class="line"><span class="meta">@After(&quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;】方法最终结束了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="06-抽取可重用的切入点表达式"><a href="#06-抽取可重用的切入点表达式" class="headerlink" title="06 抽取可重用的切入点表达式"></a>06 抽取可重用的切入点表达式</h4><p>自定义一个没有返回值和参数的方法，加上<code>@Pointcut</code>注解，声明切入点表达式，别的地方可以直接使用其方法名进行引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myPoint</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行前</span></span><br><span class="line"><span class="meta">@Before(&quot;myPoint()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="07-环绕通知"><a href="#07-环绕通知" class="headerlink" title="07 环绕通知"></a>07 环绕通知</h4><p><code>@Around</code>：就是利用反射调用目标方法，可以在其中定义环绕前置、环绕返回、环绕异常和环绕后置通知。<strong>环绕通知是优先于普通通知执行的。</strong></p>
<p>环绕通知只作用在自己的切面内。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;myPoint()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    Object[] args = point.getArgs();</span><br><span class="line">    <span class="comment">//获取方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> point.getSignature().getName();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// @Before</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕前置通知】..【&quot;</span> + name + <span class="string">&quot;】方法开始，用的参数列表是&quot;</span> + Arrays.asList(args));</span><br><span class="line">        <span class="comment">//就是利用反射调用目标方法，类似于method.invoke(obj,args)</span></span><br><span class="line">        proceed = point.proceed(args);</span><br><span class="line">        <span class="comment">// @AfterReturning</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕返回通知】..【&quot;</span> + name + <span class="string">&quot;】方法返回，返回值是&quot;</span> + proceed);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// @AfterThrowing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕异常通知】..【&quot;</span> + name + <span class="string">&quot;】方法出现异常，异常信息是&quot;</span> + e);</span><br><span class="line">        <span class="comment">//为了让外界知道这个异常，将其抛出</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// @After</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕后置通知】..【&quot;</span> + name + <span class="string">&quot;】方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射调用后的返回值也一定返回出去</span></span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【环绕前置通知】..【add】方法开始，用的参数列表是[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">【add】方法开始执行了，用的参数列表是【[<span class="number">1</span>, <span class="number">2</span>]】</span><br><span class="line">【环绕返回通知】..【add】方法返回，返回值是<span class="number">3</span></span><br><span class="line">【环绕后置通知】..【add】方法结束</span><br><span class="line">【add】方法最终结束了</span><br><span class="line">【add】方法执行完成了，执行结果是【<span class="number">3</span>】</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行顺序：</p>
<p>(环绕前置 —&gt; 普通前置) —&gt; 目标方法执行  —&gt; 环绕正常返回&#x2F;出现异常  —&gt;  环绕后置 —&gt;  普通后置  —&gt; 普通返回或者异常</p>
</blockquote>
<h4 id="08-多切面情况"><a href="#08-多切面情况" class="headerlink" title="08 多切面情况"></a>08 多切面情况</h4><p>执行顺序按照类名顺序，前置1–&gt;前置2–&gt;目标方法 –&gt;后置2–&gt;后置1</p>
<p><img src="http://image.kongxiao.top/image-20200615165029298.png" alt="image-20200615165029298"></p>
<p>在切面上使用<code>@Order</code>注解，给一个int值，值越小，优先级越高</p>
<h3 id="2-4-配置文件实现"><a href="#2-4-配置文件实现" class="headerlink" title="2.4 配置文件实现"></a>2.4 配置文件实现</h3><p>在容器中注册 bean，相当于<code>@component</code></p>
<p><code>&lt;aop:config&gt;</code>：进行配置。</p>
<p><code>&lt;aop:aspect ref=&quot;...&quot;&gt;：</code>指定谁是切面类，相当于<code>@Aspet</code></p>
<p><code>&lt;aop:pointcutid=&quot;...&quot; expression=&quot;...&quot;</code>：指定切入点和切入表达式</p>
<p><code>&lt;aop:before method=&quot;...&quot; pointcut-ref=&quot;...&quot; &gt;</code>：指定怎么切入，切在哪里，相当于<code>@Before</code>等，该标签中也可以指定返回值、异常等信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.aop.LogUtils&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCalculator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.aop.MyCalculator&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面aspect，ref:要引用的类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logUtils&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public int com.xiao.aop.MyCalculator.*(int,int))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--前置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--返回--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--异常--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;exception&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--后置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;end&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>Spring</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC (一) - SpringMVC 执行流程、注解快速开发接口</title>
    <url>/2021/06/15/SpringMVC(%E4%B8%80)-SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E3%80%81%E6%B3%A8%E8%A7%A3%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>内容包括：</p>
<ol>
<li><p>SpringMVC 执行流程</p>
</li>
<li><p>注解开发<code>@controller</code>，<code>@RequestMapping</code></p>
</li>
<li><p>请求参数处理</p>
</li>
<li><p>数据输出处理</p>
</li>
<li><p>视图解析</p>
</li>
</ol>
<p>参考视频：</p>
<p>B站 尚硅谷雷丰阳大神的 Spring、Spring MVC、MyBatis 课程 <a href="https://www.bilibili.com/video/BV1d4411g7tv">https://www.bilibili.com/video/BV1d4411g7tv</a></p>
<h2 id="1-SpringMVC-概述"><a href="#1-SpringMVC-概述" class="headerlink" title="1. SpringMVC 概述"></a>1. SpringMVC 概述</h2><p>MVC：</p>
<ul>
<li><strong>Model（模型）：</strong>数据模型，提供要展示的数据，：Value Object（数据 Dao） 和 服务层（行为Service），提供数据和业务。</li>
<li><strong>View（视图）：</strong>负责进行模型的展示，即用户界面</li>
<li><strong>Controller（控制器）：</strong>调度员，接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。</li>
</ul>
<p>SpringMVC 的特点：</p>
<ul>
<li>Spring 为展现层提供的基于 MVC 设计理念的 Web 框架</li>
<li>SpirngMVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口</li>
<li>支持 REST 风格的 URL 请求</li>
<li>采用了松散耦合可拔插组件结构，扩展性和灵活性</li>
</ul>
<h2 id="2-HelloWorld"><a href="#2-HelloWorld" class="headerlink" title="2. HelloWorld"></a>2. HelloWorld</h2><p><strong>1) 导入依赖</strong></p>
<p>spring-webmvc 的 maven 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2)  配置 web.xml  ， 注册 DispatcherServlet</strong></p>
<p><code>DispatcherServlet</code>：前端控制器，负责请求分发。</p>
<p>要绑定 Spring 的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet,请求分发器（前端控制器）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定Spring配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别为1，即服务器启动后就启动--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--值越小优先级越高，越先创建对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  拦截所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 拦截所有的请求；（包括.jsp，一旦拦截jsp页面就不能显示了）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3) Spring配置文件</strong></p>
<p>Spring 的配置文件 Springmvc-config.xml。</p>
<ol>
<li>开启了包扫描，让指定包下的注解生效，由 IOC 容器统一管理</li>
<li>配置了视图解析器<code>InternalResourceViewResolver</code>，这里可以设置前缀和后缀，拼接视图名字</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启包扫描,让指定包下的注解生效,由IOC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器，拼接视图名字，找到对应的视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4) 编写 controller 层</strong></p>
<p>HelloController 类：</p>
<ol>
<li><p>@Controller：告诉 Spirng 这是一个控制器，交给 IOC 容器管理</p>
</li>
<li><p>@RequestMapping(“&#x2F;hello01”)：&#x2F; 表示项目地址，当请求项目中的 hello01 时，返回一个 &#x2F;WEB-INF&#x2F;page&#x2F;success.jsp 页面给前端</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求成功页面&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toError</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求错误页面&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5) 编写跳转的 jsp 页面</strong></p>
<p>项目首页 index.jsp，两个超链接，分别发出 hello01 和 hello02 的请求</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=<span class="string">&quot;hello01&quot;</span>&gt;点这里去成功页面&lt;/a&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;hello02&quot;</span>&gt;点这里去失败页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>成功页面 success.jsp 和失败页面 error.jsp，要注意文件的路径 &#x2F;WEB-INF&#x2F;page&#x2F;..jsp，与上面的保持一致</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;这里是成功页面&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;错误页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;这里是错误页面&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>6) 访问</strong></p>
<p>启动项目：</p>
<p><img src="http://image.kongxiao.top/20220531231459.png" alt="image-20200616123925928"></p>
<p>点击去成功页面，可以看到发出了 &#x2F;hello01 请求，页面转发到 &#x2F;WEB-INF&#x2F;page&#x2F;success.jsp，控制台输出了请求成功页面。</p>
<p><img src="http://image.kongxiao.top/20220531231504.png" alt="image-20200616123951757"></p>
<h2 id="3-实现细节"><a href="#3-实现细节" class="headerlink" title="3. 实现细节"></a>3. 实现细节</h2><h3 id="3-1-运行流程"><a href="#3-1-运行流程" class="headerlink" title="3.1 运行流程"></a>3.1 运行流程</h3><ol>
<li><p>客户端点击链接发送请求：<a href="http://localhost:8080/hello01%EF%BC%9B">http://localhost:8080/hello01；</a></p>
</li>
<li><p>来到 tomcat 服务器；</p>
</li>
<li><p>SpringMVC 的前端控制器收到所有请求；</p>
</li>
<li><p>看请求地址和 @RequestMapping 标注的哪个匹配，来找到底使用哪个类的哪个方法来处理；</p>
</li>
<li><p>前端控制器找到目标处理器类和目标方法，直接利用反射执行目标方法；</p>
</li>
<li><p>方法执行完后有一个返回值，SpringMVC 认为这个返回值就是要去的页面地址；</p>
</li>
<li><p>拿到方法返回值后，视图解析器进行拼串得到完整的页面地址</p>
</li>
<li><p>得到页面地址，前端控制器帮我们转发到页面</p>
</li>
</ol>
<h3 id="3-2-RequestMapping"><a href="#3-2-RequestMapping" class="headerlink" title="3.2 @RequestMapping"></a>3.2 @RequestMapping</h3><h4 id="01-标注在方法上"><a href="#01-标注在方法上" class="headerlink" title="01 标注在方法上"></a>01 标注在方法上</h4><p>告诉 SpringMVC 这个方法用来处理什么请求。</p>
<p><code>@RequestMapping(&quot;/hello01&quot;)</code>中的 <code>/</code>可以省略，就是默认从当前项目下开始。</p>
<h4 id="02-标注在类上"><a href="#02-标注在类上" class="headerlink" title="02 标注在类上"></a>02 标注在类上</h4><p>表示为当前类中的所有方法的请求地址，指定一个基准路径。toSuccess() 方法处理的请求路径是<code>/haha/hello01</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/haha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求成功页面&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="03-规定请求方式"><a href="#03-规定请求方式" class="headerlink" title="03 规定请求方式"></a>03 规定请求方式</h4><p>method 属性规定请求方式，默认是所求请求方式都行。method &#x3D; RequestMethod.GET，method &#x3D; RequestMethod.POST。</p>
<p>如果方法不匹配会报：<strong>HTTP Status 405 错误 – 方法不被允许</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello01&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求成功页面&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>组合用法</strong></p>
<ul>
<li>@GetMapping  等价于 @RequestMapping(method &#x3D;RequestMethod.GET) </li>
<li>@PostMapping</li>
<li>@PutMapping</li>
<li>@DeleteMapping</li>
<li>@PatchMapping</li>
</ul>
<h4 id="04-规定请求参数"><a href="#04-规定请求参数" class="headerlink" title="04 规定请求参数"></a>04 规定请求参数</h4><p>params 属性规定请求参数。会造成错误：<strong>HTTP Status 400 – 错误的请求</strong></p>
<p>不携带该参数，表示参数值为null；携带了不给值表示参数值是空串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须携带username参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello03&quot;,params =&#123;&quot;username&quot;&#125;)</span></span><br><span class="line"><span class="comment">//必须不携带username参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello03&quot;,params =&#123;&quot;！username&quot;&#125;)</span></span><br><span class="line"><span class="comment">//必须携带username参数，且值必须为123</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello03&quot;,params =&#123;&quot;username=123&quot;&#125;)</span></span><br><span class="line"><span class="comment">//username参数值必须不为123，不携带或者携带了不是123都行</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello03&quot;,params =&#123;&quot;username=！123&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="05-规定请求头"><a href="#05-规定请求头" class="headerlink" title="05 规定请求头"></a>05 规定请求头</h4><p>headers 属性规定请求头。其中 User-Agent：浏览器信息</p>
<p>谷歌浏览器：User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.97 Safari&#x2F;537.3</p>
<h4 id="06-Ant-风格URL"><a href="#06-Ant-风格URL" class="headerlink" title="06 Ant 风格URL"></a>06 Ant 风格URL</h4><p>URL 地址可以写模糊的通配符，模糊和精确多个匹配情况下精确优先。</p>
<p>？：<strong>替代任意一个字符</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping( &quot;/hello0?&quot;)</span> /</span><br></pre></td></tr></table></figure>

<p><em>：*<em>替代任意多个字符或一层路径</em></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping( &quot;/hello0*&quot;)</span>   <span class="comment">//任意多个字符</span></span><br><span class="line"><span class="meta">@RequestMapping( &quot;/a/*/hello01&quot;)</span>  <span class="comment">//一层路径</span></span><br></pre></td></tr></table></figure>

<p>**：替代任意多层路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping( &quot;/a/*/*/hello01&quot;)</span>  <span class="comment">//任意多层路径</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-Spring-配置文件的默认位置"><a href="#3-3-Spring-配置文件的默认位置" class="headerlink" title="3.3 Spring 配置文件的默认位置"></a>3.3 Spring 配置文件的默认位置</h3><p>默认位置是 &#x2F;WEB-INF&#x2F;xxx-servlet.xml，其中 xxx 是自己在 web.xml 文件中配置的 servlet-name 属性。</p>
<p>当然也可以手动指定文件位置。</p>
<h3 id="3-4-url-pattern"><a href="#3-4-url-pattern" class="headerlink" title="3.4 url-pattern"></a>3.4 url-pattern</h3><p>&#x2F;  拦截所有的请求，不拦截 jsp</p>
<p>&#x2F;* <strong>拦截所有的请求</strong>，包括 *.jsp，一旦拦截 jsp 页面就不能显示了。. jsp 是 tomcat 处理的事情</p>
<p>看 Tomcat 的配置文件 web.xml中，有 DefaultServlet和JspServlet，</p>
<ul>
<li><p>DefaultServlet 是 Tomcat中处理静态资源的，Tomcat 会在服务器下找到这个资源并返回。如果我们自己配置<code> url-pattern=/</code>，相当于禁用了 Tomcat 服务器中的 DefaultServlet，这样如果请求静态资源，就会去找前端控制器找 @RequestMapping，<strong>这样静态资源就不能访问了</strong>。解决办法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告诉Spring MVC自己映射的请求就自己处理，不能处理的请求直接交给tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启MVC注解驱动模式，保证动态请求和静态请求都能访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JspServlet，保证了 jsp 可以正常访问</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-REST风格"><a href="#4-REST风格" class="headerlink" title="4. REST风格"></a>4. REST风格</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>REST 就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。其强调HTTP应当以资源为中心，并且规范了 URI 的风格；规范了HTTP 请求动作（GET&#x2F;PUT&#x2F;POST&#x2F;DELETE&#x2F;HEAD&#x2F;OPTIONS）的使用，具有对应的语义。</p>
<ul>
<li>资源（Resource）：网络上的一个实体，每种资源对应一个特定的URI，即URI为每个资源的独一无二的识别符；</li>
<li>表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层。比如 txt、HTML、XML、JSON格式等；</li>
<li>状态转化（State Transfer）：每发出一个请求，就代表一次客户端和服务器的一次交互过程。GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</li>
</ul>
<p>在参数上使用  @PathVariable 注解，可以获取到请求路径上的值，也可以写多个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello04/username/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-页面上发出-PUT-请求"><a href="#4-2-页面上发出-PUT-请求" class="headerlink" title="4.2 页面上发出 PUT 请求"></a>4.2 页面上发出 PUT 请求</h3><p><strong>对一个资源的增删改查用请求方式来区分：</strong></p>
<ul>
<li><p>&#x2F;book&#x2F;1 GET：查询1号图书</p>
</li>
<li><p>&#x2F;book&#x2F;1 DELETE：删除1号图书</p>
</li>
<li><p>&#x2F;book&#x2F;1 PUT：修改1号图书</p>
</li>
<li><p>&#x2F;book  POST：新增图书</p>
</li>
</ul>
<p>页面上只能发出 GET 请求和 POST 请求。将 POST 请求转化为 put 或者 delete 请求的步骤：</p>
<ol>
<li><p>把前端发送方式改为 post 。</p>
</li>
<li><p>在 web.xml 中配置一个filter：HiddenHttpMethodFilter 过滤器</p>
</li>
<li><p>必须携带一个键值对，key&#x3D;_method, value&#x3D;put 或者 delete</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个过滤器的作用 ：就是将post请求转化为put或者delete请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;hello03&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;delete&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>高版本 Tomcat 会出现问题：JSPs only permit GET POST or HEAD，在页面上加上异常处理即可</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-请求参数处理"><a href="#5-请求参数处理" class="headerlink" title="5 请求参数处理"></a>5 请求参数处理</h2><h3 id="5-1-传入参数"><a href="#5-1-传入参数" class="headerlink" title="5.1 传入参数"></a>5.1 传入参数</h3><p><strong>1. 如果提交的参数名称和处理方法的参数名一致，则无需处理，直接使用</strong></p>
<p>提交数据 : <a href="http://localhost:8080/hello05?username=zhangsan%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BC%9A%E8%BE%93%E5%87%BA">http://localhost:8080/hello05?username=zhangsan，控制台会输出</a> zhangsan</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test03</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 提交的参数名称和处理方法的参数名不一致，使用 @RequestParam 注解</strong></p>
<p>注解<code>@RequestParam</code>可以获取请求参数，默认必须携带该参数，也可以指定<code>required=false</code>，和没携带情况下的默认值<code>defaultValue</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test03</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required = false, defaultValue =&quot;hehe&quot; )</span> String name)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有另外两个注解：</p>
<ul>
<li><p><code>@RequestHeader </code>：获取请求头中的信息，比如 User-Agent：浏览器信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test03</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot; )</span> String name)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@CookieValue</code>：获取某个 cookie 的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test03</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot; )</span> String name)</span> &#123;</span><br><span class="line">     System.out.println(name);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2-传入一个对象"><a href="#5-2-传入一个对象" class="headerlink" title="5.2 传入一个对象"></a>5.2 传入一个对象</h3><p>传 入POJO，SpringMVC 会自动封装，<strong>提交的表单域参数必须和对象的属性名一致，否则就 是null，请求没有携带的字段，值也会是 null。</strong>同时也还可以级联封装。</p>
<p>新建两个对象User和Address：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端请求：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;hello06&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名： &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    年龄： &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    地址名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;address.name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    地址编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;address.num&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>后端通过对象名也能拿到对象的值，没有对应的值则为 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test03</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-乱码问题"><a href="#5-3-乱码问题" class="headerlink" title="5.3 乱码问题"></a>5.3 乱码问题</h3><p>一定要放在在其他 Filter 前面。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-传入原生-ServletAPI"><a href="#5-4-传入原生-ServletAPI" class="headerlink" title="5.4 传入原生 ServletAPI"></a>5.4 传入原生 ServletAPI</h3><p>处理方法还可以传入原生的 ServletAPI：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello07&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test04</span><span class="params">(HttpServletRequest request, HttpSession session)</span> &#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;sessionParam&quot;</span>,<span class="string">&quot;我是session域中的值&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;reqParam&quot;</span>,<span class="string">&quot;我是request域中的值&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过EL表达式获取到值，<code>$&#123;requestScope.reqParam&#125;</code>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;这里是成功页面&lt;/h1&gt;</span><br><span class="line">$&#123;requestScope.reqParam&#125;</span><br><span class="line">$&#123;sessionScope.sessionParam&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-数据输出"><a href="#6-数据输出" class="headerlink" title="6. 数据输出"></a>6. 数据输出</h2><h3 id="6-1-Map、Model、ModerMap"><a href="#6-1-Map、Model、ModerMap" class="headerlink" title="6.1 Map、Model、ModerMap"></a>6.1 Map、Model、ModerMap</h3><p>实际上都是调用的 BindingAwareModelMap (隐含模型)，将数据放在<strong>请求域 (requestScope) 中</strong>进行转发，用EL表达式可以取出对应的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test01</span> <span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">pageScope:  $&#123;pageScope.msg&#125;</span><br><span class="line"></span><br><span class="line">requestScope :   $&#123;requestScope.msg&#125;</span><br><span class="line"></span><br><span class="line">sessionScope:     $&#123;sessionScope.msg&#125;</span><br><span class="line"></span><br><span class="line">applicationScope:   $&#123;applicationScope.msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>【补充】jsp 的4个作用域 pageScope、requestScope、sessionScope、applicationScope 的区别：</strong></p>
<ul>
<li><p>**page **指当前页面有效。在一个jsp页面里有效</p>
</li>
<li><p><strong>request</strong> 指在一次请求的全过程中有效，即从 http 请求到服务器处理结束，返回响应的整个过程，存放在**HttpServletRequest **对象中。在这个过程中可以使用 forward 方式跳转多个 jsp。在这些页面里都可以使用这个变量。</p>
</li>
<li><p><strong>Session</strong> 是用户全局变量，在整个会话期间都有效。只要页面不关闭就一直有效（或者直到用户一直未活动导致会话过期，默认 session 过期时间为 30 分钟，或调用 HttpSession的invalidate() 方法。存放在HttpSession 对象中 </p>
</li>
<li><p>**application **是程序全局变量，对每个用户每个页面都有效。存放在 ServletContext 对象中。它的存活时间是最长的，如果不进行手工删除，它们就一直可以使用</p>
</li>
</ul>
<h3 id="6-2-ModerAndView"><a href="#6-2-ModerAndView" class="headerlink" title="6.2 ModerAndView"></a>6.2 ModerAndView</h3><p>返回一个模型视图对象 ModerAndView， 既包含视图信息(页面地址)，也包含模型数据(给页面带的数据)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test04</span> <span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//新建一个模型视图对象，也可以直接传入名字</span></span><br><span class="line">   <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;msg&quot;,HelloWorld!);</span></span><br><span class="line">   mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">   <span class="comment">//设置视图的名字，相当于之前的return &quot;success&quot;;</span></span><br><span class="line">   mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-SessionAttributes"><a href="#6-3-SessionAttributes" class="headerlink" title="6.3 @SessionAttributes"></a>6.3 @SessionAttributes</h3><p>给 Session 域中携带数据使用注解<code> @SessionAttributes</code>，只能标在类上，value 属性指定 key，type 可以指定保存类型。这个注解会引发异常<strong>一般不用，就用原生API</strong></p>
<p><code>@SessionAttributes(value = &quot;msg&quot;)</code>：表示给 BindingAwareModelMap 中保存 key 为 msg 的数据时，在session 中也保存一份；</p>
<p><code>@SessionAttributes(types = &#123;String.class&#125;)</code>：表示只要保存 String 类型的数据时，给 session 中也放一份。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示给BindingAwareModelMap中保存key为msg的数据时，在session中也保存一份</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &quot;msg&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">outputController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test01</span> <span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-ModelAttribute"><a href="#6-4-ModelAttribute" class="headerlink" title="6.4  @ModelAttribute"></a>6.4  @ModelAttribute</h3><p>方法入参标注该注解后，入参的对象就会放到数据模型中，会提前于控制方法先执行，并发方法允许的结果放在隐含模型中。</p>
<p>处理这样的场景：</p>
<p>前端传来数据，SpringMVC 自动封装成对象，实际上是创建了一个对象，每个属性都有默认值，然后将请求参数中对应是属性设置过来，但是如果没有的值将会是 null，如果拿着这个数据去更新数据库，会造成其他字段也变为 null。因此希望使用<code>@ModelAttribute </code>，会在目标方法执行前先做一些处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">myModelAttribute</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;modelAttribute方法执行了&quot;</span>);</span><br><span class="line">    <span class="comment">//提前做一些处理</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//保存一个数据到BindingAwareModelMap中，目标方法可以从中取出来</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test05</span><span class="params">(<span class="meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法执行了&quot;</span>);</span><br><span class="line">    <span class="comment">//在参数上加上@ModelAttribute注解，可以拿到提前存入的数据</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-ResponseBody"><a href="#6-5-ResponseBody" class="headerlink" title="6.5 @ResponseBody"></a>6.5 @ResponseBody</h3><p>在控制器类中，在方法上使用 <strong>@ResponseBody</strong> 注解可以不走视图解析器，如果返回值是字符串，那么直接将字符串写到客户端；如果是一个对象，会将对象转化为 JSON 串，然后写到客户端。</p>
<p>或者在类上加  **@RestController **注解，可以让类中的所有方法都不走视图解析器，直接返回 JSON 字符串</p>
<h2 id="7-再谈-SpringMVC-执行流程"><a href="#7-再谈-SpringMVC-执行流程" class="headerlink" title="7. 再谈 SpringMVC 执行流程"></a>7. 再谈 SpringMVC 执行流程</h2><h3 id="7-1-前端控制器DisatcherServlet"><a href="#7-1-前端控制器DisatcherServlet" class="headerlink" title="7.1 前端控制器DisatcherServlet"></a>7.1 前端控制器DisatcherServlet</h3><p><img src="http://image.kongxiao.top/20220531231516.png" alt="image-20200616233004463"></p>
<h3 id="7-2-SpringMVC-执行流程"><a href="#7-2-SpringMVC-执行流程" class="headerlink" title="7.2 SpringMVC 执行流程"></a>7.2 SpringMVC 执行流程</h3><ol>
<li><p>用户发出请求，DispatcherServlet 接收请求并拦截请求。</p>
</li>
<li><p>调用 doDispatch() 方法进行处理：</p>
<p>1）getHandler()：根据当前请求地址，在 HandlerMapping (处理器映射器)中找到能处理这个请求的目标处理器类(处理器)；</p>
<p>2）getHandlerAdapter()：根据当前处理器类找到当前类的 HandlerAdapter(处理器适配器)</p>
<p>3）使用刚才获取到的适配器 (AnnotationMethodHandlerAdapter) 执行目标方法；</p>
<p>4）目标方法执行后，会返回一个 ModerAndView 对象</p>
<p>5）根据 ModerAndView的信息转发到具体页面，并可以在请求域中取出 ModerAndView 中的模型数据</p>
</li>
</ol>
<p>HandlerMapping 为处理器映射器，保存了每一个处理器能处理哪些请求的映射信息，handlerMap</p>
<p>HandlerAdapter 为处理器适配器，能解析注解方法的适配器，其按照特定的规则去执行 Handler</p>
<p><img src="http://image.kongxiao.top/20220531231521.png" alt="image-20200616233302627"></p>
<h3 id="7-3-SpringMVC-的九大组件"><a href="#7-3-SpringMVC-的九大组件" class="headerlink" title="7.3 SpringMVC 的九大组件"></a>7.3 SpringMVC 的九大组件</h3><ul>
<li>multipartResolver：文件上传解析器</li>
<li>localeResolver：区域信息解析器，和国际化有关</li>
<li>themeResolver：主题解析器</li>
<li>handlerMappings：handler 的映射器</li>
<li>handlerAdapters：handler 的适配器</li>
<li>handlerExceptionResolvers：异常解析功能</li>
<li>viewNameTranslator：请求到视图名的转换器</li>
<li>flashMapManager：SpringMVC 中允许重定向携带数据的功能</li>
<li>viewResolvers：视图解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br></pre></td></tr></table></figure>

<h2 id="8-视图解析"><a href="#8-视图解析" class="headerlink" title="8. 视图解析"></a>8. 视图解析</h2><p>通过 SpringMVC 来实现转发和重定向。</p>
<ul>
<li>直接 return “success”，会走视图解析器进行拼串</li>
<li>转发：return “forward:&#x2F;succes.jsp”；直接写绝对路径，&#x2F;表示当前项目下，不走视图解析器</li>
<li>重定向：return “redirect:&#x2F;success.jsp”；不走视图解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello01&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="comment">//会走视图解析器</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello02&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="comment">//不走视图解析器</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/success.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello03&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="comment">//不走视图解析器</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/success.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用原生的 ServletAPI 时要注意，**&#x2F;路径需要加上项目名才能成功**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsIOException &#123;	</span><br><span class="line">     <span class="comment">//重定向</span></span><br><span class="line">     resp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> throwsException &#123;</span><br><span class="line">     <span class="comment">//转发</span></span><br><span class="line">     req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">     req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>mvc:view-controller</code>：直接将请求映射到某个页面，不需要写方法了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toLogin&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;login&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启MVC注解驱动模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis (二) - 核心配置文件、SQL 映射文件</title>
    <url>/2021/06/01/MyBatis(%E4%BA%8C)-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E3%80%81SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>MyBatis 学习笔记 (二)， 内容包括：</p>
<ol>
<li>MyBatis 入门案例</li>
<li>MyBatis 核心配置文件结构说明</li>
<li>SQL 映射文件结构说明</li>
<li>查询结果封装 resultMap</li>
</ol>
<p>学习视频：尚硅谷雷丰阳老师 MyBatis <a href="https://www.bilibili.com/video/BV1bb411A7bD">https://www.bilibili.com/video/BV1bb411A7bD</a></p>
<h2 id="1-MyBatis-简介"><a href="#1-MyBatis-简介" class="headerlink" title="1. MyBatis 简介"></a>1. MyBatis 简介</h2><p>连接数据库的方法：</p>
<p><strong>工具：</strong> JDBC → Dbutils(QueryRunner) → JdbcTemplate</p>
<p><img src="http://image.kongxiao.top/image-20200607234736779.png" alt="image-20200607234736779"></p>
<p><strong>框架：</strong> 整体解决方案</p>
<p><strong>Hibernate：</strong> 全自动全映射 ORM（Object Relation Mapping）框架，旨在消除 SQL</p>
<p><img src="http://image.kongxiao.top/image-20200607234852037.png" alt="image-20200607234852037"></p>
<p>缺点：</p>
<ol>
<li><p>长难复杂 SQL，对于 Hibernate 而言处理也不容易</p>
</li>
<li><p>内部自动生产的 SQL，不容易做特殊优化。对开发人员而言，核心 SQL 还是需要自己优化 ( <strong>HQL</strong> )  </p>
</li>
<li><p>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难，导致数据库性能下降</p>
</li>
</ol>
<p><strong>SQL 和 Java编码分开，功能边界清晰，一个专注业务、一个专注数据。</strong></p>
<p><strong>MyBatis：</strong> 半自动，轻量级的框架，SQL 语句提取到配置文件中编写</p>
<p><img src="http://image.kongxiao.top/image-20200608225144698.png" alt="image-20200608225144698"></p>
<ul>
<li><p>MyBatis 是一个半自动化的持久化层框架，支持自定义 SQL、存储过程以及高级映射。</p>
</li>
<li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>
</li>
<li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO映射成数据库中的记录。</p>
</li>
<li><p>项目地址：<a href="https://github.com/mybatis/mybatis-3/">https://github.com/mybatis/mybatis-3/</a></p>
</li>
<li><p>Maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>官方文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h2 id="2-MyBatis-入门案例"><a href="#2-MyBatis-入门案例" class="headerlink" title="2. MyBatis 入门案例"></a>2. MyBatis 入门案例</h2><p>核心步骤：</p>
<ol>
<li><p>数据库表与对应的<strong>实体类 Employee</strong> 、<strong>接口 EmployeeMapper;</strong> </p>
</li>
<li><p>全局配置文件(核心配置文件) <strong>mybatis-config.xml;</strong></p>
</li>
<li><p>根据全局配置文件创建 <strong>SqlSessionFactory</strong> 对象：</p>
<p><code>SqlSessionFactoryBulid → SqlSessionFactory → SqlSession</code></p>
</li>
<li><p>SQL 映射文件 <strong>EmployeeMapper.xml</strong>，配置了每一个 SQL，以及 SQL 的封装规则，<strong>需要在全局配置文件中注册 SQL 映射文件；</strong></p>
</li>
<li><p>由 sqlSession 对象实例执行 SQL 语句，或者获取接口的代理对象执行</p>
</li>
</ol>
<h3 id="2-1-数据库环境"><a href="#2-1-数据库环境" class="headerlink" title="2.1 数据库环境"></a>2.1 数据库环境</h3><p>创建 tbl_employee 表并插入三条数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_employee(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  </span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_employee <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,&quot;zhangsan&quot;,<span class="number">0</span>,&quot;zhangsan@qq.com&quot;),</span><br><span class="line">(<span class="number">2</span>,&quot;lisi&quot;,<span class="number">0</span>,&quot;lisi@163.com&quot;),</span><br><span class="line">(<span class="number">3</span>,&quot;wangwu&quot;,<span class="number">1</span>,&quot;wangwu@126.com&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建实体类"><a href="#2-2-创建实体类" class="headerlink" title="2.2 创建实体类"></a>2.2 创建实体类</h3><ol>
<li>新建一个普通的 Maven 项目；</li>
<li>在 pom.xml 文件中导入 Maven 依赖，包括：<strong>mysql-connector-java，mybatisjuint，log4j</strong></li>
<li>创建与数据库表对应的实体类 Employee，名称与数据库表的字段保持一致。如果不一致查询会出问题，可以用别名解决</li>
</ol>
<ul>
<li>项目依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实体类com.xiao.mybatis.entity.Employee：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName; <span class="comment">//注意，该名称与数据库表的字段名不一致，查询会出现问题，可以用别名解决</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-MyBatis核心配置文件"><a href="#2-3-MyBatis核心配置文件" class="headerlink" title="2.3 MyBatis核心配置文件"></a>2.3 MyBatis核心配置文件</h3><ul>
<li><p>在 resources 目录下编写 mybatis 核心配置文件：mybatis-config.xml</p>
<p>包含信息：数据库连接参数、事务类型、注册映射文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境组，选择默认的环境id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置单个环境并指定id为development--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以同时配置多个环境，但是只能选择一个使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务管理类型，JDBC--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池POOLED--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接池4个参数--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置映射,注册Mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<p>在xml配置文件中，url中的 &amp; 符号需要写成 <code>&amp;amp;</code></p>
</blockquote>
<h3 id="2-4-sql-映射文件"><a href="#2-4-sql-映射文件" class="headerlink" title="2.4 sql 映射文件"></a>2.4 sql 映射文件</h3><p>在 resources 目录下表编写 sql 映射文件：EmployeeMapper.xml</p>
<p>sql 语句的参数用 # 获取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace:名称空间，可以绑定一个Mapper接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编写sql语句--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id：唯一标识，如果有Mapper接口文件，需要对应其中的方法名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultType：对应返回结果类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#&#123;id&#125;：从传递过来的参数中取出id值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiao.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select  * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><p>根据全局配置文件创建 <strong>SqlSessionFactory</strong> 对象，</p>
<p><code>SqlSessionFactoryBulid → SqlSessionFactory → SqlSession</code>。由 sqlSession 对象实例执行 sql 语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceUrl</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resourceUrl);</span><br><span class="line">        <span class="comment">// SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">// 由SqlSession工厂获得SqlSession对象，使用其进行增删改查</span></span><br><span class="line">        <span class="comment">// 一个sqlSession就是和数据库的一次会话，使用完之后需要关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">//sqlSession，直接执行已经映射的sql语句</span></span><br><span class="line">            <span class="comment">//selectOne()中两个参数：sql的唯一标识(对应sql映射文件中的namespace.id)和执行sql需要的参数</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;com.xiao.mybatis.mapper.EmployeeMapper.selectEmp&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<blockquote>
<p>Employee{id&#x3D;1, lastName&#x3D;’null’, email&#x3D;‘<a href="mailto:&#x7a;&#104;&#x61;&#x6e;&#103;&#115;&#97;&#110;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x7a;&#104;&#x61;&#x6e;&#103;&#115;&#97;&#110;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a>‘, gender&#x3D;’0’}</p>
</blockquote>
<p>由于实体类的成员变量名和字段名不一致，因此 lastName 查询结果为 null，可以在 sql 语句中取别名解决，</p>
<p>也可以在 sql 映射文件中配置，后面会讲到。</p>
<p>修改sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  id,last_name lastName,gender,email <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<blockquote>
<p>Employee{id&#x3D;1, lastName&#x3D;’zhansgan’, email&#x3D;‘<a href="mailto:&#x7a;&#104;&#x61;&#x6e;&#103;&#x73;&#97;&#x6e;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#x7a;&#104;&#x61;&#x6e;&#103;&#x73;&#97;&#x6e;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a>‘, gender&#x3D;’0’}</p>
</blockquote>
<h3 id="2-6-接口文件"><a href="#2-6-接口文件" class="headerlink" title="2.6 接口文件"></a>2.6 接口文件</h3><p>一种更有效的方法：创建接口文件 com.xiao.mybatis.mapper.EmployeeMapper 与 sql 映射文件绑定，在接口文件中定义方法，可以声明操作的返回值和参数。</p>
<p>注意：</p>
<ol>
<li>sql 映射文件中的 namesapce 要与对应的接口文件全路径名一致</li>
<li>sql 映射文件中的 sql 语句标签中的 id 要与对应的接口文件中的方法名一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个查询方法</span></span><br><span class="line">    Employee <span class="title function_">selectEmp</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">    <span class="comment">//获得接口文件的代理对象，执行方法</span></span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">    System.out.println(employeeMapper.selectEmp(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-几个重要类的说明"><a href="#3-几个重要类的说明" class="headerlink" title="3. 几个重要类的说明"></a>3. 几个重要类的说明</h2><h3 id="3-1-SqlSessionFactoryBuilder"><a href="#3-1-SqlSessionFactoryBuilder" class="headerlink" title="3.1 SqlSessionFactoryBuilder"></a>3.1 SqlSessionFactoryBuilder</h3><ul>
<li><p>构造器 SqlSessionFactoryBuilder ，可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p>
</li>
<li><p>方法： <code>build(InputStream in)</code></p>
</li>
</ul>
<h3 id="3-2-SqlSessionFactory"><a href="#3-2-SqlSessionFactory" class="headerlink" title="3.2 SqlSessionFactory"></a>3.2 SqlSessionFactory</h3><ul>
<li>SqlSession工厂，每个基于 MyBatis 的应用都以一个 SqlSessionFactory 的实例为核心，由SqlSessionFactoryBuilder 类创建。</li>
<li>SqlSessionFactory 类可以用于创建  SqlSession 类，方法：<code>openSession()</code>,传入参数 true 可以设置为自动提交事务。</li>
</ul>
<h3 id="3-3-SqlSession"><a href="#3-3-SqlSession" class="headerlink" title="3.3 SqlSession"></a>3.3 SqlSession</h3><ul>
<li>SqlSession 代表和数据库的一次会话，用完必须关闭，是非线程安全的。可以从 SqlSessionFactory 中获得 SqlSession 的实例；</li>
<li>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法，可以通过 SqlSession 实例来获得映射器接口的代理对象，即接口和xml文件进行绑定。方法：<code>getMapper()</code>，需要传入 mapper 接口的 class 类型参数UserDao.class</li>
</ul>
<h3 id="3-4-作用域（Scope）和生命周期"><a href="#3-4-作用域（Scope）和生命周期" class="headerlink" title="3.4 作用域（Scope）和生命周期"></a>3.4 作用域（Scope）和生命周期</h3><ul>
<li><p><strong>SqlSessionFactoryBuilder：</strong></p>
<p>可以理解为数据库连接池对象，一旦创建了 SqlSessionFactory，就不再需要它了，因此最佳作用域是方法作用域（也就是局部方法变量）；</p>
</li>
<li><p><strong>SqlSessionFactory：</strong></p>
<p>可以理解为数据库连接对象，一旦被创建就应该在应用的运行期间一直存在，因此 SqlSessionFactory 的最佳作用域是应用作用域。使用<strong>单例模式或者静态单例模式</strong>。</p>
</li>
<li><p><strong>SqlSession：</strong></p>
<p>连接到连接池的一个请求，每个线程都有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</p>
<p>为了确保每次都能执行关闭操作，把关闭操作放到 finally 块中。</p>
</li>
</ul>
<h2 id="4-全局配置文件"><a href="#4-全局配置文件" class="headerlink" title="4. 全局配置文件"></a>4. 全局配置文件</h2><p>约束文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下，必须按顺序配置</p>
<ul>
<li><strong>configuration（配置）</strong><ul>
<li><strong>properties（属性）</strong></li>
<li><strong>settings（设置）</strong></li>
<li><strong>typeAliases（类型别名）</strong></li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li><strong>environments（环境配置）</strong><ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider（数据库厂商标识）</li>
<li><strong>mappers（映射器）</strong></li>
</ul>
</li>
</ul>
<h3 id="4-1-属性（properties）"><a href="#4-1-属性（properties）" class="headerlink" title="4.1 属性（properties）"></a>4.1 属性（properties）</h3><p>通过 properties 属性可以实现引用配置文件，这些属性都是可以外部配置且可动态替换的</p>
<ul>
<li>可以在核心配置文件中配置数据库连接池的 4 个参数，设置好的参数可以在整个配置文件中替换需要动态配置的属性值：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="comment">&lt;!--使用$&#123;name&#125;引用相应的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<ul>
<li><p>也可以引入外部的配置文件，例如编写一个外部的配置文件 db.properties，然后在核心配置文件中引入：</p>
<ul>
<li>resource：引用类路径下的资源</li>
<li>url：引用网络路径或者磁盘路径下的资源</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#外部配置文件</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>核心配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在核心配置文件中引入外部配置文件，然后就可以使用$&#123;name&#125;引用--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>【注意事项】：如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p>
<ul>
<li>首先读取在 properties 元素体内指定的属性。</li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li>
<li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li>
</ul>
<p>因此，<strong>通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</strong></p>
<h3 id="4-2-设置（settings）"><a href="#4-2-设置（settings）" class="headerlink" title="4.2 设置（settings）"></a>4.2 设置（settings）</h3><p>是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p>常用设置：</p>
<ul>
<li>mapUnderscoreToCamelCase：是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn，默认为flase</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>jdbcTypeForNull：当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。默认是 OTHER，但是如果用Oracle数据库，需要改为NULL</li>
<li>autoMappingBehavior：指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套），默认为PARTIAL</li>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。默认是false</li>
<li>aggressiveLazyLoading：开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载。</li>
<li>cacheEnabled：全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。默认为true，配置二级缓存的开关。一级缓存一直是打开的</li>
<li>localCacheScope：MyBatis 的本地缓存机制，默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</li>
</ul>
<h3 id="4-3-类型别名（typeAliases）"><a href="#4-3-类型别名（typeAliases）" class="headerlink" title="4.3 类型别名（typeAliases）"></a>4.3 类型别名（typeAliases）</h3><p>类型别名可为 Java 类型设置一个缩写名字。 仅用于 XML 配置，意在降低冗余的全限定类名书写。别名不区分大小写</p>
<ul>
<li><p>单个类起别名，<code>&lt;typeAlias&gt;</code>标签：</p>
<ul>
<li>type：指定要起别名的类型全类名，默认是类名小写employee(其实不区分大小写)</li>
<li>alias：指定新的别名</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type:指定要起别名的类型全类名，默认是类名小写employee--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alias:指定新的别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.xiao.mybatis.entity.Employee&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;employee&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>批量起别名，用<code>&lt;package&gt;</code>标签，</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xiao.mybatis.entity&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>批量情况下，如果指定包下的子包中有同名的类，会产生冲突，可以使用注解解决：在实体类上注解<code>@Alias</code>，则别名为其注解值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;Emp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见的 Java 类型内建的类型别名。它们都是不区分大小写的，自定义的别名不要与其重复。</p>
<p>基本类型前面加下划线，引用类型首字母小写：</p>
<table>
<thead>
<tr>
<th align="left">别名</th>
<th align="left">映射的类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">_byte</td>
<td align="left">byte</td>
</tr>
<tr>
<td align="left">_long</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">_short</td>
<td align="left">short</td>
</tr>
<tr>
<td align="left">_int</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">_integer</td>
<td align="left">int</td>
</tr>
<tr>
<td align="left">_double</td>
<td align="left">double</td>
</tr>
<tr>
<td align="left">_float</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">_boolean</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">integer</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">Date</td>
</tr>
<tr>
<td align="left">decimal</td>
<td align="left">BigDecimal</td>
</tr>
<tr>
<td align="left">bigdecimal</td>
<td align="left">BigDecimal</td>
</tr>
<tr>
<td align="left">object</td>
<td align="left">Object</td>
</tr>
<tr>
<td align="left">map</td>
<td align="left">Map</td>
</tr>
<tr>
<td align="left">hashmap</td>
<td align="left">HashMap</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">List</td>
</tr>
<tr>
<td align="left">arraylist</td>
<td align="left">ArrayList</td>
</tr>
<tr>
<td align="left">collection</td>
<td align="left">Collection</td>
</tr>
<tr>
<td align="left">iterator</td>
<td align="left">Iterator</td>
</tr>
</tbody></table>
<h3 id="4-4-类型处理器（typeHandlers）"><a href="#4-4-类型处理器（typeHandlers）" class="headerlink" title="4.4 类型处理器（typeHandlers）"></a>4.4 类型处理器（typeHandlers）</h3><p>数据库里的字段类型与Java的数据类型进行映射。</p>
<p>在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。</p>
<h3 id="4-5-插件（plugins）"><a href="#4-5-插件（plugins）" class="headerlink" title="4.5 插件（plugins）"></a>4.5 插件（plugins）</h3><p>MyBatis 允许在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>
<ul>
<li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>参数处理器：ParameterHandler (getParameterObject, setParameters)</li>
<li>ResultSetHandler (handleResultSets, handleOutputParameters)</li>
<li>sql语句处理器：StatementHandler (prepare, parameterize, batch, update, query)</li>
</ul>
<h3 id="4-6-环境配置（environments）"><a href="#4-6-环境配置（environments）" class="headerlink" title="4.6 环境配置（environments）"></a>4.6 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，<strong>可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong> default参数指定使用某种环境。</p>
<ul>
<li><strong>transactionManager：事务管理器</strong>，有两种类型，type&#x3D;”[JDBC|MANAGED]”，默认的事务管理器就是JDBC。也可以自定义事务管理器：实现TransactionFactory接口，type指定为全类名</li>
</ul>
<ul>
<li><strong>dataSource：数据源</strong>，有三种内建的数据源类型， type&#x3D;”[UNPOOLED|POOLED|JNDI]”），也可以自己实现DataSourceFactory接口自定义数据源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">  &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">    &lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;...&quot; value=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;/transactionManager&gt;</span><br><span class="line">    &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">  &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure>

<p>【注意事项】：</p>
<ul>
<li>默认使用的环境 id（比如：default&#x3D;”development”）。</li>
<li>每个 environment 元素定义的环境 id（比如：id&#x3D;”development”）。</li>
<li>事务管理器的配置（比如：type&#x3D;”JDBC”）。</li>
<li>数据源的配置（比如：type&#x3D;”POOLED”）。</li>
</ul>
<h3 id="4-7-数据库厂商标识（databaseIdProvider）"><a href="#4-7-数据库厂商标识（databaseIdProvider）" class="headerlink" title="4.7 数据库厂商标识（databaseIdProvider）"></a>4.7 数据库厂商标识（databaseIdProvider）</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，考虑了移植性。</p>
<p>得到数据库厂商的标识(驱动getDatabaseProductName())，MyBatis就能根据数据库厂商标识来执行不同的sql。</p>
<ol>
<li>为不同的数据库的厂商标识取别名：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查询语句标签中指定databaseId元素值，会优先执行带该标识的，不带标签的语句会舍弃</li>
</ol>
<h3 id="4-8-映射器（mappers）"><a href="#4-8-映射器（mappers）" class="headerlink" title="4.8 映射器（mappers）"></a>4.8 映射器（mappers）</h3><p>需要告诉 MyBatis 到哪里去找到 sql语句。可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等</p>
<ul>
<li>resource：指定sql映射文件的路径</li>
<li>url：使用网上的资源或者使用本地磁盘路径上的文件</li>
<li>class：注册接口，<strong>如果有sql映射文件，映射文件必须和接口同目录同名</strong>；也可以在接口方法上写注解，这样就不需要sql映射文件，</li>
<li>package：批量注册，将包内的映射器接口实现全部注册为映射器，作用同class</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<p>在dao接口文件中，用注解实现查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个查询方法</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Employee <span class="title function_">selectEmployeeById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【一个小坑】：</p>
<ol>
<li><p><strong>class：注册接口，如果有sql映射文件，映射文件必须和接口同目录同名</strong></p>
</li>
<li><p>在resources中建立多级目录时，用 &#x2F; 隔开，但是创建完后显示的是 . 。如果新建目录时用  .会出错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--配置映射,注册Mapper文件--&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=&quot;com.xiao.mybatis.mapper.EmployeeMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="http://image.kongxiao.top/image-20210616205108153.png" alt="image-20210616205108153"></p>
<h2 id="5-映射文件"><a href="#5-映射文件" class="headerlink" title="5. 映射文件"></a>5. 映射文件</h2><p>映射文件指导MyBatis如何进行数据库增删改。</p>
<h3 id="5-1-基本的增删改查"><a href="#5-1-基本的增删改查" class="headerlink" title="5.1 基本的增删改查"></a>5.1 基本的增删改查</h3><ul>
<li>insert –- 映射插入语句</li>
<li>update –- 映射更新语句</li>
<li>delete –- 映射删除语句</li>
<li>select –- 映射查询语句</li>
</ul>
<ol>
<li>首先在接口文件com.xiao.mybatis.mapper.EmployeeMapper中声明对应的增删改查方法，<br>同时可以设置返回值类型Integer、Long、Boolean，表示被影响的行数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个查询方法</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Employee <span class="title function_">selectEmployeeById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line">    <span class="comment">//根据id删除</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteEmpById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后在sql映射文件EmployeeMapper.xml中编写相应的sql语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--parameterType:参数类型，可以省略--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">       insert into tbl_employee (last_name, gender, email) value (#&#123;lastName&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmpById&quot;</span>&gt;</span></span><br><span class="line">       delete from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line">       update tbl_employee set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> getSqlSessionFactory();</span><br><span class="line">    <span class="comment">// 默认不自动提交事务，需要手动提交，或者构造方法传入true</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        <span class="comment">//增</span></span><br><span class="line">        mapper.addEmp(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;林青霞&quot;</span>,<span class="string">&quot;lingqingxia@163.com&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">//删</span></span><br><span class="line">        mapper.deleteEmpById(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//改</span></span><br><span class="line">        mapper.updateEmp(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张柏芝&quot;</span>,<span class="string">&quot;zhangbozhi@qq.com&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">// 手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：增删改需要提交事务</strong></p>
<p>sqlSessionFactory.openSession()：需要手动提交， sqlSession.commit();</p>
<p>sqlSessionFactory.openSession(true) 是自动提交事务的</p>
<h3 id="5-2-获取自增主键的值"><a href="#5-2-获取自增主键的值" class="headerlink" title="5.2 获取自增主键的值"></a>5.2 获取自增主键的值</h3><p>MySQL 支持自增主键，在 MyBatis 中也是使用 statement.getGeneratedKeys() 获取自增主键的值。</p>
<p>用法，insert 标签中增加属性</p>
<ul>
<li><p>useGeneratedKeys&#x3D;”true”：使用自增主键获取主键值策略</p>
</li>
<li><p>keyProperty&#x3D;”id”：获取到的主键封装给 JavaBean 的 id 属性</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--useGeneratedKeys=&quot;true&quot;:使用自增主键获取主键值策略--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--keyProperty=&quot;id&quot;:获取到的主键封装给JavaBean的id属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tbl_employee (last_name, gender, email) value (#&#123;lastName&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：employee.getId() 方法可以获取到自增的主键值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;tom@126.com&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">mapper.addEmp(employee);</span><br><span class="line">System.out.println(employee.getId());</span><br></pre></td></tr></table></figure>

<h3 id="5-3-参数处理"><a href="#5-3-参数处理" class="headerlink" title="5.3 参数处理"></a>5.3 参数处理</h3><p>取参数的方式：#{参数名}</p>
<h4 id="01-单个参数"><a href="#01-单个参数" class="headerlink" title="01 单个参数"></a>01 单个参数</h4><p>MyBatis 不会做处理，传入 id，sql 语句中写 #{idabc} 也能取到参数</p>
<h4 id="02-多个参数"><a href="#02-多个参数" class="headerlink" title="02 多个参数"></a>02 多个参数</h4><p>会被封装成一个 map，#{}就是从 map 中获取指定 key 值的 value。</p>
<p>key：param1,…paramN，或者参数的索引也可以</p>
<p>value：传入的参数值</p>
<p>如果按照之前的写法会报异常：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Employee employee = mapper.selectEmpByIdAndName(6, &quot;Tom&quot;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpByIdAndName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">      select  * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>BindingException: Parameter ‘id’ not found. Available parameters are [arg1, arg0, param1, param2]</p>
</blockquote>
<p>正确写法，但是一般不这么用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select  * from tbl_employee where id = #&#123;param1&#125; and last_name=#&#123;param2&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常规用法：在接口方法中加注解<code>@Param</code>：</strong> 相当于 key 中保存的是 @Param 注解指定的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmpByIdAndName</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;lastName&quot;)</span> String lastName)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="03-传入对象"><a href="#03-传入对象" class="headerlink" title="03 传入对象"></a>03 传入对象</h4><ul>
<li><p>如果多个参数正好是业务逻辑的数据模型，就可以直接传入 POJO，#{属性名}取出传入的POJO的属性值</p>
</li>
<li><p>如果不是业务模型中的数据，没有对应的 POJO，也可以传入 map，#{key} 取出 map 中对应的值，或者编写一个 TO(Transfer Object) 数据传输对象。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装传入参数为Map,查询</span></span><br><span class="line">Employee <span class="title function_">selectEmpByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//注意sql语句中#&#123;id&#125;,#&#123;lastName&#125;与map中的键字段名称一一对应</span></span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">6</span>);</span><br><span class="line">map.put(<span class="string">&quot;lastName&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.selectEmpByMap(map);</span><br><span class="line">System.out.println(employee);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select  * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br></pre></td></tr></table></figure>

<h4 id="04-几种情况小结"><a href="#04-几种情况小结" class="headerlink" title="04 几种情况小结"></a>04 几种情况小结</h4><ol>
<li><p><code>Employee getEmp(@Param(&quot;id&quot;) Integer id, String lastName)</code></p>
<p>取值：id &#x3D;&#x3D;&gt; #{id} 或者 #{param1}，lastName  &#x3D;&#x3D;&gt; #{param2}</p>
</li>
<li><p><code>Employee getEmp(Integer id, @Param(&quot;e&quot;) Employee emp)</code></p>
<p>取值：id &#x3D;&#x3D;&gt; #{param1}，lastName  &#x3D;&#x3D;&gt; #{e.lastName} 或者 #{param2.lastName}</p>
</li>
<li><p>如果传入的是 Collection 类型或者是数组，则会把传入的集合或者数组封装在 map 中</p>
<p>key：collection，list，array</p>
<p><code>Employee getEmp(List&lt;Integer&gt; ids)</code></p>
<p>取值：取出第一个 id 的值 #{list[0]}</p>
</li>
</ol>
<p>总结：参数多时封装成 map，结合@Param 指定封装时使用的 key，#{key} 取出 map 中的值</p>
<h4 id="05-和-的区别"><a href="#05-和-的区别" class="headerlink" title="05 #{}和${}的区别"></a>05 #{}和${}的区别</h4><ul>
<li><p><code>#&#123;&#125;</code>：是以预编译的形式，即占位符，将参数设置到 sql 语句中，类似于 JDBC 中的 PreparedStament，防止 sql 注入</p>
</li>
<li><p><code>$&#123;&#125;</code>：取出的值直接拼装在sql语句中，会有安全问题。</p>
<p>原生 JDBC 中不支持占位符的地方就可以用 ${取值}，比如表名、排序字段等</p>
<p>select * from ${year}_salary where …</p>
<p>select * from tbl_employee order by ${name}</p>
<blockquote>
<p>注意：MyBatis 的 xml文件，排序时使用order by 动态参数时需要注意，用$而不是#</p>
</blockquote>
</li>
</ul>
<h3 id="5-4-select的结果映射"><a href="#5-4-select的结果映射" class="headerlink" title="5.4 select的结果映射"></a>5.4 select的结果映射</h3><h4 id="01-返回的是集合"><a href="#01-返回的是集合" class="headerlink" title="01 返回的是集合"></a>01 返回的是集合</h4><p>select 语句中 resultType 写的是集合中元素的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有，返回一个集合</span></span><br><span class="line">List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    select  * from tbl_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = mapper.selectAll();</span><br><span class="line"><span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Employee&#123;<span class="attribute">id</span>=1, <span class="attribute">lastName</span>=<span class="string">&#x27;张曼玉&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;zhangmanyu@163.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">Employee&#123;<span class="attribute">id</span>=3, <span class="attribute">lastName</span>=<span class="string">&#x27;wangwu&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;wangwu@126.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">Employee&#123;<span class="attribute">id</span>=5, <span class="attribute">lastName</span>=<span class="string">&#x27;林青霞&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;lingqingxia@163.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">Employee&#123;<span class="attribute">id</span>=6, <span class="attribute">lastName</span>=<span class="string">&#x27;Tom&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;tom@126.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;0&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="02-返回一条记录的map"><a href="#02-返回一条记录的map" class="headerlink" title="02 返回一条记录的map"></a>02 返回一条记录的map</h4><p>如果想把一条记录的返回值类型封装为 Map ，key 值为字段名，value 值。则指定 resultType  为 Map ，查询到的结果会将指定的列映射到 Map 的键上，结果映射到值上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一条记录的map，key是列名，值就是对应的值</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpByIdToMap</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询并返回一条记录的map--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = mapper.selectEmpByIdToMap(<span class="number">1</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attribute">gender</span>=1, <span class="attribute">last_name</span>=张曼玉, <span class="attribute">id</span>=1, <span class="attribute">email</span>=zhangmanyu@163.com&#125;</span><br></pre></td></tr></table></figure>

<h4 id="03-多条记录封装为map"><a href="#03-多条记录封装为map" class="headerlink" title="03 多条记录封装为map"></a>03 多条记录封装为map</h4><p>如果想封装多条记录到 map 中，key 是主键值，value 是 JavaBean 对象，则在接口方法上使用 @MapKey 注解指定 key 的属性； resultType 依然为 map 中的 value 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回多条记录封装到map中，key是主键值，value是JavaBean对象</span></span><br><span class="line"><span class="comment">//@MapKey；指定返回的map的key</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;Integer,Employee&gt; <span class="title function_">selectAllToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 返回多条记录封装到map中，key是主键值，value是JavaBean对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">        select * from tbl_employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Employee&gt; map = mapper.selectAllToMap();</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attribute">1</span>=Employee&#123;<span class="attribute">id</span>=1, <span class="attribute">lastName</span>=<span class="string">&#x27;张曼玉&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;zhangmanyu@163.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;1&#x27;</span>&#125;, <span class="attribute">3</span>=Employee&#123;<span class="attribute">id</span>=3, <span class="attribute">lastName</span>=<span class="string">&#x27;wangwu&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;wangwu@126.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;0&#x27;</span>&#125;, <span class="attribute">5</span>=Employee&#123;<span class="attribute">id</span>=5, <span class="attribute">lastName</span>=<span class="string">&#x27;林青霞&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;lingqingxia@163.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;1&#x27;</span>&#125;, <span class="attribute">6</span>=Employee&#123;<span class="attribute">id</span>=6, <span class="attribute">lastName</span>=<span class="string">&#x27;Tom&#x27;</span>, <span class="attribute">email</span>=<span class="string">&#x27;tom@126.com&#x27;</span>, <span class="attribute">gender</span>=<span class="string">&#x27;0&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>而指定 <code>resultType</code> 属性为实体类时，查询到的结果会将指定的列映射到类的成员变量名上，结果映射到成员变量值上。</p>
<p><strong>【注意】：实体类中的属性名和数据库中的字段名保持一致。否则结果值会为null。</strong></p>
<p>如果列名和属性名不能匹配上，且不满足驼峰命名自动映射，可以在 SELECT 语句中设置列别名，<strong>也可以显式配置 <code>ResultMap</code></strong></p>
<h4 id="04-自定义ResultMap"><a href="#04-自定义ResultMap" class="headerlink" title="04 自定义ResultMap"></a>04 自定义ResultMap</h4><p>如果列名和属性名不能匹配上，在xml映射文件中显式配置 <code>ResultMap</code>标签</p>
<ul>
<li>type：自定义规则的Java类型</li>
<li>id：唯一id，用于引用</li>
<li><strong>column：指定数据库中的字段</strong></li>
<li><strong>property：指定对应的JavaBean中的属性</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义结果集规则--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type:自定义规则的Java类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id:唯一id，用于引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyEmp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用id标签定义主键底层会有优化，普通列用result标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column：指定哪一列--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--property:指定对应的JavaBean属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不指定的列会自动封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用resultMap取代resultType，值为自命名的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyEmp&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tbl_employee</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring (一) - IOC 控制反转、DI 依赖注入</title>
    <url>/2021/06/10/Spring(%E4%B8%80)-IOC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E3%80%81DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>Spring 基础知识学习笔记 (一)，内容包括：</p>
<ol>
<li>Spring 入门案例</li>
<li>IOC 控制反转理解</li>
<li>属性注入的不同方式</li>
<li>注入不同类型的属性值</li>
<li>自动装配与注解开发</li>
</ol>
<p>参考视频：</p>
<p>B站 尚硅谷雷丰阳大神的 Spring、Spring MVC、MyBatis 课程 <a href="https://www.bilibili.com/video/BV1d4411g7tv">https://www.bilibili.com/video/BV1d4411g7tv</a></p>
<p>【狂神说Java】Spring5 最新完整教程 IDEA 版通俗易懂  <a href="https://www.bilibili.com/video/BV1WE411d7Dv">https://www.bilibili.com/video/BV1WE411d7Dv</a></p>
<h2 id="1-Spring-概述"><a href="#1-Spring-概述" class="headerlink" title="1. Spring 概述"></a>1. Spring 概述</h2><ul>
<li><p>开源的免费框架，是一个容器，可以管理所有的组件(类)；</p>
</li>
<li><p>轻量级的、非入侵的框架，不依赖于 Spring 的 API</p>
</li>
<li><p><strong>控制反转(IOC)和面向切面编程(AOP)</strong></p>
</li>
<li><p>支持事务处理，支持对框架整合</p>
</li>
<li><p>组件化、一站式</p>
<p>官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>文档：<a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#spring-core">https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#spring-core</a></p>
</li>
</ul>
<p>【总结】：Spring 是一个轻量级的、控制反转和面向切面编程的框架</p>
<p>体系结构：</p>
<p><img src="http://image.kongxiao.top/image-20200613222724177.png" alt="image-20200613222724177"></p>
<ul>
<li><p>Test：Spring 的单元测试模块</p>
</li>
<li><p>Core Container：核心容器 (IOC)，包括 4 部分： </p>
<ul>
<li>spring-core：提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li>
<li>spring-beans：提供 BeanFactory，</li>
<li>spring-context：模块建立在由 core 和 beans 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能</li>
<li>spring-expression：提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等</li>
</ul>
</li>
<li><p>AOP+Aspects：面向切面编程模块</p>
</li>
<li><p>Data Access：数据访问模块</p>
</li>
<li><p>Web：Spring开发Web引用模块</p>
</li>
</ul>
<p>导入依赖：spring-webmvc 包含的最广泛</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-HelloWorld-案例"><a href="#2-HelloWorld-案例" class="headerlink" title="2. HelloWorld 案例"></a>2. HelloWorld 案例</h2><h3 id="2-1-IOC-和-DI"><a href="#2-1-IOC-和-DI" class="headerlink" title="2.1 IOC 和 DI"></a>2.1 IOC 和 DI</h3><p><strong>Inversion of Control：控制反转。</strong></p>
<p>控制，即资源的获取方式，包括：</p>
<ul>
<li><p>主动式：要什么资源自己创建，对于复杂对象的创建时比较庞大的工程</p>
</li>
<li><p>被动式：资源的获取不是我们自己创建，而是交给容器创建。</p>
<p>所谓容器，是用来管理所有的组件的(即有功能的类)；容器可以自动探查出哪些组件需要用到另一些组件</p>
</li>
</ul>
<p><strong>DI：Dependency Injection，依赖注入</strong>，是 IOC 的一种实现形式。容器能知道哪个组件运行时需要另外一个类，容器通过反射的形式，将容器中准备好的对象注入。</p>
<h3 id="2-2-入门案例"><a href="#2-2-入门案例" class="headerlink" title="2.2 入门案例"></a>2.2 入门案例</h3><p>HelloWorld：所有的对象交给容器创建，给容器中注册组件</p>
<ol>
<li><p>新建一个 Person 类，<strong>添加 set 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个 Spring 配置文件 ApplicationContext.xml，注册 bean。</p>
<p>使用<code>bean</code>标签注册一个 Person 对象，Spring会自动创建这个 Person 对象</p>
<ul>
<li>class：写要注册的组件的全类名</li>
<li>id：这个对象的唯一标识</li>
<li>使用 <code>property</code> 标签为 Person 对象的属性值，name：指定属性名；value：指定属性值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册一个Person对象，Spring会自动创建这个Person对象</span></span><br><span class="line"><span class="comment">        class:写要注册的组件的全类名</span></span><br><span class="line"><span class="comment">        id:这个对象的唯一标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property标签为Person对象的属性赋值</span></span><br><span class="line"><span class="comment">            name:指定属性名</span></span><br><span class="line"><span class="comment">            value:指定属性值</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.xiao.helloworld.IocTest &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> (Person) ioc.getBean(<span class="string">&quot;person01&quot;</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean2</span> <span class="operator">=</span> (Person) ioc.getBean(<span class="string">&quot;person01&quot;</span>);</span><br><span class="line">        System.out.println(bean == bean2);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean3</span> <span class="operator">=</span> ioc.getBean(Person.class);</span><br><span class="line">        System.out.println(bean == bean3 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person(lastName=zhangsan, age=<span class="number">20</span>, gender=<span class="number">0</span>, email=zhangsan@<span class="number">163.</span>com)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p> 几个细节：</p>
</blockquote>
<ol>
<li>ApplicationContext：IOC 容器的接口</li>
<li><strong>同一个组件在 IOC 容器中默认是单实例的</strong></li>
<li><strong>容器中的对象的创建在容器创建完成的时候就已经创建好了</strong></li>
<li>容器中如果没有这个组件，获取组件时会报异常 NoSuchBeanDefinitionException</li>
<li>IOC 容器用 <code>property</code> 标签创建这个组件对象的时候，会利用 setter 方法为其属性赋值，<strong>注意属性名是set方法后的那串的首字母小写</strong></li>
</ol>
</li>
</ol>
<h3 id="2-3-根据-bean-类型获取-bean-实例"><a href="#2-3-根据-bean-类型获取-bean-实例" class="headerlink" title="2.3 根据 bean 类型获取 bean 实例"></a>2.3 根据 bean 类型获取 bean 实例</h3><p>ioc.getBean() 方法中可以传入 bean 的 id，也可以传入class对象，也可以同时传入。</p>
<p>如果一个类型指只注册了一个，则可以通过<code>ioc.getBean(....class)</code>获得该对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">bean1</span> <span class="operator">=</span> ioc.getBean(Person.class);</span><br></pre></td></tr></table></figure>

<p>但是如果 IOC 容器中这个类型的 bean 有多个，则会报异常 NoUniqueBeanDefinitionException</p>
<p>也可以同时传入 bean 的 id 和 class 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">bean1</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;person02&quot;</span>,Person.class);</span><br></pre></td></tr></table></figure>

<h2 id="3-属性的注入方式"><a href="#3-属性的注入方式" class="headerlink" title="3. 属性的注入方式"></a>3. 属性的注入方式</h2><ul>
<li><p>依赖：bean 对象的创建依赖于容器</p>
</li>
<li><p>注入：bean 对象中所有的属性由容器来注入</p>
</li>
</ul>
<h3 id="3-1-setter-注入"><a href="#3-1-setter-注入" class="headerlink" title="3.1 setter 注入"></a>3.1 setter 注入</h3><p><strong>需要借助 set 方法</strong>，使用<code>propetry</code>标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-通过构造器注入"><a href="#3-2-通过构造器注入" class="headerlink" title="3.2 通过构造器注入"></a>3.2 通过构造器注入</h3><p>使用<code>constructor-arg</code>标签，则调用构造器进行属性注入，<strong>需要借助有参构造</strong></p>
<ul>
<li><strong>通过构造函数中的参数名称注入</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>只写 value 属性，会默认按顺序寻找构造方法进行匹配</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;wangwu@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>通过构造函数参数类型</strong>，默认按照顺序</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>通过构造函数参数索引</strong>，如果有多个重载的构造函数时也可以配合 type 一起使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu@qq.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-p-名称空间注入"><a href="#3-3-p-名称空间注入" class="headerlink" title="3.3 p 名称空间注入"></a>3.3 p 名称空间注入</h3><p>使用 p:propertyName 直接注入属性的值。本质上还是调用的 set 方法</p>
<p>导入头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person06&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:lastName</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;30&quot;</span> <span class="attr">p:email</span>=<span class="string">&quot;zhangsan@qq.com&quot;</span> <span class="attr">p:gender</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-c-命名空间注入"><a href="#3-4-c-命名空间注入" class="headerlink" title="3.4 c 命名空间注入"></a>3.4 c 命名空间注入</h3><p>c (构造: Constructor) 命名空间注入，使用 c:propertyName 注入属性值,<strong>本质上使用的是构造器注入</strong></p>
<p>导入头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person07&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">c:lastName</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;30&quot;</span> <span class="attr">c:email</span>=<span class="string">&quot;zhangsan@qq.com&quot;</span> <span class="attr">c:gender</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-注入不同类型的属性值"><a href="#4-注入不同类型的属性值" class="headerlink" title="4. 注入不同类型的属性值"></a>4. 注入不同类型的属性值</h2><p>新建了一个 Student 类和一个 Address 类，来测试不同类型的属性值注入：</p>
<p>Student 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Address 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-注入基本类型值"><a href="#4-1-注入基本类型值" class="headerlink" title="4.1 注入基本类型值"></a>4.1 注入基本类型值</h3><p>之前的例子都是注入基本类型的属性。如果不赋值的话，会使用属性的默认值</p>
<h3 id="4-2-注入-null"><a href="#4-2-注入-null" class="headerlink" title="4.2 注入 null"></a>4.2 注入 null</h3><p>如果有属性给了初始值，想注入为 null，则在 property 内部需要使用 <code>null</code> 标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意，使用 value&#x3D;”null” 是不对的：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的用法虽然对象的 name 属性打印出来是 null，但是 bean.getName()&#x3D;&#x3D;null 是 false：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">bean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;student01&quot;</span>, Student.class);</span><br><span class="line">System.out.println(bean);</span><br><span class="line">System.out.println(bean.getName()==<span class="literal">null</span>);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student(name=<span class="literal">null</span>, address=<span class="literal">null</span>, books=<span class="literal">null</span>, hobbies=<span class="literal">null</span>, card=<span class="literal">null</span>, games=<span class="literal">null</span>, wife=<span class="literal">null</span>, info=<span class="literal">null</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-注入-bean"><a href="#4-3-注入-bean" class="headerlink" title="4.3 注入 bean"></a>4.3 注入 bean</h3><p>可以使用<code>ref</code>引用外部的值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--先注册一个Address对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过id值引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要注意，<strong>ref 是严格的引用</strong>，通过容器拿到的 Address 实例就是 Student 实例中的 Address 属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Address</span> <span class="variable">address01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;address01&quot;</span>, Address.class);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;student02&quot;</span>, Student.class);</span><br><span class="line">System.out.println(student02);</span><br><span class="line">System.out.println(student02.getAddress() == address01);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>也可以<strong>引用内部 bean</strong>，在<code>property</code>标签体中再定义bean，这个 Address 和外面的没有关系，<strong>只能内部使用，外面获取不到</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tianijng&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-集合类型赋值"><a href="#4-3-集合类型赋值" class="headerlink" title="4.3 集合类型赋值"></a>4.3 集合类型赋值</h3><h4 id="01-数组"><a href="#01-数组" class="headerlink" title="01 数组"></a>01 数组</h4><p><code>array</code>标签+<code>value</code>标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="02-List"><a href="#02-List" class="headerlink" title="02 List"></a>02 List</h4><p><code>list</code>标签+<code>value</code>标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="03-Map"><a href="#03-Map" class="headerlink" title="03 Map"></a>03 Map</h4><p><code>map</code>标签+<code>entry</code>标签，<code>entry</code>也可以使用ref引用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;中行&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;邮政&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;....&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="04-Properties"><a href="#04-Properties" class="headerlink" title="04 Properties"></a>04 Properties</h4><p><code>props</code>标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>20190604<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="05-util-名称空间"><a href="#05-util-名称空间" class="headerlink" title="05 util 名称空间"></a>05 util 名称空间</h4><p>util 名称空间可以创建集合类型的 bean，以便别的地方引用。</p>
<p>头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation= &quot;http://www.springframework.org/schema/util</span><br><span class="line">http://www.springframework.org/schema/util/spring-util-4.1.xsd&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--util名称空间 提取出通用的集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用ref直接引用util提取出来的集合id即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-级联属性赋值"><a href="#4-4-级联属性赋值" class="headerlink" title="4.4 级联属性赋值"></a>4.4 级联属性赋值</h3><p><code>propetry </code>标签中的 name 标签，可以使用级联属性，修改属性的属性，但是原来属性的值会被修改。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Address&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将address01中的num属性进行了修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address.num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;00005&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-继承实现配置信息重用"><a href="#4-5-继承实现配置信息重用" class="headerlink" title="4.5 继承实现配置信息重用"></a>4.5 继承实现配置信息重用</h3><p>指定 parent 属性为要重用的 bean 的 id 值，不写的属性就沿用，也可以重写定义属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--parent：要重用的配置信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;person01&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单独修改name属性的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以指定属性 abstract&#x3D;”true”，这样的 bean 只能被用来继承信息，不能获取实例。否则会报异常 BeanIsAbstractException</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.helloworld.bean.Person&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property标签为Person对象的属性赋值</span></span><br><span class="line"><span class="comment">        name:指定属性名</span></span><br><span class="line"><span class="comment">        value:指定属性值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-bean-的一些性质"><a href="#5-bean-的一些性质" class="headerlink" title="5 bean 的一些性质"></a>5 bean 的一些性质</h2><h3 id="5-1-bean-之间依赖"><a href="#5-1-bean-之间依赖" class="headerlink" title="5.1 bean 之间依赖"></a>5.1 bean 之间依赖</h3><p>多个 bean 的默认创建顺序，是按照配置顺序创建的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Student创建了</span><br><span class="line"><span class="selector-tag">Address</span>创建了</span><br><span class="line">Person创建了</span><br></pre></td></tr></table></figure>

<p>可以用 depends-on 属性进行设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;person,address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Person创建了</span><br><span class="line"><span class="selector-tag">Address</span>创建了</span><br><span class="line">Student创建了</span><br></pre></td></tr></table></figure>

<h3 id="5-2-bean-的作用域-scope"><a href="#5-2-bean-的作用域-scope" class="headerlink" title="5.2 bean 的作用域 scope"></a>5.2 bean 的作用域 scope</h3><p>在 bean 配置中可以设置作用域属性 scope：</p>
<ul>
<li><p>single： 单例模式，是默认模式。<strong>在容器启动完成之前就已经创建好对象保存在容器中了。</strong></p>
</li>
<li><p>prototype ：原型模式，容器启动会不去创建，<strong>每次从容器中 get 的时候才会产生一个新对象</strong></p>
</li>
<li><p>request：在 web 环境下，同一次请求创建一个 bean 实例(没用)</p>
</li>
<li><p>session：在 web 环境下，同一次会话创建一个 bean 实例(没用)</p>
</li>
</ul>
<h3 id="5-3-静态工厂与实例工厂"><a href="#5-3-静态工厂与实例工厂" class="headerlink" title="5.3 静态工厂与实例工厂"></a>5.3 静态工厂与实例工厂</h3><p>静态工厂：工厂本身不用创建对象，通过静态方法调用，对象 &#x3D; 工厂类.工厂方法名( )</p>
<p>实例工厂：工厂本身需要创建对象，先创建工厂对象，再通过工厂对象创建所需对象</p>
<p>新建三个类 Air、AirStaticFactory和AirInstanceFactory：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Air</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="keyword">private</span> Double length;</span><br><span class="line">    <span class="keyword">private</span> Integer PersonNum;</span><br><span class="line">    <span class="comment">//get/set...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirStaticFactory</span> &#123;</span><br><span class="line">    <span class="comment">//提供一个静态方法获取Air对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Air <span class="title function_">getAir</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirStaticFactory正在造飞机！&quot;</span>);</span><br><span class="line">        <span class="type">Air</span> <span class="variable">air</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Air</span>();</span><br><span class="line">        air.setName(name);</span><br><span class="line">        air.setLength(<span class="number">100.0</span>);</span><br><span class="line">        air.setWeight(<span class="number">100.0</span>);</span><br><span class="line">        air.setPersonNum(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirInstanceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个方法获取Air对象</span></span><br><span class="line">    <span class="keyword">public</span> Air <span class="title function_">getAir</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirInstanceFactory正在造飞机！&quot;</span>);</span><br><span class="line">        <span class="type">Air</span> <span class="variable">air</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Air</span>();</span><br><span class="line">        air.setName(name);</span><br><span class="line">        air.setLength(<span class="number">100.0</span>);</span><br><span class="line">        air.setWeight(<span class="number">100.0</span>);</span><br><span class="line">        air.setPersonNum(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态工厂：</strong>不需要创建工厂本身，class 指定静态工厂的全类名，factory-method 指定工厂方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态工厂，不需要创建工厂本身,class指定静态工厂的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.AirStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAir&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;林青霞&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取到的就是Air的实例</span></span><br><span class="line"><span class="type">Air</span> <span class="variable">air01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;air01&quot;</span>,Air.class);</span><br></pre></td></tr></table></figure>

<p><strong>实例工厂：</strong>先创建示例工厂本身，再创建对象，指定当前对象的创建需要哪个工厂 factory-bean 和哪个方法  factory-method</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--实例工厂，需要先创建示例工厂本身--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airInstanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.AirInstanceFactory&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定当前对象的创建需要哪个工厂和哪个方法，不需要指定class了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air02&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;airInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAir&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张学友&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Air</span> <span class="variable">air02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;air02&quot;</span>,Air.class);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-自定义工厂"><a href="#5-4-自定义工厂" class="headerlink" title="5.4 自定义工厂"></a>5.4 自定义工厂</h3><p><strong>实现了 FactoryBean 接口的类</strong>，是 Spring 可以认识的工厂类，Spring 会自动调用工厂方法创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBeanImpl</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Air&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂方法，Spring会自动调用这个方法来创建对象并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Air <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Air</span> <span class="variable">air</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Air</span>();</span><br><span class="line">        air.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回对象的类型,Spring会自动调用这个方法来确认创建的对象是什么类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是单例模式吗？</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册工厂对象，会自动调用工厂方法返回对象：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册工厂对象，会自动调用工厂方法返回对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.MyFactoryBeanImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">air03</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;air03&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这种类型，IOC 容器启动时不会创建实例，使用 getBean 时才会创建</p>
<h3 id="5-5-bean-的生命周期方法"><a href="#5-5-bean-的生命周期方法" class="headerlink" title="5.5 bean 的生命周期方法"></a>5.5 bean 的生命周期方法</h3><p>可以为 bean 自定义一些生命周期方法，Spring在创建或销毁bean时调用。<code>init-method</code>，<code>destroy-method</code>，不能有参数。</p>
<p>IOC 容器中注册的 bean：</p>
<ul>
<li><p>单实例 bean：容器启动的时候就会创建好，容器关闭也会销毁创建的bean</p>
<p>(容器启动)构造器 —&gt; 初始化方法 —&gt; （容器关闭)销毁方法</p>
</li>
<li><p>多实例 bean：获取的时候才去创建</p>
<p>(容器启动)构造器 —&gt; 初始化方法 ，容器关闭不会调用 bean 的销毁方法</p>
</li>
</ul>
<p>在 Air 类中新增两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Air</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="keyword">private</span> Double length;</span><br><span class="line">    <span class="keyword">private</span> Integer PersonNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法被调用了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始方法被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.Air&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-bean-的后置处理器"><a href="#5-6-bean-的后置处理器" class="headerlink" title="5.6 bean 的后置处理器"></a>5.6 bean 的后置处理器</h3><p>定义一个类实现 BeanPostProcessor 接口，其中两个方法 <code>postProcessBeforeInitialization</code> 和<code>postProcessAfterInitialization </code>会在调用初始化方法前后调用。需要注册这个实现类</p>
<p>即使没有定义初始化方法，这两个方法也会被调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置处理器，在初始化方法之前调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 传递过来的，将要初始化的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 经该方法处理之后可以返回一个新的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+beanName+<span class="string">&quot;】将要调用初始化方法了..BeforeInitialization..这个bean是这样的：+【&quot;</span>+bean+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置处理器，在初始化方法之后调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 经该方法处理后返回给IOC容器保存的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+beanName+<span class="string">&quot;】初始化方法调用完了..AfterInitialization..这个bean是这样的：+【&quot;</span>+bean+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.Air&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">【air04】将要调用初始化方法了<span class="built_in">..</span>BeforeInitialization<span class="built_in">..</span>这个bean是这样的：+【Air&#123;<span class="attribute">name</span>=<span class="string">&#x27;null&#x27;</span>, <span class="attribute">weight</span>=<span class="literal">null</span>, <span class="attribute">length</span>=<span class="literal">null</span>, <span class="attribute">PersonNum</span>=<span class="literal">null</span>&#125;】</span><br><span class="line">初始方法被调用了</span><br><span class="line">【air04】初始化方法调用完了<span class="built_in">..</span>AfterInitialization<span class="built_in">..</span>这个bean是这样的：+【Air&#123;<span class="attribute">name</span>=<span class="string">&#x27;null&#x27;</span>, <span class="attribute">weight</span>=<span class="literal">null</span>, <span class="attribute">length</span>=<span class="literal">null</span>, <span class="attribute">PersonNum</span>=<span class="literal">null</span>&#125;】</span><br></pre></td></tr></table></figure>

<h2 id="6-bean-的装配"><a href="#6-bean-的装配" class="headerlink" title="6. bean 的装配"></a>6. bean 的装配</h2><h3 id="6-1-Spring-管理连接池"><a href="#6-1-Spring-管理连接池" class="headerlink" title="6.1 Spring 管理连接池"></a>6.1 Spring 管理连接池</h3><p>配置 C3P0 的数据库连接池，注册一 ComboPooledDataSource 对象即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-引入外部配置文件"><a href="#6-2-引入外部配置文件" class="headerlink" title="6.2 引入外部配置文件"></a>6.2 引入外部配置文件</h3><p>首先新建一个数据库连接池的配置文件 db.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>需要用到 context 命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">      http://www.springframework.org/schema/context</span><br><span class="line">      https://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure>

<p>使用<code>context:property-placeholder location=&quot; ... &quot;</code>标签导入数据库配置文件 db.properties，就可以用 $ 取出对应的属性了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>【一个小坑】：Spring 内部已经定义过一个 username 了，${username} 就是系统的用户名，所以这里定义的是 jdbc.username</p>
<h3 id="6-3-基于-XML-的自动装配"><a href="#6-3-基于-XML-的自动装配" class="headerlink" title="6.3 基于 XML 的自动装配"></a>6.3 基于 XML 的自动装配</h3><p>自动装配是 Spring 满足 bean 依赖的一种方式。Spring 会在上下文中自动寻找，并给 bean 自动装配属性。</p>
<p>Spring 中的三种装配方式：</p>
<ol>
<li><p>在 xml 显示配置</p>
</li>
<li><p>在 Java 中显示配置</p>
</li>
<li><p>隐式的自动装配 bean</p>
</li>
</ol>
<p>在<code>bean</code>标签中设置<code>autowire</code>属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.Air&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>autpwire=&quot;default/no&quot;</code>：不自动装配</p>
</li>
<li><p><code>autpwire=&quot;byName&quot;</code>：按照名字，以属性名作为id去容器中找到这个组件，为其赋值；如果找不到就装配 null</p>
</li>
<li><p><code>autpwire=&quot;byType&quot;</code>：按照类型，以属性的类型作为查找依据去容器中找到这个组件，为其赋值，<strong>该类型必须只有一个</strong>，否则会报异常NoUniqueBeanDifinetionException；如果找不到就装配 null</p>
</li>
<li><p><code>autpwire=&quot;construction&quot;</code>：按照构造器进行赋值：先按照有参构造器的参数类型进行装，如果没有就直接为组件装配null即可；如果按照类型有多个，就会把参数名作为id继续匹配，匹配到就自动装配，匹配不到就装配null。不会报错</p>
</li>
</ul>
<h2 id="7-注解开发"><a href="#7-注解开发" class="headerlink" title="7. 注解开发"></a>7. 注解开发</h2><h3 id="7-1-不同层组件"><a href="#7-1-不同层组件" class="headerlink" title="7.1 不同层组件"></a>7.1 不同层组件</h3><ol>
<li><p>通过给 bean 上添加注解，可以快速的将 bean 加入到 IOC 容器中。创建 Dao、Service、Controller层所需要用到的注解：</p>
<ul>
<li><code>@Component</code>：组件，放在类上，将某个类注册到 Spring 中，<strong>id 是类名首字母小写</strong>。相当于：<code>&lt;bean id=&quot;..&quot; class=&quot;..&quot;&gt;</code></li>
<li><code>@Repository</code>：Dao 持久化层</li>
<li><code>@Servic</code>：Service 业务逻辑层</li>
<li><code>@Controller</code>：Controller 控制器层。后面三个含义更清晰</li>
</ul>
</li>
<li><p>还需要告诉Spring，自动扫描加了注解的组件：**添加 context 名称空间，<code>&lt;context:component-scan base-package=&quot;com.xiao&quot;/&gt;</code>**。还需要有 AOP 包的依赖。</p>
</li>
<li><p><strong>组件的 id 默认是类名首字母小写，作用于默认是单例</strong>，可以修改。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;book&quot;)</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@Value</code>：注入值，注入基本数据类型和 String 类型数据</p>
</li>
<li><p><code>@Scope</code>：标注作用域。singleton, prototype…</p>
<p>细节：如果注解中有且只有一个属性要赋值时，且名称是 value，value 在赋值是可以不写。</p>
</li>
</ul>
<h3 id="7-2-context-扫描包的配置"><a href="#7-2-context-扫描包的配置" class="headerlink" title="7.2 context 扫描包的配置"></a>7.2 context 扫描包的配置</h3><p>指定要扫描的包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定扫描包时指定排除一些不要的组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定排除不要的组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;...&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>type=&quot;annotation&quot;</code>：按照注解进行排除，<code>expression</code>属性中指定要排除的注解的全类名</li>
<li><code>type=&quot;assignable&quot;</code>：按照类名进行排除，<code>expression</code>属性中指定要排除的类的全类名</li>
</ul>
<p>只扫描进入指定的组件，默认都是全部扫描进来，<code>use-default-filters</code>需要设置为false：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;...&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-Autowired自动装配"><a href="#7-3-Autowired自动装配" class="headerlink" title="7.3 Autowired自动装配"></a>7.3 Autowired自动装配</h3><h4 id="01-基本使用"><a href="#01-基本使用" class="headerlink" title="01 基本使用"></a>01 基本使用</h4><p>直接在成员上添加<code> @Autowired</code>完成自动装配。</p>
<p>Dao 层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">	<span class="comment">//声明一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readBook</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读了一本书！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service 层，使用注解<code>@Autowired</code>完成成员 BookDao 的自动装配，调用 dao 层的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">	<span class="comment">//使用@Autowired完成成员BookDao的自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao.readBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Controller 层，使用注解<code>@Autowired</code>完成成员 BookService 的自动装配，调用 service 层的方法：：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookService.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="02-Autowired-的执行流程"><a href="#02-Autowired-的执行流程" class="headerlink" title="02 Autowired 的执行流程"></a>02 Autowired 的执行流程</h4><p><code>@Autowired</code>可以直接用在属性上，执行流程：</p>
<ol>
<li><p>首先按照类型去容器中找对应的组件，如果找到一个就赋值，找不到就抛异常；</p>
</li>
<li><p>如果有多个类型匹配时，会使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功，找不到就报错。</p>
</li>
<li><p>结合注解<code> @Qualifer</code>，指定一个 id：在自动按照类型注入的基础之上，再按照指定的 bean 的 id 去查找。它在给字段注入时不能独立使用，必须和<code>@Autowired</code>一起使用；但是给方法参数注入时，可以独立使用。</p>
</li>
</ol>
<p><code>@Autowired</code>标注的属性如果找不到就会报错，可以指定 required 属性，找不到就自动装配 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false )</span></span><br></pre></td></tr></table></figure>

<h4 id="03-注解加在方法上"><a href="#03-注解加在方法上" class="headerlink" title="03 注解加在方法上"></a>03 注解加在方法上</h4><p><code> @Autowired</code>：也可以使用在 set 方法上，执行流程跟上面一样；</p>
<p><code> @Qualifer</code>：还可以用在方法的参数，指定按照哪个 id 去装配。</p>
<p><code> @Nullable</code>：标记的属性可以 null</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class BookService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private void setBookDao(BookDao bookDao) &#123;</span><br><span class="line">        this.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void read() &#123;</span><br><span class="line">        this.bookDao.readBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="04-Resource"><a href="#04-Resource" class="headerlink" title="04 @Resource"></a>04 @Resource</h4><p><code> @Resource：</code>直接按照 Bean 的 id 注入，是 Java 自带的注解。执行流程：</p>
<p>　　1. 如果同时指定了 name 和 type，则从 Spring 上下文中找到唯一匹配的 bean 进行装配，找不到则抛出异常<br>　　2. 如果指定了 name，则从上下文中查找id匹配的 bean 进行装配，找不到则抛出异常<br>　　3. 如果指定了 type，则从上下文中找到类型匹配的唯一 bean 进行装配，找不到或者找到多个，都会抛出异常<br>　　4. 如果既没有指定 name，又没有指定 type，则自动按照 byName 方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p>
<h3 id="7-4-Spring的单元测试"><a href="#7-4-Spring的单元测试" class="headerlink" title="7.4 Spring的单元测试"></a>7.4 Spring的单元测试</h3><p>使用 Spring 的单元测试，不需要用 ioc.getBean() 来获取组件了，直接 Autowired 组件，Spring 自动装配</p>
<p>导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加注解：</p>
<ul>
<li>@ContextConfiguration：指定 Spring 配置文件的位置</li>
<li>@RunWith：指定用哪种驱动进行单元测试，默认是 junit，这里指定用 Spring 的单元测试模块来执行标了@Test 注解的测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@ContextConfiguration:指定Spring配置文件的位置</span></span><br><span class="line"><span class="comment"> *@RunWith：指定用哪种驱动进行单元测试，默认是junit,这里指定用Spring的单元测试模块来执行标了@Test注解的测试方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookController.one();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>Bean</tag>
      </tags>
  </entry>
</search>
